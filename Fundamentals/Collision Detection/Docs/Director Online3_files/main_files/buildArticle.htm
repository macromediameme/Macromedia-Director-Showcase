<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0054)http://www.director-online.com/buildArticle.cfm?id=855 -->
<HTML><HEAD><TITLE>A Director Online article</TITLE>
<META content="pixelgeek design &amp; communications" name=Author>
<META http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<SCRIPT language=JavaScript>
    <!--
    function MM_openBrWindow(theURL,winName,features) { //v1.2
      window.open(theURL,winName,features);
    }
    //-->
</SCRIPT>

<META content="MSHTML 5.50.4030.2400" name=GENERATOR></HEAD>
<BODY text=#000000 vLink=#31427b aLink=#425294 link=#425294 bgColor=#ffffff>
<P><BR>
<TABLE height=25 cellSpacing=0 cellPadding=0 width=500 border=0>
  <TBODY>
  <TR vAlign=top align=left bgColor=#cecece>
    <TD><A 
      onmouseover="window.status='Get the direct URL for this article'; return true" 
      onclick="MM_openBrWindow('generateURL.cfm?id=855','utility','scrollbars=yes,resizable=no,width=400,height=250'); return false" 
      href="http://www.director-online.com/generateURL.cfm?id=855"><IMG 
      height=25 alt="Get the direct URL for this article" 
      src="buildArticle_files/articleURL.gif" width=87 border=0></A> </TD>
    <TD><A 
      onmouseover="window.status='Visit the Lingo Lounge article archive'; return true" 
      href="http://www.director-online.com/archive.cfm?pSection=Lingo%20Lounge"><IMG 
      height=25 alt="Visit the Lingo Lounge article archive" 
      src="buildArticle_files/archives.gif" width=66 border=0></A> </TD>
    <TD><A 
      onmouseover="window.status='Check out other articles by Gary Rosenzweig'; return true" 
      href="http://www.director-online.com/buildAuthorsArticles.cfm?author=50"><IMG 
      height=25 alt="Check out other articles by Gary Rosenzweig" 
      src="buildArticle_files/author.gif" width=56 border=0></A> </TD>
    <TD><A 
      onmouseover="window.status='Mail this article to a friend'; return true" 
      onclick="MM_openBrWindow('emailArticle.cfm?id=855','utility','scrollbars=yes,resizable=no,width=400,height=400'); return false" 
      href="http://www.director-online.com/emailArticle.cfm?id=855"><IMG 
      height=25 alt="Mail this article to a friend" 
      src="buildArticle_files/mailArticle.gif" width=83 border=0></A> </TD>
    <TD><A 
      onmouseover="window.status='Sign in to your myDOUG page'; return true" 
      onclick="MM_openBrWindow('myDOUG/login.cfm?type=toolbar','utility','scrollbars=yes,resizable=no,width=525,height=400'); return false" 
      href="http://www.director-online.com/myDOUG/login.cfm?type=toolbar"><IMG 
      height=25 alt="Sign in to your myDOUG page" 
      src="buildArticle_files/signIn.gif" width=63 border=0></A> </TD>
    <TD><A 
      onmouseover="window.status='Discuss this article on DOUGthreads'; return true" 
      href="http://209.112.84.34/Forums/index.cfm?cfapp=2&amp;Thread_ID=2501"><IMG 
      height=25 alt="Discuss this article on DOUGthreads" 
      src="buildArticle_files/discussArticle.gif" width=105 border=0></A> </TD>
    <TD><A 
      onmouseover="window.status='What do these buttons do?'; return true" 
      onclick="MM_openBrWindow('help.html','utility','scrollbars=yes,resizable=no,width=400,height=250'); return false" 
      href="http://www.director-online.com/help.html"><IMG height=25 
      alt="What do these buttons do?" src="buildArticle_files/help.gif" width=25 
      border=0></A> </TD></TR></TBODY></TABLE>
<P><FONT face="Verdana, Arial, Geneva, Helvetica, sans-serif" size=+2><B>Lingo 
Lounge</B></FONT><BR><FONT face="Verdana, Arial, Geneva, Helvetica, sans-serif" 
color=#cc0000 size=+1><B>Lingo Collision Detection, Part 3</B></FONT> 
<P><FONT size=-1>by <A href="mailto:lingolounge@director-online.com">Gary 
Rosenzweig</A> </FONT>
<P>
<TABLE cellSpacing=0 cellPadding=0 width=500 border=0>
  <TBODY>
  <TR>
    <TD vAlign=top>
      <P>For the last two weeks we have looked at collision detection. We've 
      examined Lingo functions like intersect, intersects, inside and hitTest. 
      We've also looked at mathematical distance formulas. Director 8 offers a 
      new way to do collision detection. Thanks to the getPixel function, we can 
      examine contents of individual pixels. 
      <P>So, if we take an image, say a character in a game, and examine every 
      pixel in the bitmap, we can make a list of all the points in the image. We 
      can rule out pixels that are the same as the background color of the 
      bitmap. This will create a virtual mask of the image as a series of 
      points. 
      <P>We can then compare this series of points to other bitmaps on the 
      Stage. This point-by-point comparison will give us an accurate reading of 
      when there is a collision. Better still, it can give us that reading 
      before the sprite is actually moved. This will enable us to detect 
      collisions before they happen and prevent them, rather than acting after 
      the fact as we would have to do with the intersects function. 
      <P>Let's make a quick behavior that does this. The first step would be to 
      define what is a background color and what is not. Then, to get a list of 
      points in the image that are not transparent. We will use white as the 
      background color, and even name the property pWhite, though another can be 
      used depending on the image. 
      <P><FONT face="Verdana, Arial, Helvetica, sans-serif" color=#000000 
      size=-1><FONT color=#0000c8>property</FONT> pPoints, 
      pWhite<BR><BR><B><FONT color=#0000c8>on</FONT> <FONT 
      color=#008000>beginSprite</FONT> <FONT 
      color=#0000c8>me</FONT></B><BR>&nbsp;&nbsp;<FONT 
      face="Courier New, Courier, mono" color=#c80000 size=-1>-- define 
      transparent pixels</FONT><BR>&nbsp;&nbsp;pWhite = rgb(<FONT 
      color=#808080>255</FONT>,<FONT color=#808080>255</FONT>,<FONT 
      color=#808080>255</FONT>)<BR>&nbsp;&nbsp;<FONT 
      face="Courier New, Courier, mono" color=#c80000 size=-1>-- find key points 
      on this sprite</FONT><BR>&nbsp;&nbsp;findPoints(<FONT 
      color=#0000c8>me</FONT>)<BR><FONT color=#0000c8>end</FONT><BR></FONT></P>
      <P>This handler looks at all of the points in the image and adds those 
      that are not the background color to a list. 
      <P><FONT face="Verdana, Arial, Helvetica, sans-serif" color=#000000 
      size=-1><B><FONT color=#0000c8>on</FONT> findPoints <FONT 
      color=#0000c8>me</FONT></B><BR>&nbsp;&nbsp;<BR>&nbsp;&nbsp;<FONT 
      face="Courier New, Courier, mono" color=#c80000 size=-1>-- get the 
      image</FONT><BR>&nbsp;&nbsp;image = <FONT 
      color=#008000>sprite</FONT>(<FONT color=#0000c8>me</FONT>.<FONT 
      color=#008000>spriteNum</FONT>).<FONT 
      color=#008000>member</FONT>.image<BR>&nbsp;&nbsp;<BR>&nbsp;&nbsp;<FONT 
      face="Courier New, Courier, mono" color=#c80000 size=-1>-- init the 
      list</FONT><BR>&nbsp;&nbsp;pPoints = 
      []<BR>&nbsp;&nbsp;<BR>&nbsp;&nbsp;<FONT face="Courier New, Courier, mono" 
      color=#c80000 size=-1>-- find top and bottom 
      points</FONT><BR>&nbsp;&nbsp;<FONT color=#0000c8>repeat</FONT> <FONT 
      color=#0000c8>with</FONT> col = <FONT color=#808080>0</FONT> <FONT 
      color=#0000c8>to</FONT> image.<FONT color=#008000>width</FONT>-<FONT 
      color=#808080>1</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
      color=#0000c8>repeat</FONT> <FONT color=#0000c8>with</FONT> row = <FONT 
      color=#808080>0</FONT> <FONT color=#0000c8>to</FONT> image.<FONT 
      color=#008000>height</FONT>-<FONT 
      color=#808080>1</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
      color=#0000c8>if</FONT> image.getPixel(col,row) &lt;&gt; pWhite <FONT 
      color=#0000c8>then</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
      color=#008000>add</FONT> pPoints, <FONT 
      color=#008000>point</FONT>(col,row)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
      color=#0000c8>end</FONT> <FONT 
      color=#0000c8>if</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
      color=#0000c8>end</FONT> <FONT 
      color=#0000c8>repeat</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;<FONT 
      color=#0000c8>end</FONT> <FONT color=#0000c8>repeat</FONT> 
      <BR>&nbsp;&nbsp;<BR><FONT color=#0000c8>end</FONT><BR></FONT></P>
      <P>This list of points is then used in the next handler to compare with 
      other sprites. To speed things up, only a small range of sprites are 
      compared. The useful mapMemberToStage and mapStageToMember are used to 
      translate points in the character's image to points on the Stage, and then 
      those points to points in the other sprites' image. 
      <P><FONT face="Verdana, Arial, Helvetica, sans-serif" color=#000000 
      size=-1><B><FONT color=#0000c8>on</FONT> checkCollision <FONT 
      color=#0000c8>me</FONT></B><BR>&nbsp;&nbsp;<BR>&nbsp;&nbsp;firstSprite = 
      <FONT color=#808080>1</FONT><BR>&nbsp;&nbsp;lastSprite = <FONT 
      color=#808080>10</FONT><BR>&nbsp;&nbsp;<BR>&nbsp;&nbsp;<FONT 
      color=#0000c8>repeat</FONT> <FONT color=#0000c8>with</FONT> s = 
      firstSprite <FONT color=#0000c8>to</FONT> 
      lastSprite<BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
      color=#0000c8>if</FONT> s = <FONT color=#0000c8>me</FONT>.<FONT 
      color=#008000>spriteNum</FONT> <FONT color=#0000c8>then</FONT> <FONT 
      color=#008000>next</FONT> <FONT 
      color=#0000c8>repeat</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
      color=#0000c8>if</FONT> <FONT color=#008000>sprite</FONT> s <FONT 
      color=#008000>intersects</FONT> <FONT color=#0000c8>me</FONT>.<FONT 
      color=#008000>spriteNum</FONT> <FONT color=#0000c8>then</FONT> 
      <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
      face="Courier New, Courier, mono" color=#c80000 size=-1>-- loop through 
      keypoints</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
      color=#0000c8>repeat</FONT> <FONT color=#0000c8>with</FONT> i = <FONT 
      color=#808080>1</FONT> <FONT color=#0000c8>to</FONT> pPoints.<FONT 
      color=#008000>count</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
      face="Courier New, Courier, mono" color=#c80000 size=-1>-- get stage 
      location of a 
      keypoint</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myPoint 
      = <FONT color=#008000>sprite</FONT>(<FONT color=#0000c8>me</FONT>.<FONT 
      color=#008000>spriteNum</FONT>).<FONT 
      color=#008000>mapMemberToStage</FONT>(pPoints[i])<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
      face="Courier New, Courier, mono" color=#c80000 size=-1>-- figure out 
      which pixel this corresponds to in other 
      sprite</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;otherPoint 
      = <FONT color=#008000>sprite</FONT>(s).<FONT 
      color=#008000>mapStageToMember</FONT>(myPoint)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
      face="Courier New, Courier, mono" color=#c80000 size=-1>-- see if it 
      corresponds to any point at 
      all</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
      color=#0000c8>if</FONT> not <FONT color=#008000>voidP</FONT>(otherPoint) 
      <FONT 
      color=#0000c8>then</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
      face="Courier New, Courier, mono" color=#c80000 size=-1>-- get color of 
      pixel 
      there</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixelColor 
      = <FONT color=#008000>sprite</FONT>(s).<FONT 
      color=#008000>member</FONT>.image.getPixel(otherPoint)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
      face="Courier New, Courier, mono" color=#c80000 size=-1>-- if a non-white 
      pixel, then there has been a 
      collision</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
      color=#0000c8>if</FONT> pixelColor &lt;&gt; pWhite <FONT 
      color=#0000c8>then</FONT> <FONT color=#0000c8>return</FONT> 
      s<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
      color=#0000c8>end</FONT> <FONT 
      color=#0000c8>if</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
      color=#0000c8>end</FONT> <FONT 
      color=#0000c8>repeat</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
      color=#0000c8>end</FONT> <FONT 
      color=#0000c8>if</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;<FONT 
      color=#0000c8>end</FONT> <FONT 
      color=#0000c8>repeat</FONT><BR>&nbsp;&nbsp;<BR>&nbsp;&nbsp;<FONT 
      face="Courier New, Courier, mono" color=#c80000 size=-1>-- no 
      collisionw</FONT><BR>&nbsp;&nbsp;<FONT color=#0000c8>return</FONT> <FONT 
      color=#808080>0</FONT><BR>&nbsp;&nbsp;<BR><FONT 
      color=#0000c8>end</FONT><BR></FONT></P>
      <P>On every frame, the "on checkCollision" handler is called. In this 
      example, this information is only used to fill a text member. In a real 
      situation, you will want to use this information to prevent movement. 
      <P><FONT face="Verdana, Arial, Helvetica, sans-serif" color=#000000 
      size=-1><B><FONT color=#0000c8>on</FONT> <FONT 
      color=#008000>exitFrame</FONT> <FONT 
      color=#0000c8>me</FONT></B><BR>&nbsp;&nbsp;<FONT color=#0000c8>if</FONT> 
      checkCollision(<FONT color=#0000c8>me</FONT>) &gt; <FONT 
      color=#808080>0</FONT> <FONT 
      color=#0000c8>then</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
      color=#008000>member</FONT>(<FONT color=#808080>"status"</FONT>).<FONT 
      color=#008000>text</FONT> = <FONT 
      color=#808080>"Collide!"</FONT><BR>&nbsp;&nbsp;<FONT 
      color=#0000c8>else</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;<FONT 
      color=#008000>member</FONT>(<FONT color=#808080>"status"</FONT>).<FONT 
      color=#008000>text</FONT> = <FONT 
      color=#808080>"Nothing"</FONT><BR>&nbsp;&nbsp;<FONT 
      color=#0000c8>end</FONT> <FONT color=#0000c8>if</FONT><BR><FONT 
      color=#0000c8>end</FONT><BR></FONT></P>
      <P>In the example movie below, the sprite can be moved by dragging. This 
      is enabled by just setting the moveable property of the sprite to TRUE. 
      <P>
      <OBJECT 
      codeBase=http://active.macromedia.com/director/cabs/sw.cab#version=6,0,1,0 
      classid=clsid:166B1BCA-3F9C-11CF-8075-444553540000 width=200 height=150><PARAM NAME="SRC" VALUE="howTo/other/LL13.dcr"><PARAM NAME="swRemote" VALUE="swTarget='false'"><PARAM NAME="swLiveConnect" VALUE="FALSE">
      <embed src="howTo/other/Ll13.dcr"
      pluginspage="http://www.macromedia.com/shockwave/download/" 
      type="application/x-director" width="200" height="150" 
      swLiveConnect="FALSE"  swRemote="swTarget='false'"></embed> </OBJECT>
      <P>Download the Director 8 sample movie in <A 
      href="http://www.director-online.com/howTo/other/LL13.hqx">Mac</A> or <A 
      href="http://www.director-online.com/howTo/other/LL13.zip">PC</A> format. 
      <P>In a real-life situation, you will not want to use the mouse to move 
      such a character. Instead, use the keyboard. This will enable you to get 
      closer to objects. Using the mouse means that the character can quickly 
      jump from one area of the screen to another. So, it could conceivably jump 
      from one side to the other, and place it right in the middle of an object 
      or wall. If you are trying to prevent such collisions, then you would not 
      allow such movement, and the sprite would remain on the other. As to the 
      best collision detection... we still have no definite answers. This week's 
      solution can be very slow for larger sprites, and even slower if you have 
      to adjust it for different character positions and movement animation. 
      <P>It is important to realize that you will have to create different 
      collision detection solutions depending on what the desired result is. If 
      you only wish to prevent collisions into walls, then rectangle 
      intersections may be enough. However, if you wish to detect a sword thrust 
      through a character, then this week's method may be needed, or at least 
      the sprite intersects function. Keep all of these methods in mind and come 
      up with your own based on an understanding of them. 
      <P>Gary Rosenzweig's latest book is "Advanced Lingo for Games." In it, you 
      can find the source code for more than 20 complete games. More information 
      about the book can be found at <A target=_blank 
      href="http://clevermedia.com/resources/bookstore/book4.html">http://clevermedia.com/resources/bookstore/book4.html</A>. 
      It can be purchased there, or in your local bookstore. 
</P></TD></TR></TBODY></TABLE>
<P>
<TABLE width=500>
  <TBODY>
  <TR>
    <TD><FONT size=-1>Gary Rosenzweig is the Chief Engineer, founder, and 
      owner of CleverMedia, a game and multimedia development company in Denver, 
      Colorado. He has written four books on Macromedia Director and speaks 
      regularly at Macromedia and Game Developer conferences. CleverMedia's four 
      sites of games can be found at <A target=_blank 
      href="http://clevermedia.com/">http://clevermedia.com/</A>. 
      <P></FONT></P></TD></TR></TBODY></TABLE>
<P>
<TABLE height=25 cellSpacing=0 cellPadding=0 width=500 border=0>
  <TBODY>
  <TR vAlign=top align=left bgColor=#cecece>
    <TD><A 
      onmouseover="window.status='Get the direct URL for this article'; return true" 
      onclick="MM_openBrWindow('generateURL.cfm?id=855','utility','scrollbars=yes,resizable=no,width=400,height=250'); return false" 
      href="http://www.director-online.com/generateURL.cfm?id=855"><IMG 
      height=25 alt="Get the direct URL for this article" 
      src="buildArticle_files/articleURL.gif" width=87 border=0></A> </TD>
    <TD><A 
      onmouseover="window.status='Visit the Lingo Lounge article archive'; return true" 
      href="http://www.director-online.com/archive.cfm?pSection=Lingo%20Lounge"><IMG 
      height=25 alt="Visit the Lingo Lounge article archive" 
      src="buildArticle_files/archives.gif" width=66 border=0></A> </TD>
    <TD><A 
      onmouseover="window.status='Check out other articles by Gary Rosenzweig'; return true" 
      href="http://www.director-online.com/buildAuthorsArticles.cfm?author=50"><IMG 
      height=25 alt="Check out other articles by Gary Rosenzweig" 
      src="buildArticle_files/author.gif" width=56 border=0></A> </TD>
    <TD><A 
      onmouseover="window.status='Mail this article to a friend'; return true" 
      onclick="MM_openBrWindow('emailArticle.cfm?id=855','utility','scrollbars=yes,resizable=no,width=400,height=400'); return false" 
      href="http://www.director-online.com/emailArticle.cfm?id=855"><IMG 
      height=25 alt="Mail this article to a friend" 
      src="buildArticle_files/mailArticle.gif" width=83 border=0></A> </TD>
    <TD><A 
      onmouseover="window.status='Sign in to your myDOUG page'; return true" 
      onclick="MM_openBrWindow('myDOUG/login.cfm?type=toolbar','utility','scrollbars=yes,resizable=no,width=525,height=400'); return false" 
      href="http://www.director-online.com/myDOUG/login.cfm?type=toolbar"><IMG 
      height=25 alt="Sign in to your myDOUG page" 
      src="buildArticle_files/signIn.gif" width=63 border=0></A> </TD>
    <TD><A 
      onmouseover="window.status='Discuss this article on DOUGthreads'; return true" 
      href="http://209.112.84.34/Forums/index.cfm?cfapp=2&amp;Thread_ID=2501"><IMG 
      height=25 alt="Discuss this article on DOUGthreads" 
      src="buildArticle_files/discussArticle.gif" width=105 border=0></A> </TD>
    <TD><A 
      onmouseover="window.status='What do these buttons do?'; return true" 
      onclick="MM_openBrWindow('help.html','utility','scrollbars=yes,resizable=no,width=400,height=250'); return false" 
      href="http://www.director-online.com/help.html"><IMG height=25 
      alt="What do these buttons do?" src="buildArticle_files/help.gif" width=25 
      border=0></A> </TD></TR></TBODY></TABLE>
<P> </P></BODY></HTML>

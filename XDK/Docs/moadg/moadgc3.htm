<HTML><HEAD><TITLE>MOA Development Issues</TITLE></HEAD><body bgcolor="#FFFFFF"  link="#ff3300" alink="#ff3300" vlink="#333399"><A HREF="index.htm">MOA Developer's Guide</A><BR><A HREF="../moref/index.htm" >MOA Interfaces</A> | <A HREF="../moref/momthndx.htm" >MOA Methods</A>| <A HREF="../moref/motypndx.htm" >MOA Types and Misc API</A><HR width=45% align=left><H3><A NAME="RTFToC2"><FONT SIZE=4 face=arial,helvetica,sans-serif>Director 7 Xtra Development Kit: MOA Developer's Guide</FONT></A></H3><H2><FONT SIZE=5 face=arial,helvetica,sans-serif>MOA Development Issues</FONT></H2><HR width=45% align=left><DL><DT><h3><font face=arial,helvetica,sans-serif>Introduction</A></font></h3><P><DD>This chapter address some issues about developing MOA on specificplatforms and in specific development environments. It beginswith a discussion of some internal issues with regard to MOA development.It then discusses the various compilers and development environmentssupported, noting specific details about setting up a compilerto develop MOA code. The discussion concludes with a referencesection on the MOA for debugging macros. <DT><h3><font face=arial,helvetica,sans-serif><A NAME="RTFToC4">MOA internals</A> </font></h3><P><DD>This section addresses the programming languages available forMOA development and some internal issues with regard to methodcalls and memory footprints. <h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC5">Programming languages</A> </font></h4><P>Both MOA clients and Xtras are intended be written in C or C++.The MOA Services Library itself is written in ANSI C, so thatMOA can be implemented on platforms that don't support C++ compilers.<P>The MOA object system uses pointer-based allocation for internaldata structures, since much of the library code is core, and MOAdoesn't require a lot of memory in the first place. Note thatall memory allocators will be configurable to allow for alternatememory managers (e.g., SmartHeap). Note also that every MOA applicationwill provide Xtras with access to an implementation of the IMoaHandleinterface for allocating relocatable memory.<h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC6">Method calling overhead</A> </font></h4><P>The overhead for a MOA method call is identical to that of a C++virtual function call. The calling technique is call-by-pointer,with an extra level of indirection. The performance impact istypically negligible for all but the tightest of inner loops.To look at some code comparisons, a typical direct C functioncall such as:<P><TT>MyFunct();</TT><P>compiles into the 68K assembly language call:<P><TT>JSR 0x00000000 ; some address</TT><P>A comparable MOA method call in C such as:<P><TT>foo-&gt;lpVtbl-&gt;MyFunct(foo) /* C notation */</TT><P>or in C++:<P><TT>foo-&gt;MyFunct() /* C++ notation */</TT><P>compiles into the assembly language call (again, 68K):<P><TT>MOVE.L foo,-(A7) ; move first arg onto stack</TT><P><TT>MOVEA.L foo,A0 ; move foo into a register</TT><P><TT>MOVEA.L (A0),A0 ; get the vtable</TT><P><TT>MOVEA.L $000C(A0),A0 ; get the particular function to call</TT><P><TT>JSR (A0) ; call it</TT><P>The last instruction is the equivalent to a standard C functioncall. You can optimize a method call down to a single instructionin a loop by getting the function address first, then callingit directly within the loop. For example:<P><TT>void (*MyFunctProc)(void) = foo-&gt;lpVtbl-&gt;MyFunct;</TT><P><TT>while (tightloop) {</TT><P><TT>(*MyFunctProc)(foo);</TT><P><TT>}</TT><P>In contrast, the speed cost of actually instantiating an interfaceis a bit more significant than creating a C++ object (you don'treally want to do either one in speed-critical loops, naturally).<h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC7">Memory overhead</A> </font></h4><P>The memory overhead for MOA objects and interface instances is:<P>* Overhead per object instance: 20 bytes + instance variables<P>* Overhead per interface instance: 8 bytes <P>It is most efficient to keep an object in memory without any interfacesinstantiated other than IMoaUnknown. The IMoaUnknown interfaceis part of the base overhead of the object and can be used toinstantiate any other interfaces at appropriate times. To ensurethey are removed from memory, call Release() on interfaces youacquire through QueryInterface() when you are through using them.<P>Class and interface definitions also have some memory overhead.The figures for Mac MOA are (very) approximately:<P>* Overhead code per Xtra: ~1800 bytes<P>* Overhead per class definition: ~100 bytes<P>* Overhead per interface definition: ~400 bytes<DT><h3><font face=arial,helvetica,sans-serif><A NAME="RTFToC8">Development Environments</A> </font></h3><P><DD>On Windows, Visual C/C++ is fully supported by Macromedia, while on the Macintosh, Metrowerks CodeWarrior is fully supported. MOA can be compiled usingBorland C++ on Windows and MPW C/C++, SC/SCpp,Think C 7.x on the Macintosh; however, Macromedia doesn't provide technical support for these compilers.  MOA can't be compiled using PPCC on theMacintosh. Support for other environments may be added in the future.Developers should contact Macromedia about their specific needs if they requirethe use of other development environments.<P>In any environment, all structure-alignment must be carefullyspecified. MOA assumes &quot;native&quot; structure alignmentin all cases: PPC code will assume PPC alignment, etc. However, it is strongly recommendedthat <B>all structures should be long aligned in all cases, </B>withexplicit padding to force things to the proper boundary (i.e.,structure definitions should not rely on compiler behavior toinsert padding or correct alignment problems). This will makefor easier portability, less risk of mismatched structures, andbetter performance on most modern machines. <P>MPW C promotes all types to long-size before passing them as parameters,while Think and Metrowerks do not. Microsoft's COM calling conventionsrequire C calling conventions for interface methods, thus MOAAPI is exposed to this problem. For this reason, <B>the argumentsto all methods of all interfaces must be exactly 4 bytes in length</B>.Smaller parameters should be passed as longs; larger parametersshould be passed by pointer. <B>Exception:</B> 8-byte doubles(MoaDouble) may be passed by value. This rule applies to all interfacesdefined by MOA and MOA-compliant applications.<h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC8">Platform Notes</A> </font></h4><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC11">PPC Macintosh</A></font></h5><P>Set your compiler to generate a shared library, file type 'Xtra',owner 'Xown'. PEF version info doesn't matter; you'll need toexport the following symbols: &quot;DllGetClassObject&quot;, &quot;DllGetInterface&quot;,&quot;DllGetClassForm&quot;, &quot;DllCanUnloadNow&quot;, &quot;ppcSetFileRef&quot;(in Metrowerks, you can select &quot;use #pragma&quot; and thecorrect symbols will be exported). &quot;DllGetClassInfo&quot;.You don't need an Initialize, Terminate or main entry point. <B>Important</B>:set structure alignment to PowerPC. Define the followingpreprocessor symbols for all files (using either a prefix file,compiler prefs, or command-line options): <P><TT>#define MACINTOSH // compiling on Macintosh</TT><P>You'll need the header files moaxtra.h, moastdif.h, and moatypes.h.<h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC13">Windows 32-bit</A></font></h5><P>In Win95, Win32s, and WinNT, the only compilers currently supportedis MSVC2.x. Other compilers will be supported in the future.<P>Set your compiler to generate a large-model DLL. After producingthe file, rename it to have the extension .x32 (rather than .dll).Define the following preprocessor symbols for all files:<P><TT>#define WINDOWS // compiling on Windows</TT><P><TT>#define WIN32 // compiling 32-bit Windows</TT><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC14">Compiler Notes</A> </font></h4><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC16">MPW C</A> </font></h5><P>Support for MPW C/C++, which promotes all types to long-size beforepassing them as parameters, gives rise to the rule above requiringlong argument types to all methods.<P>The MPW preprocessor is unable to handle the debugging macrosdiscussed at the end of this chapter. MPW C also forces restrictionson A4 globals, which means some difficult programming for theuninitiated. <DT><h3><font face=arial,helvetica,sans-serif><A NAME="RTFToC18">Debugging</A></font></h3><DD><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC19">Debugging PPC Xtras</A> </font></h4><P>On Power PC Macintoshes, when VM is off, MOA uses the call GetMemFragment()to load Xtras. However, the Metrowerks debugger won't properlydebug code fragments loaded with this call. However, if you adda file in the Xtras folder named &quot;_XtraDebugMode_&quot;,the call GetDiskFragment() is always used to load PPC Xtras, regardlessof the VM state. This trick is intended for debugging purposesONLY; your Xtras should be tested without this workaround in placebefore shipping. <h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC20">Debugging Macros</A> </font></h4><P>Header file: moaxtra.h<P>The debugging macros defined in moaxtra.h may be useful for helpingyou develop Xtras. These macros can be added to and left in yourcode, since the behavior described here is only defined when youinclude the definition <TT>#define MOA_DEBUG</TT> in your Xtracode. Otherwise, they are defined as nil. As noted earlier, thesemacros can't be used with MPW C because of incompatibility withthe C preprocessor. <hr width=45% align=left><h5><font face=arial,helvetica,sans-serif>MOA_ASSERT()</font></h5><P><TT>MOA_ASSERT(<I><FONT SIZE=2 FACE="Courier New">cond</FONT></I>,<I><FONT SIZE=2 FACE="Courier New">msg</FONT></I>)</TT><P><TT><I><FONT SIZE=2 FACE="Courier New">cond</FONT></I></TT> Conditionto test <P><TT><I><FONT SIZE=2 FACE="Courier New">msg</FONT></I></TT> Char* for the message to display if test is true<P>Displays the text <TT><I><FONT SIZE=2 FACE="Courier New">msg</FONT></I></TT>only if the <TT><I><FONT SIZE=2 FACE="Courier New">cond</FONT></I></TT>is true. On the Macintosh, this macro invokes <TT>debugstr()</TT>;on Windows, it invokes <TT>MessageBox()</TT>.<hr width=45% align=left><h5><font face=arial,helvetica,sans-serif>MOA_CLOBBERMEM()</font></h5><P><TT>MOA_CLOBBERMEM(<I><FONT SIZE=2 FACE="Courier New">p</FONT></I>,<I><FONT SIZE=2 FACE="Courier New">sz</FONT></I>)</TT><P><TT><I><FONT SIZE=2 FACE="Courier New">p</FONT></I></TT> Pointerto start of memory to clobber <P><TT><I><FONT SIZE=2 FACE="Courier New">sz</FONT></I></TT> Sizeof memory to clobber<P>Clobbers memory by writing bogus address values to the range from<TT><I><FONT SIZE=2 FACE="Courier New">p</FONT></I></TT> to <TT><I><FONT SIZE=2 FACE="Courier New">p</FONT></I></TT>+<TT><I><FONT SIZE=2 FACE="Courier New"> sz</FONT></I></TT>. Thismacro can force a failure in calls that otherwise find address-likevalues to jump to in the specified memory. <hr width=45% align=left><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC23">MOA_CLOBBERTEST()</A></font></h5><P><TT>MOA_CLOBBERTEST(<I><FONT SIZE=2 FACE="Courier New">p</FONT></I>,<I><FONT SIZE=2 FACE="Courier New">msg</FONT></I>)</TT><P><TT><I><FONT SIZE=2 FACE="Courier New">p</FONT></I></TT> Pointerto memory to check <P><TT><I><FONT SIZE=2 FACE="Courier New">msg</FONT></I></TT> Char* for the message to display if memory is clobbered<P>Like <TT>MOA_ISCLOBBERED()</TT>, except displays the text <TT><I><FONT SIZE=2 FACE="Courier New">msg</FONT></I></TT>if the memory has been clobbered. On the Macintosh, this macroinvokes <TT>debugstr()</TT>; on Windows, it invokes <TT>MessageBox()</TT>.<hr width=45% align=left><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC24">MOA_DEBUGSTR()</A></font></h5><P><TT>MOA_DEBUGSTR(<I><FONT SIZE=2 FACE="Courier New">msg</FONT></I>)</TT><P><TT><I><FONT SIZE=2 FACE="Courier New">msg</FONT></I></TT> Stringto display in the debugger<P>Use this macro to display the string <TT><I><FONT SIZE=2 FACE="Courier New">x</FONT></I></TT>as your code executes. On the Macintosh, this macro invokes <TT>debugstr()</TT>;on Windows, it invokes <TT>MessageBox()</TT>. <hr width=45% align=left><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC25">MOA_ISCLOBBERED()</A></font></h5><P><TT>MOA_ISCLOBBERED(<I><FONT SIZE=2 FACE="Courier New">p</FONT></I>)</TT><P><TT><I><FONT SIZE=2 FACE="Courier New">p</FONT></I></TT> Pointerto memory to check<P>Returns: TRUE if clobbered, FALSE otherwise <P>Checks the memory at address <TT><I><FONT SIZE=2 FACE="Courier New">p</FONT></I></TT>to see if it has been clobbered.<P></DL><hr width=45% align=left><A HREF = "../copyrite.htm">Copyright &#169; 1995, 1996, 1997, 1998, 1999 Macromedia, Inc.</A></P></BODY><!--#include virtual="/uber/html/footer.html" --></html>
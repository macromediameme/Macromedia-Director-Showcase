<HTML><HEAD><TITLE>Multimedia Types and Miscellaneous API</TITLE><META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0z"></HEAD><body bgcolor="#FFFFFF"  link="#ff3300" alink="#ff3300" vlink="#333399"><P><A HREF="../mmdg/index.htm">MM Developer's Guide</A> | <A NAME="RTFToC3"></A><A HREF="../drdg/index.htm">Director Developer's Guide</A><BR><A HREF="index.htm">MM Interfaces</A> | <A HREF="mmmthndx.htm">MM Methods</A><hr width=45% align=left><H3><FONT SIZE=4 face=arial,helvetica,sans-serif>Director 7 Xtra Development Kit: Multimedia API Reference</FONT></H3><H2><FONT SIZE=5 face=arial,helvetica,sans-serif>Multimedia Types and Miscellaneous API</FONT></H2><HR width=45% align=left><P>This document contains the following sections:<UL><LI><A HREF = "#MMTYPES">Multimedia Types</A><LI><A HREF = "#MMMACROS">Multimedia Macros</A><LI><A HREF = "#MMCONSTS">Multimedia Constants</A><LI><A HREF = "#MMNIDS">Multimedia Notification IDs</A><LI><A HREF = "#MMREGKEYS">Multimedia Registry Keys</A><LI><A HREF = "#MMERRS">Multimedia Error Codes</A></UL><HR width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="MMTYPES">Multimedia Types</A></font></h3><h4><font face=arial,helvetica,sans-serif>Color types </font></h4><P>Defined in: mmtypes.h<h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmColorSpec">MoaMmColorSpec</A>,<BR>PMoaMmColorSpec </font></h5><PRE><TT>typedef struct{        union         {                 MoaMmRGBTriple rgb;                MoaByte index;        } color;        MoaByte type;} MoaMmColorSpec, FAR *PMoaMmColorSpec;</TT></PRE><P><TABLE BORDER="2"><TR><TD WIDTH=73><TT>color </TT></TD><TD WIDTH=431><TT>U</TT>nion representing the possible types of color values</TD></TR><TR><TD WIDTH=73><TT>rgb </TT></TD><TD WIDTH=431>RGB color value</TD></TR><TR><TD WIDTH=73><TT>index </TT></TD><TD WIDTH=431><TT>I</TT>ndexed color value</TD></TR><TR><TD WIDTH=73><TT>type </TT></TD><TD WIDTH=431>Type of color value specified</TD></TR></TABLE><P>This structure represents color specifications in a device-independentway. On devices that use true color representations, the RGB fieldof the color union represents the specified color. On devicesthat use color palettes or color lookup tables, the index fieldrepresents the specified color.<P>A <TT>MoaMmColorSpec</TT> canbe of two types: <TT>kMoaMmColorSpec_Index</TT>or <TT>kMoaMmColorSpec_RGB</TT>.Any code that receives a <TT>MoaMmColorSpec</TT>must be able to handle both types. The <TT>type</TT>field specifies the type, and which of the color union fieldscontains the color value. Valid values for this field are definedas MOA constants:<P><TABLE BORDER="2"><TR><TD WIDTH=160><TT>kMoaMmColorSpec_Index</TT> </TD><TD WIDTH=344>Color value in index field of color union</TD></TR><TR><TD WIDTH=160><TT>kMoaMmColorSpec_RGB</TT> </TD><TD WIDTH=344>Color value in rgb field of color union</TD></TR></TABLE><P>In general, the host application supplies you with a <TT>MoaMmColorSpec</TT>of type <TT>kMoaMmColorSpec_Index</TT>if the associated graphics context uses indexed colors(8 bit or less color pixels). A <TT>MoaMmColorSpec</TT>of type <TT>kMoaMmColorSpec_RGB</TT>is supplied for a direct color graphics context (greaterthan 8 bit color pixels).<P>If the <TT>MoaMmColorSpec </TT>is<TT>kMoaMmColorSpec_Index</TT>,the color index is supplied in the <TT>index</TT>field of the <TT>color</TT>union in the structure. If it's <TT>kMoaMmColorSpec_RGB,</TT>the RGB value, stored as a <TT>MoaMmRGBTriple</TT>,is supplied in the <TT>rgb</TT>field of the <TT>color</TT>union.<P>The <A HREF="#MacToMoaRGB" >MacToMoaRGB()</A>,<A HREF="#MoaToMacRGB" >MoaToMacRGB()</A>,<A HREF="#WinToMoaRGB" >WinToMoaRGB()</A>,<A HREF="#MoaToWinRGB" >MoaToWinRGB()</A><TT></TT>macros are provided for converting between nativeand <TT>MoaRGB </TT>types.<A HREF="#MoaEqualRGB" >MoaEqualRGB()</A><TT></TT>compares two <TT>MoaRGBTriples</TT>.The macros <A HREF="#ColorSpec_MakeFromIndex" >ColorSpec_MakeFromIndex()</A>,<A HREF="#ColorSpec_MakeFromMacRGB" >ColorSpec_MakeFromMacRGB()</A>,and <A HREF="#ColorSpec_MakeFromWinRGB" >ColorSpec_MakeFromWinRGB()</A>are supplied for creating new <TT>MoaMmColorSpecs</TT>from an index, Macintosh RGBColor, or Windows 32-bitRGB value.<BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmRGBTriple">MoaMmRGBTriple</A>,<BR>PMoaMmRGBTriple</font></h5><PRE>typedef struct{        MoaByte red;        MoaByte green;        MoaByte blue;} MoaMmRGBTriple, FAR *PMoaMmRGBTriple;</PRE><hr width=45% align=left><h4><font face=arial,helvetica,sans-serif>Cue Point Types</font></h4><P>Defined in: mmtypes.h <h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmCuePoint">MoaMmCuePoint</A>,<BR>PMoaMmCuePoint,<BR>ConstPMoaMmCuePoint</font></h5><P><PRE>typedef struct {	MoaUlong	nMilliseconds;	MoaChar		sName[kMoaMmCuePointMaxNameLen];} MoaMmCuePoint, FAR * PMoaMmCuePoint;</PRE><BR><P><h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmCuePoint">MoaMmCuePointPassedInfo</A>,<BR>MoaMmCuePointPassedInfo,<BR>PMoaMmCuePointPassedInfo, <BR>ConstPMoaMmCuePointPassedInfo</font></h5><P><PRE>typedef struct {	MoaMmValue	vChannel;	MoaLong		nIndex;	MoaMmCuePoint cuePoint;} MoaMmCuePointPassedInfo, FAR * PMoaMmCuePointPassedInfo;</PRE><BR>Use the <A HREF="#CPMACROS">cue point macros</A> to access the data in these structures. <hr width=45% align=left><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC5">Event types</A> </font></h4><P>Defined in: mmtypes.h<h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmEventInfo">MoaMmEventInfo</A>,<BR>PMoaMmEventInfo,<BR>ConstPMoaMmEventInfo </font></h5><PRE><TT>typedef struct{        </TT>Mo<TT>aMmEventType type;        MoaLong target;        MoaPoint where;        MoaLong when;        union         {                 MoaMmKeyInfo keyInfo;                struct                 {                         MoaLong data1;                        MoaLong data2;                        MoaLong data3;                        MoaLong data4;                } aux;        } data;} MoaMmEventInfo;</TT></PRE><P>Structure passed to the <A HREF="mmxsprta.htm#Event">IMoaMmXSpriteActor::Event()</A>method to describe the event being sent. <BR><P><TABLE BORDER="2"><TR><TD WIDTH=73><TT>type</TT> </TD><TD WIDTH=431>Type of the event</TD></TR><TR><TD WIDTH=73><TT>target</TT> </TD><TD WIDTH=431>Reserved</TD></TR><TR><TD WIDTH=73><TT>where</TT> </TD><TD WIDTH=431>Mouse location. <TT>where </TT>is filled out for mouse, keyboard, idle, and step events.</TD></TR><TR><TD WIDTH=73><TT>when</TT> </TD><TD WIDTH=431>Timestamp (milliseconds). <TT>when </TT>is filled out for mouse and keyboard events</TD></TR><TR><TD WIDTH=73><TT>data</TT> </TD><TD WIDTH=431>Substructure event-specific data</TD></TR><TR><TD WIDTH=73><TT>keyInfo</TT> </TD><TD WIDTH=431><TT>MoaMmKeyInfo</TT> structure containing information relevant to key events</TD></TR><TR><TD WIDTH=73><TT>aux</TT> </TD><TD WIDTH=431>Substructure for additional event-specific data</TD></TR><TR><TD WIDTH=73><TT>data1</TT> </TD><TD WIDTH=431>Event-specific data</TD></TR><TR><TD WIDTH=73><TT>data2</TT> </TD><TD WIDTH=431>Event-specific data</TD></TR><TR><TD WIDTH=73><TT>data3</TT> </TD><TD WIDTH=431>Event-specific data</TD></TR><TR><TD WIDTH=73><TT>data4</TT> </TD><TD WIDTH=431>Event-specific data</TD></TR></TABLE><P>Structure representing information relevant to mouse and key events,passed as a parameter to the <A HREF="mmxsprta.htm#Event">IMoaMmXSpriteActor::Event()</A>method. Your implementation of this method should evaluate datain this structure and determine the corresponding behavior.<P><TABLE BORDER="2"><TR><TD WIDTH=150><TT>MoaMmEventInfo</TT> </TD><TD WIDTH=354>Structure representing event information</TD></TR><TR><TD WIDTH=150><TT>PMoaMmEventInfo</TT> </TD><TD WIDTH=354>Pointer to <TT>MoaMmEventInfo</TT> information structure</TD></TR><TR><TD WIDTH=150><TT>ConstPMoaMmEventInfo</TT> </TD><TD WIDTH=354>Constant pointer to <TT>MoaMmEventInfo</TT> structure</TD></TR></TABLE><P>The <TT>where </TT>and <TT>when</TT>fields are not valid for all events. Here's a listof events for which the fields are valid in Director:<UL><LI><TT>mouseDown</TT><LI><TT>mouseUp</TT><LI><TT>mouseUpOutside</TT><LI><TT>mouseDblClick</TT><LI><TT>rightMouseDown</TT><LI><TT>rightMouseUp</TT><LI><TT>rightMouseUpOutside</TT><LI><TT>rightmouseDblClick</TT><LI><TT>keyDown</TT><LI><TT>keyUp</TT><LI><TT>Idle</TT><LI><TT>Step</TT></UL><P>See the following sections for descriptions of these events.<h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmEventType">MoaMmEventType</A></font></h5><P><TT>MoaLong</TT> used in thestructure <TT>MoaMmEventInfo</TT>to represent the type of an event. The valid values for this typeare defined as MOA constants: mouse event, key event, playbackevent, and environment event.<H6><A NAME="RTFToC8">Mouse event constants</A></H6><P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=277><B>Name</B></TD><TD WIDTH=227><B>Description</B></TD></TR><TR><TD WIDTH=277><TT>kMoaMmEvent_Idle</TT></TD><TD WIDTH=227>Idle (null) event</TD></TR><TR><TD WIDTH=277><TT>kMoaMmEvent_MouseDown</TT></TD><TD WIDTH=227>Mouse button down</TD></TR><TR><TD WIDTH=277><TT>kMoaMmEvent_MouseDblClick</TT></TD><TD WIDTH=227>Mouse double click</TD></TR><TR><TD WIDTH=277><TT>kMoaMmEvent_MouseUp</TT></TD><TD WIDTH=227>Mouse up within clicked-on actor</TD></TR><TR><TD WIDTH=277><TT>kMoaMmEvent_MouseUpOutside</TT></TD><TD WIDTH=227>Mouse up outside clicked-on actor</TD></TR><TR><TD WIDTH=277><TT>kMoaMmEvent_RightMouseDown</TT></TD><TD WIDTH=227>Right mouse button down</TD></TR><TR><TD WIDTH=277><TT>kMoaMmEvent_RightMouseDblClick</TT></TD><TD WIDTH=227>Right mouse button double click</TD></TR><TR><TD WIDTH=277><TT>kMoaMmEvent_RightMouseUp</TT></TD><TD WIDTH=227>Right up within clicked-on actor</TD></TR><TR><TD WIDTH=277><TT>kMoaMmEvent_RightMouseUpOutside</TT></TD><TD WIDTH=227>Right up outside clicked-on actor</TD></TR><TR><TD WIDTH=277><CODE>kMoaMmEvent_MouseEnter</CODE></TD><TD WIDTH=227>Rollover support</TD></TR><TR><TD WIDTH=277><CODE>kMoaMmEvent_MouseExit</CODE></TD><TD WIDTH=227>Rollover support</TD></TR><TR><TD WIDTH=277><CODE>kMoaMmEvent_MouseWithin</CODE></TD><TD WIDTH=227>Rollover support</TD></TR></TABLE><P>A full double-click sequence for Sprite Xtras should be<UL><LI><TT>kMoaMmEvent_MouseDown</TT><LI><TT>kMoaMmEvent_MouseUp</TT><LI><TT>kMoaMmEvent_MouseDblClick</TT><LI><TT>kMoaMmEvent_MouseUp</TT></UL><P>Instead of getting a <TT>kMoaMmEvent_MouseDown</TT>for the second click, you'll get a <TT>kMoaMmEvent_MouseDblClick</TT>.<TT>kMoaMmEvent_RightMouseDblClick</TT>is used for the right mouse button. Odd numbered clicksin a sequence come in as regular <TT>kMoaMmEvent_MouseDown</TT>(in accordance with Microsoft Windows conventions).For example, a third click is a <TT>kMoaMmEvent_MouseDown</TT>,not a <TT>kMoaMmEvent_MouseDblClick</TT>.If you just want to make sure you get every mouse down event (anddon't care about distinguishing double-clicks), you must testfor both <TT>kMoaMmEvent_MouseDown</TT>and <TT>kMoaMmEvent_MouseDblClick</TT>.<P><B>Lingo users:</B> Lingo does not yet recognize the double-clickevents, therefore these events get propogated as normal <TT>&quot;mouseDown&quot;</TT>or <TT>&quot;mouseUp&quot;</TT>messages to Lingo handlers.<P>In Director on the Macintosh, a Control-click simulates a rightmouse click sequence if the Lingo global property, <TT>theemulateMultiButtonMouse </TT>is set <TT>TRUE</TT>.The default is <TT>FALSE</TT>.Other applications may have their own conventions for mappingright mouse events on the Macintosh.<H6><A NAME="RTFToC9">Key event constants</A></H6><P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=247><I><B>Name</B></I></TD><TD WIDTH=252><B>Description</B></TD></TR><TR><TD WIDTH=247><TT>kMoaMmEvent_KeyDown</TT></TD><TD WIDTH=252>Key down</TD></TR><TR><TD WIDTH=247><TT>kMoaMmEvent_KeyUp</TT></TD><TD WIDTH=252>Key up</TD></TR><TR><TD WIDTH=247><TT>kMoaMmEvent_KeyFocusEnter</TT></TD><TD WIDTH=252>Actor has just received keyboard focus</TD></TR><TR><TD WIDTH=247><TT>kMoaMmEvent_KeyFocusExit</TT></TD><TD WIDTH=252>Actor has just lost keyboard focus</TD></TR></TABLE><H6><A NAME="RTFToC10">Playback event constants</A></H6><P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=247><B>Name</B></TD><TD WIDTH=255><B>Description</B></TD></TR><TR><TD WIDTH=247><TT>kMoaMmEvent_Step</TT></TD><TD WIDTH=255>Playback head has moved to next frame</TD></TR><TR><TD WIDTH=247><TT>kMoaMmEvent_SpanBegin</TT></TD><TD WIDTH=255>A sprite span for actor has started</TD></TR><TR><TD WIDTH=247><TT>kMoaMmEvent_SpanEnd</TT></TD><TD WIDTH=255>A sprite span for actor has ended</TD></TR><TR><TD WIDTH=247><TT>kMoaMmEvent_PlayBegin</TT></TD><TD WIDTH=255>Movie started playing (authoring only)</TD></TR><TR><TD WIDTH=247><TT>kMoaMmEvent_PlayEnd</TT></TD><TD WIDTH=255>Movie stopped playing (authoring only)</TD></TR></TABLE><P><B>Note</B>: In Director, <TT>PlayBegin</TT>and <TT>playEnd </TT>aretied to playing and stopping movies when authoring. Because theyare actor event, you get these only when you are on-stage whilethe movie starts or stops playing; they are not generated in projectors.Use the <TT>playerStateInfo </TT>fieldto check if the movie is playing when the actor is not on-stage.<BR><H6><A NAME="RTFToC11">Environment event constants</A></H6><P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=248><B>Name</B></TD><TD WIDTH=256><B>Description</B></TD></TR><TR><TD WIDTH=248><TT>kMoaMmEvent_StageWindowOpen</TT></TD><TD WIDTH=256>Stage window opened</TD></TR><TR><TD WIDTH=248><TT>kMoaMmEvent_StageWindowClose</TT></TD><TD WIDTH=256>Stage window hidden or destroyed</TD></TR><TR><TD WIDTH=248><TT>kMoaMmEvent_StageWindowDepth</TT></TD><TD WIDTH=256>Stage window/buffer changed bit depth</TD></TR><TR><TD WIDTH=248><TT>kMoaMmEvent_SoundState </TT></TD><TD WIDTH=256>Global sound on/off state changed</TD></TR><TR><TD WIDTH=248><TT>kMoaMmEvent_AssetModified</TT></TD><TD WIDTH=256>Asset associated with actor was modified</TD></TR></TABLE><h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmKeyInfo">MoaMmKeyInfo</A>,<BR>PMoaMmKeyInfo </font></h5><PRE><TT>typedef struct{</TT>        <TT>MoaLong character;</TT>        <TT>MoaLong modifiers;</TT>        <TT>MoaLong nativeKeyCode;</TT>        <TT>MoaLong nativeModifiers;} MoaMmKeyInfo, FAR * PMoaMmKeyInfo;</TT></PRE><P><TABLE BORDER="2"><TR><TD WIDTH=119><TT>character </TT></TD><TD WIDTH=385></TD></TR><TR><TD WIDTH=119><TT>modifiers </TT></TD><TD WIDTH=385>Modifier keys pressed (Cmd, Ctrl, etc.)</TD></TR><TR><TD WIDTH=119><TT>nativeKeyCode </TT></TD><TD WIDTH=385><TT>P</TT>latform-specific native key code</TD></TR><TR><TD WIDTH=119><TT>nativeModifiers </TT></TD><TD WIDTH=385><TT>P</TT>latform-specific modifier key information</TD></TR></TABLE><P>Note that while the mouse button is down, the modifier keys aren'tupdated as subsequent events are passed to the <A HREF="mmxsprta.htm#Event">IMoaMmXSpriteActor::Event()</A>method.<P><TABLE BORDER="2"><TR><TD WIDTH=145><TT>MoaMmKeyInfo</TT> </TD><TD WIDTH=359>Structure containing information relevant to keydown events</TD></TR><TR><TD WIDTH=145><TT>PMoaMmKeyInfo</TT> </TD><TD WIDTH=359>Pointer to <TT>MoaMmKeyInfo</TT> information structure</TD></TR></TABLE><H6><A NAME="RTFToC13">MoaMmKeyInfo masks</A></H6><P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=194><B>Name</B></TD><TD WIDTH=310><B>Description</B></TD></TR><TR><TD WIDTH=194><TT>kMoaMmModifier_None</TT></TD><TD WIDTH=310>No modifier keys pressed</TD></TR><TR><TD WIDTH=194><TT>kMoaMmModifier_Shift</TT></TD><TD WIDTH=310>Shift key pressed</TD></TR><TR><TD WIDTH=194><TT>kMoaMmModifier_Command</TT></TD><TD WIDTH=310>Command (Macintosh) or Control (Windows) pressed</TD></TR><TR><TD WIDTH=194><TT>kMoaMmModifier_Option</TT></TD><TD WIDTH=310>Option (Macintosh) or Alt (Windows) pressed</TD></TR><TR><TD WIDTH=194><TT>kMoaMmModifier_Alt</TT></TD><TD WIDTH=310>Option (Macintosh) or Alt (Windows) pressed</TD></TR><TR><TD WIDTH=194><TT>kMoaMmModifier_Control</TT></TD><TD WIDTH=310>Control key pressed</TD></TR></TABLE><hr width=45% align=left><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC14">Graphics context types</A> </font></h4><P>Defined in: mmtypes.h <h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmGCType">MoaMmGCType</A></font></h5><P>Type representing the platform-dependent graphics context providedfor drawing by the host platform. Valid values for this type aredefined as MOA constants:<P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=192><B>Name</B></TD><TD WIDTH=312><B>Description</B></TD></TR><TR><TD WIDTH=192><TT>kMoaMmGCType_Null</TT></TD><TD WIDTH=312>No graphics context or graphics context unknown</TD></TR><TR><TD WIDTH=192><TT>kMoaMmGCType_WinWindow</TT></TD><TD WIDTH=312>Microsoft Windows window graphics context</TD></TR><TR><TD WIDTH=192><TT>kMoaMmGCType_WinDIBDC</TT></TD><TD WIDTH=312>Microsoft Windows device-independent bitmap context</TD></TR><TR><TD WIDTH=192><TT>kMoaMmGCType_WinDDBDC</TT></TD><TD WIDTH=312>Microsoft Windows device-dependent bitmap context</TD></TR><TR><TD WIDTH=192><TT>kMoaMmGCType_MacWindow</TT></TD><TD WIDTH=312>Macintosh window graphics context</TD></TR><TR><TD WIDTH=192><TT>kMoaMmGCType_MacGWorld</TT></TD><TD WIDTH=312>Macintosh graphics world graphics context</TD></TR><TR><TD WIDTH=192><TT>kMoaMmGCType_Aux</TT></TD><TD WIDTH=312>(reserved)</TD></TR></TABLE><h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmWinDIBDCFlags">MoaMmWinDIBDCFlags</A></font></h5><P><TT>MoaLong</TT> representingMicrosoft Windows device context flags in the win_dibdc variantof <TT>MoaMmNativeGCInfo</TT>structure. These flags are set as the bitwise OR (<TT>|</TT>)of MOA constants that specify certain states. Currently, thereis one flag used to indicate when WinG is available. Valid valuesare defined as MOA constants:<P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=241><B>Name</B></TD><TD WIDTH=193><B>Description</B></TD></TR><TR><TD WIDTH=241><TT>kMoaMmWinDIBDCFlags_None</TT></TD><TD WIDTH=193>No device context flags set</TD></TR><TR><TD WIDTH=241><TT>kMoaMmWinDIBDCFlags_WinG</TT></TD>    <TD WIDTH=193>(No longer supported)</TD>  </TR></TABLE><h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmNativeGCInfo">MoaMmNativeGCInfo</A></font></h5><PRE><TT>typedef struct{        MoaMmGCType type;        union         {                 struct                 {                         MoaMmWinHdl32 Hdc                        MoaMmWinHdl32 hWND;                } win_window;                struct                 {                         MoaMmWinHdl32 hDC;                        PMoaVoid lpBitMapInfo;                        PMoaVoid lpBits;                        MoaMmWinDIBDCFlags flags;                } win_dibdc;                struct                 {                         MoaMmWinHdl32 hDC;                        PMoaVoid hBITMAP;                } win_ddbdc;                struct                 {                         PMoaMmMacWindow windowPtr;                        PMoaVoid qdGlobalsPtr;                } mac_window;                struct                 {                         PMoaMmMacGWorld gworldPtr;                        PMoaVoid qdGlobalsPtr;                } mac_gworld;                struct                 {                         PMoaVoid data1;                        PMoaVoid data2;                        PMoaVoid data3;                        PMoaVoid data4;                } aux;        } data;} MoaMmNativeGCInfo;</TT></PRE><P><TABLE BORDER = "2"><TR><TD WIDTH=170><TT>MoaMmNativeGCInfo</TT> </TD><TD WIDTH=334>Structure containing graphic context information</TD></TR><TR><TD WIDTH=170><TT>PMoaMmNativeGCInfo</TT> </TD><TD WIDTH=334>Pointer to <TT>MoaMmNativeGCInfo</TT> information structure</TD></TR><TR><TD WIDTH=170><TT>ConstPMoaMmNativeGCInfo</TT> </TD><TD WIDTH=334>Constant pointer to <TT>MoaMmNativeGCInfo</TT> structure</TD></TR></TABLE><P>Platform-specific graphics context information structure. Thisstructure consists of two parts: a field specifying a particulargraphics context of the host platform and a union of structures,each relevant to a specific graphics context. The members of thisunion are:<H6><A NAME="RTFToC18">win_window</A></H6><P><TABLE BORDER="2"><TR><TD WIDTH=47><TT>hDC </TT></TD><TD WIDTH=457>Win16: only low 16-bits used<TT> </TT></TD></TR><TR><TD WIDTH=47><TT>hWND </TT></TD><TD WIDTH=457>Win16: only low 16-bits used</TD></TR></TABLE><P>This member structure defines the graphics context for a MicrosoftWindows window.<H6><A NAME="RTFToC19">win_dibdc</A></H6><P><TABLE BORDER="2"><TR><TD WIDTH=98><TT>hDC </TT></TD><TD WIDTH=406>Win16: only low 16-bits used<TT> </TT></TD></TR><TR><TD WIDTH=98><TT>lpBitMapInfo</TT></TD><TD WIDTH=406></TD></TR><TR><TD WIDTH=98><TT>lpBits</TT></TD><TD WIDTH=406></TD></TR><TR><TD WIDTH=98><TT>flags</TT></TD><TD WIDTH=406></TD></TR></TABLE><P>This member structure defines the graphics context for a MicrosoftWindows device-independent bitmap.<H6><A NAME="RTFToC20">win_ddbdc</A></H6><P><TABLE BORDER="2"><TR><TD WIDTH=63><TT>hDC </TT></TD><TD WIDTH=441>Win16: only low 16-bits used<TT> </TT></TD></TR><TR><TD WIDTH=63><TT>hBitmap </TT></TD><TD WIDTH=441></TD></TR></TABLE><P>This member structure defines the graphics context for a MicrosoftWindows device-dependent bitmap.<H6><A NAME="RTFToC21">mac_window</A></H6><P><TABLE BORDER="2"><TR><TD WIDTH=252><TT>windowPtr </TT></TD><TD WIDTH=252></TD></TR><TR><TD WIDTH=252><TT>qdGlobalsPtr </TT></TD><TD WIDTH=252></TD></TR></TABLE><P>This member structure defines the graphics context for a Macintoshwindow.<H6><A NAME="RTFToC22">mac_gworld</A></H6><P><TABLE BORDER="2"><TR><TD WIDTH=252><TT>gworldPtr </TT></TD><TD WIDTH=252></TD></TR><TR><TD WIDTH=252><TT>qdGlobalsPtr </TT></TD><TD WIDTH=252></TD></TR></TABLE><P>This member structure defines the graphics context for a Macintoshgraphics world.<H6><A NAME="RTFToC23">aux</A></H6><P><TABLE BORDER="2"><TR><TD WIDTH=47><TT>data1 </TT></TD><TD WIDTH=457></TD></TR><TR><TD WIDTH=47><TT>data2 </TT></TD><TD WIDTH=457></TD></TR><TR><TD WIDTH=47><TT>data3 </TT></TD><TD WIDTH=457></TD></TR><TR><TD WIDTH=47><TT>data4 </TT></TD><TD WIDTH=457></TD></TR></TABLE><P>This member defines a general structure that can be redefinedfor various graphics contexts.<H6><A NAME="RTFToC24">Handles</A></H6><P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=134><B>Name</B></TD><TD WIDTH=370><B>Description</B></TD></TR><TR><TD WIDTH=134><TT>MoaMmWinHdl32</TT></TD><TD WIDTH=370>32-bit value used to hold both 16- and 32-bit Windows handles</TD></TR><TR><TD WIDTH=134><TT>MoaMmWinHandle</TT></TD><TD WIDTH=370>Matches Windows HANDLE. Win16: 16-bit unsigned integer; Win32: 32-bit void *</TD></TR><TR><TD WIDTH=134><TT>MoaMmHInst</TT></TD><TD WIDTH=370>A MoaMmWinHandle (16- or 32-bits depending on the Windows version)</TD></TR><TR><TD WIDTH=134><TT>MoaMmHWnd</TT></TD><TD WIDTH=370>A MoaMmWinHandle (16- or 32-bits depending on the Windows version)</TD></TR><TR><TD WIDTH=134><TT>PMoaMmMacWindow</TT></TD><TD WIDTH=370>A Macintosh WindowPtr</TD></TR><TR><TD WIDTH=134><TT>PMoaMmMacGWorld</TT></TD><TD WIDTH=370>A Macintosh GWorldPtr</TD></TR></TABLE><hr width=45% align=left><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC25">Macintosh window types</A> </font></h4><h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmRegWindowFlags">MoaMmRegWindowFlags</A>,<BR>PMoaMmRegWindowFlags,<BR>ConstPMoaMmRegWindowFlags </font></h5><P><TT>MoaLong</TT> value usedin registering a Macintosh window with the <A HREF="mmwndmac.htm#MacRegisterWindow">IMoaMmWndMac::MacRegisterWindow()</A>method. To form a value for this type, create the bitwise OR (|)or the various values representing the Window's capabilities.These values are defined as MOA constants:<P><TT>kMoaMmRegWindowFlags_None</TT><P><TT>kMoaMmRegWindowFlags_AuthorIdle</TT><P>When the <TT>AuthorIdle</TT>flag is set, the window receives null events in all cases. Whennot set, the window receives null events only when it is active.<P><TT>kMoaMmMacEvent_CloseWindow</TT><P>Special event passed to your <A HREF="mmmcevnt.htm">IMoaMmMacEventHandler</A>when the host application wants you to close your window. <BR><BR><hr width=45% align=left><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC27">Media asset types</A> </font></h4><h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmModifyFlags">MoaMmModifyFlags</A>,<BR>PMoaMmModifyFlags,<BR>ConstPMoaMmModifyFlags </font></h5><P><TT>MoaLong</TT> representingthe modification state of a media asset. To form a value for thistype, create the bitwise OR (|) or the various values representingthe modification state. Valid values for this type are definedas MOA constants:<P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=229><B>Name</B></TD><TD WIDTH=189><B>Description</B></TD></TR><TR><TD WIDTH=229><TT>kMoaMmModifyFlags_None</TT></TD><TD WIDTH=189>Nothing was modified</TD></TR><TR><TD WIDTH=229><TT>kMoaMmModifyFlags_Media</TT></TD><TD WIDTH=189>Media data was modified</TD></TR><TR><TD WIDTH=229><TT>kMoaMmModifyFlags_Props</TT></TD><TD WIDTH=189>Property data was modified</TD></TR></TABLE><P><TABLE BORDER="2"><TR><TD WIDTH=165><TT>MoaMmModifyFlags</TT> </TD><TD WIDTH=339>Long value containing modification flags</TD></TR><TR><TD WIDTH=165><TT>PMoaMmModifyFlags</TT> </TD><TD WIDTH=339>Pointer to <TT>MoaMmModifyFlags</TT> modification flags</TD></TR><TR><TD WIDTH=165><TT>ConstPMoaMmModifyFlags</TT> </TD><TD WIDTH=339>Constant pointer to <TT>MoaMmModifyFlags</TT> modification flags</TD></TR></TABLE><P>These flags are passed from an asset to the host in the <A HREF="mmxasset.htm">IMoaMmXAsset</A>methods <A HREF="mmxasset.htm#InvokeMediaEditor">InvokeMediaEditor()</A>and <A HREF="mmxasset.htm#FinishPropsEditor">FinishPropsEditor()</A>.<hr width=45% align=left><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC35">Property types</A> </font></h4><P>Defined in: mmtypes.h<h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmSymbol">MoaMmSymbol</A>,<BR>PMoaMmSymbol,<BR>ConstPMoaMmSymbol </font></h5><P><TT>MoaLong</TT> type representingunique run-time IDs used for properties, asset types, etc. The<TT>MoaMmSymbol</TT> for anitem is guaranteed unique only for the current session, so thesevalues should never be stored on disk or otherwise transferredoutside the running application. To acquire a unique symbol fora particular string value, use the <TT>StringToSymbol()</TT>method of the <A HREF="mmvalue.htm">IMoaMmValue</A> callback interface.To acquire the string for a particular symbol, use the<TT>SymbolToString()</TT>method of the <A HREF="mmvalue.htm">IMoaMmValue</A> interface.Symbol strings are case-insensitive.<P><TABLE BORDER = "2"><TR><TD WIDTH=252><TT>MoaMmSymbol</TT> </TD><TD WIDTH=252>Type</TD></TR><TR><TD WIDTH=252><TT>PMoaMmSymbol</TT> </TD><TD WIDTH=252>Pointer type</TD></TR><TR><TD WIDTH=252><TT>ConstPMoaMmSymbol</TT> </TD><TD WIDTH=252>Constant pointer type</TD></TR></TABLE><h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmValue">MoaMmValue</A>,<BR>PMoaMmValue,<BR>ConstPMoaMmValue </font></h5><P>Do not access fields of <TT>MoaMmValue</TT>directly. Use the value conversion methods in <A HREF="mmvalue.htm">IMoaMmValue</A>.<BR><P><TABLE BORDER = "2"><TR><TD WIDTH=252><TT>MoaMmValue </TT></TD><TD WIDTH=252>Structure type</TD></TR><TR><TD WIDTH=252><TT>PMoaMmValue</TT> </TD><TD WIDTH=252>Pointer type</TD></TR><TR><TD WIDTH=252><TT>ConstPMoaMmValue</TT> </TD><TD WIDTH=252>Constant pointer type</TD></TR></TABLE><P><h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmValueType">MoaMmValueType</A></font></h5><P><TT>MoaLong </TT>representingthe type of a <TT>MoaMmValue</TT>.<hr width=45% align=left><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC39">Scripting Xtra types</A></font></h4><P>Call information structure passed to <A HREF="mmxscrpt.htm#Call">IMoaMmXScript::Call()</A>.<BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmCallInfo">MoaMmCallInfo</A>,<BR>PMoaMmCallInfo </font></h5><PRE>struct MoaMmCallInfo{      PMoaVoid xinst;      MoaLong methodFlags;      MoaMmSymbol methodSelector;      MoaMmValue resultValue;      MoaLong nargs;      PMoaMmValue pArgs};</PRE><P><TABLE BORDER="2"><TR><TD WIDTH=99><TT>xinst</TT></TD><TD WIDTH=405>MoaHandle to XtraInstRec</TD></TR><TR><TD WIDTH=99><TT>methodFlags</TT></TD><TD WIDTH=405>Reserved</TD></TR><TR><TD WIDTH=99><TT>methodSelector</TT></TD><TD WIDTH=405>Method index or symbol</TD></TR><TR><TD WIDTH=99><TT>resultValue</TT></TD><TD WIDTH=405>Slot for result</TD></TR><TR><TD WIDTH=99><TT>nargs</TT></TD><TD WIDTH=405>Number of arguments passed</TD></TR><TR><TD WIDTH=99><TT>pArgs</TT></TD><TD WIDTH=405>Pointer to array of arguments</TD></TR></TABLE><hr width=45% align=left><h4><font face=arial,helvetica,sans-serif>Sprite Xtra types </font></h4><P>Defined in: mmtypes.h <h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmXSpriteCaps">MoaMmXSpriteCaps</A></font></h5><PRE><TT>typedef struct{</TT>       <TT>MoaMmEventMask eventMask;        MoaMmXSpriteCapsFlags flags;        MoaMmXSpriteImageMode requiredImageMode;        MoaMmXSpriteImageMode preferredImageMode;} MoaMmXSpriteCaps, FAR * PMoaMmXSpriteCaps;</TT></PRE><P><TABLE BORDER="2"><TR><TD WIDTH=139><TT>eventMask </TT></TD><TD WIDTH=365>Mask representing event types handled by the sprite</TD></TR><TR><TD WIDTH=139><TT>flags </TT></TD><TD WIDTH=365>Flag representing other capabilities of the sprite</TD></TR><TR><TD WIDTH=139><TT>requiredImageMode </TT></TD><TD WIDTH=365>Required image mode (if any)</TD></TR><TR><TD WIDTH=139><TT>preferredImageMode </TT></TD><TD WIDTH=365>Preferred image mode (if any)</TD></TR></TABLE><P>Structure representing the capabilities of a particular SpriteXtra.<P><TABLE BORDER = "2"><TR><TD WIDTH=252><TT>MoaMmXSpriteCaps </TT></TD><TD WIDTH=252>Structure of information about Sprite Xtra capabilities</TD></TR><TR><TD WIDTH=252><TT>PMoaMmXSpriteCaps </TT></TD><TD WIDTH=252>Pointer to <TT>MoaMmXSpriteCaps</TT> structure</TD></TR></TABLE><H6><A NAME="RTFToC41">Sprite event mask constants</A></H6><P>Use these in the <TT>eventMask</TT><TT>MoaMmXSpriteCaps</TT> fieldfor sprite actors. To receive events from multiple event classes,combine your masks with the OR operator, for example, <TT>kMoaMmEventMask_Mouse| kMoaMmEventMask_Key</TT><P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=261><B>Name</B></TD><TD WIDTH=243><B>Description</B></TD></TR><TR><TD WIDTH=261><TT>kMoaMmEventMask_Every</TT></TD><TD WIDTH=243>Receive all events</TD></TR><TR><TD WIDTH=261><TT>kMoaMmEventMask_None</TT></TD><TD WIDTH=243>Receive no events</TD></TR><TR><TD WIDTH=261><TT>kMoaMmEventMask_Idle</TT></TD><TD WIDTH=243>Receive idles (play-time only)</TD></TR><TR><TD WIDTH=261><TT>kMoaMmEventMask_Mouse</TT></TD><TD WIDTH=243>Receive all mouse events</TD></TR><TR><TD WIDTH=261><TT>kMoaMmEventMask_Key</TT></TD><TD WIDTH=243>Receive all key and focus events</TD></TR><TR><TD WIDTH=261><TT>kMoaMmEventMask_Play</TT></TD><TD WIDTH=243>Receive all play events</TD></TR><TR><TD WIDTH=261><TT>kMoaMmEventMask_Span</TT></TD><TD WIDTH=243>Receive span events</TD></TR><TR><TD WIDTH=261><TT>kMoaMmEventMask_Step</TT></TD><TD WIDTH=243>Receive step events</TD></TR><TR><TD WIDTH=261><TT>kMoaMmEventMask_Environment</TT></TD><TD WIDTH=243>Receive all environment change events</TD></TR></TABLE><h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmXSpriteCapsFlags">MoaMmXSpriteCapsFlags</A></font></h5><P><TT>MoaLong</TT> type usedin the <TT>MoaMmXSpriteCaps</TT>structure to represent the capabilities of a particular SpriteXtra. The valid values for this type are defined as MOA constants:<P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=333><B>Name</B></TD><TD WIDTH=171><B>Description</B></TD></TR><TR><TD WIDTH=333><TT>kMoaMmXSpriteCapsFlags_None</TT></TD><TD WIDTH=171>No capabilities defined</TD></TR><TR><TD WIDTH=333><TT>kMoaMmXSpriteCapsFlags_IsStatic</TT></TD><TD WIDTH=171>Sprite seldom changes</TD></TR><TR><TD WIDTH=333><TT>kMoaMmXSpriteCapsFlags_AutoTabEnabled </TT></TD><TD WIDTH=171>Application handles Tab key</TD></TR></TABLE><h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmXSpriteImageMode">MoaMmXSpriteImageMode</A></font></h5><P><TT>MoaLong</TT> type representingthe imaging mode of a particular Sprite Xtra. The valid valuesfor this type are defined as MOA constants:<P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=340><B>Name</B></TD><TD WIDTH=164><B>Description</B></TD></TR><TR><TD WIDTH=340><TT>kMoaMmXSpriteImageMode_Any</TT></TD><TD WIDTH=164>Sprite draws in any mode</TD></TR><TR><TD WIDTH=340><TT>kMoaMmXSpriteImageMode_Offscreen</TT></TD><TD WIDTH=164>Sprite draws offscreen</TD></TR><TR><TD WIDTH=340><TT>kMoaMmXSpriteImageMode_DirectToScreen</TT></TD><TD WIDTH=164>Sprite draws to screen</TD></TR></TABLE><h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmXSpriteInfo">MoaMmXSpriteInfo</A>,<BR>PMoaMmXSpriteInfo,<BR>ConstPMoaMmXSpriteInfo<BR></font></h5><PRE><TT>typedef struct{        MoaRect spriteRect;</TT>        <TT>MoaMmXSpriteImageMode imageMode;</TT>        <TT>MoaMmXSpriteFlags flags;</TT>        <TT>MoaMmInk ink;</TT>        <TT>MoaMmInkParamsinkParams;</TT>        <TT>MoaLong aux;} MoaMmXSpriteInfo;</TT></PRE><P><TABLE BORDER="2"><TR><TD WIDTH=165><TT>spriteRect</TT> </TD><TD WIDTH=339>Rectangle on stage where sprite appears</TD></TR><TR><TD WIDTH=165><TT>imageMode</TT> </TD><TD WIDTH=339>Imaged direct or to an offscreen buffer</TD></TR><TR><TD WIDTH=165><TT>flags</TT> </TD><TD WIDTH=339>Sprite FX flags</TD></TR><TR><TD WIDTH=165><TT>ink</TT> </TD><TD WIDTH=339>Sprite ink mode</TD></TR><TR><TD WIDTH=165><TT>inkParams</TT> </TD><TD WIDTH=339>Extra parameters for some inks</TD></TR><TR><TD WIDTH=165><TT>aux</TT> </TD><TD WIDTH=339>Reserved</TD></TR></TABLE><P><TABLE BORDER=2><TR><TD WIDTH=165><TT>MoaMmXSpriteInfo</TT> </TD><TD WIDTH=339>Structure representing various information about a sprite Xtra</TD></TR><TR><TD WIDTH=165><TT>PMoaMmXSpriteInfo</TT> </TD><TD WIDTH=339>Pointer to <TT>MoaMmXSpriteInfo</TT> information structure</TD></TR><TR><TD WIDTH=165><TT>ConstPMoaMmXSpriteInfo</TT> </TD><TD WIDTH=339>Constant pointer to <TT>MoaMmXSpriteInfo</TT> structure</TD></TR></TABLE><h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmXSpriteFlags">MoaMmXSpriteFlags</A></font></h5><P><TT>MoaLong</TT> included asa field in the <TT>MoaMmXSpriteInfo</TT>structure to represent the capabilities of a specific Sprite Xtra.To form a value for this type, create the bitwise OR (|) or thevarious values representing capabilities of the Xtra. These valuesare defined as MOA constants:<P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=246><B>Name</B></TD><TD WIDTH=170><B>Description</B></TD></TR><TR><TD WIDTH=246><TT>kMoaMmXSpriteFlags_None</TT></TD><TD WIDTH=170>No unique capabilities</TD></TR><TR><TD WIDTH=246><TT>kMoaMmXSpriteFlags_Moveable</TT></TD><TD WIDTH=170>Sprite is movable</TD></TR><TR><TD WIDTH=246><TT>kMoaMmXSpriteFlags_Editable</TT></TD><TD WIDTH=170>Sprite is editable</TD></TR><TR><TD WIDTH=246><TT>kMoaMmXSpriteFlags_Blend</TT></TD><TD WIDTH=170></TD></TR></TABLE><hr width=45% align=left><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC46">Sprite Xtra Actor types</A> </font></h4><P>Supplied as parameters to Xtra Actor methods<h5><font face=arial,helvetica,sans-serif><A NAME="PMoaMmInk">PMoaMmInk</A></font></h5><P>MoaLong representing the image transfer types or ink modes availablefor raster imaging operations. Valid values for this type aredefined as MOA constants.<PRE><TT>kMoaMmInk_CopykMoaMmInk_TransparentkMoaMmInk_ReversekMoaMmInk_GhostkMoaMmInk_NotCopykMoaMmInk_NotTransparentkMoaMmInk_NotReversekMoaMmInk_NotGhostkMoaMmInk_MattekMoaMmInk_MaskkMoaMmInk_AddPinkMoaMmInk_AddkMoaMmInk_SubtractPinkMoaMmInk_BackgroundTransparentkMoaMmInk_LightestkMoaMmInk_SubtractkMoaMmInk_Darkest</TT></PRE><P>These ink types correspond to standard transfer modes definedby both Macintosh and Windows graphics systems<h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmInkParams">MoaMmInkParams</A>,<BR>PMoaMmInkParams,<BR>ConstPMoaMmInkParams </font></h5><PRE><TT>typedef struct{</TT>        <TT>MoaMmColorSpec fgColor;</TT>        <TT>MoaMmColorSpec bgColor;        MoaLong blendValue;</TT>        <TT>MoaBool obeyBlend;} MoaMmInkParams;</TT></PRE><P><TABLE BORDER="2"><TR><TD WIDTH=88><TT>fgColor</TT> </TD><TD WIDTH=416>Ink foreground color</TD></TR><TR><TD WIDTH=88><TT>bgColor</TT> </TD><TD WIDTH=416>Ink background color</TD></TR><TR><TD WIDTH=88><TT>blendValue</TT> </TD><TD WIDTH=416>Sprite blend value (v5.0: 0-255)</TD></TR><TR><TD WIDTH=88><TT>obeyBlend</TT> </TD><TD WIDTH=416>If TRUE, use <TT>blendValue</TT></TD></TR></TABLE><P>Structure representing the ink parameters of a sprite. If <TT>obeyBlend</TT>is <TT>TRUE</TT>, the <TT>blendValue</TT>field should be obeyed.<P><TABLE BORDER = "2"><TR><TD WIDTH=252><TT>MoaMmInkParams</TT> </TD><TD WIDTH=252>Structure representing the ink parameters of a sprite</TD></TR><TR><TD WIDTH=252><TT>PMoaMmInkParams</TT> </TD><TD WIDTH=252>Pointer to <TT>MoaMmInkParams</TT> information structure</TD></TR><TR><TD WIDTH=252><TT>ConstPMoaMmInkParams</TT> </TD><TD WIDTH=252>Constant pointer to <TT>MoaMmInkParams</TT> structure</TD></TR></TABLE><h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmPlayState">MoaMmPlayState</A></font></h5><P><TT>MoaLong</TT> included asa field in the <TT>MoaMmPlayerStateInfo</TT>structure to represent the playback state of a specific player.Valid values for this type are defined as MOA constants:<P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=235><B>Name</B></TD><TD WIDTH=228><B>Description</B></TD></TR><TR><TD WIDTH=235><TT>kMoaMmPlayState_Stopped</TT></TD><TD WIDTH=228>Movie has stopped (authoring only)</TD></TR><TR><TD WIDTH=235><TT>kMoaMmPlayState_Playing</TT></TD><TD WIDTH=228>Movie is playing</TD></TR></TABLE><P>Note that in a player application, a presentation is always playing.<h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmSoundState">MoaMmSoundState</A></font></h5><P><TT>MoaLong</TT> type includedas a field in the <TT>MoaMmPlayerStateInfo</TT>structure to represent the playback state of a specific player.Valid values for this type are defined as MOA constants:<P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=230><B>Name</B></TD><TD WIDTH=142><B>Description</B></TD></TR><TR><TD WIDTH=230><TT>kMoaMmSoundState_Disabled</TT></TD><TD WIDTH=142>Sound is disabled</TD></TR><TR><TD WIDTH=230><TT>kMoaMmSoundState_Enabled</TT></TD><TD WIDTH=142>Sound is enabled</TD></TR></TABLE><h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmPlayerStateInfo">MoaMmPlayerStateInfo</A>,<BR>PMoaMmPlayerStateInfo,<BR>ConstPMoaMmPlayerStateInfo </font></h5><PRE><TT>typedef struct{</TT>        <TT>MoaMmPlayState playState;</TT>        <TT>MoaMmSoundStatesoundState;} MoaMmPlayerStateInfo;</TT></PRE><P><TABLE BORDER="2"><TR><TD WIDTH=192><TT>playState</TT> </TD><TD WIDTH=312>Playing or stopped</TD></TR><TR><TD WIDTH=192><TT>soundState</TT> </TD><TD WIDTH=312>Sound should be on/off</TD></TR><TR><TD WIDTH=192><TT>MoaMmPlayerStateInfo</TT> </TD><TD WIDTH=312>Structure containing player state information</TD></TR><TR><TD WIDTH=192><TT>PMoaMmPlayerStateInfo </TT></TD><TD WIDTH=312>Pointer to <TT>MoaMmPlayerStateInfo</TT> information <BR>structure</TD></TR><TR><TD WIDTH=192><TT>ConstPMoaMmPlayerStateInfo </TT></TD><TD WIDTH=312>Constant pointer to <TT>MoaMmPlayerStateInfo <BR></TT>structure</TD></TR></TABLE><hr width=45% align=left><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC49">Transition types</A> </font></h4><P>Defined in: mmtypes.h<h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmTransCaps">MoaMmTransCaps</A>, <BR>PMoaMmTransCaps </font></h5><P>Type representing the capabilities of a transition provided byan Xtra. If <TT>_DoesScreenAccess</TT>is set, the application copies any windows in front of the transitionarea back into the offscreen buffer before doing the transition.Provides special handling for Macintosh Powerbooks with mirroreddisplays. Valid values include the following:<P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=285><B>Name</B></TD><TD WIDTH=219><B>Description</B></TD></TR><TR><TD WIDTH=285><TT>kMoaMmTransCaps_None</TT></TD><TD WIDTH=219>Has no special capabilities</TD></TR><TR><TD WIDTH=285><TT>kMoaMmTransCaps_ChangeArea</TT></TD><TD WIDTH=219>Supports change area option</TD></TR><TR><TD WIDTH=285><TT>kMoaMmTransCaps_ChunkSize</TT></TD><TD WIDTH=219>Supports chunk size control</TD></TR><TR><TD WIDTH=285><TT>kMoaMmTransCaps_Duration</TT></TD><TD WIDTH=219>Supports duration control</TD></TR><TR><TD WIDTH=285><TT>kMoaMmTransCaps_CantPaletteInterleave </TT></TD><TD WIDTH=219>Can't interleave with palette change </TD></TR><TR><TD WIDTH=285><TT>kMoaMmTransCaps_DoesScreenAccess</TT></TD><TD WIDTH=219>Draws directly to screen </TD></TR></TABLE><h5><font face=arial,helvetica,sans-serif><A NAME="MoaMmTransInfo">MoaMmTransInfo</A>,<BR>PMoaMmTransInfo,<BR>ConstPMoaMmTransInfo </font></h5><PRE><TT>typedef struct{        MoaLong chunkSize;        MoaLong duration;        MoaLong realTime;        MoaLong elapsedTime;        MoaLong aux;} MoaMmTransInfo</TT></PRE><P><TABLE BORDER="2"><TR><TD WIDTH=88><TT>chunkSize</TT> </TD><TD WIDTH=416>Chunkiness</TD></TR><TR><TD WIDTH=88><TT>duration</TT> </TD><TD WIDTH=416>Duration (milliseconds)</TD></TR><TR><TD WIDTH=88><TT>realTime</TT> </TD><TD WIDTH=416>Non-zero if running in real time, 0 if frame-by-frame export</TD></TR><TR><TD WIDTH=88><TT>elapsedTime</TT> </TD><TD WIDTH=416>Elapsed time (milliseconds)</TD></TR><TR><TD WIDTH=88><TT>aux</TT> </TD><TD WIDTH=416>Reserved</TD></TR></TABLE><P>Structure providing transition cueing information, passed as aparameter to a transition actor's <TT>Cue</TT>method.<P><TABLE BORDER = "2"><TR><TD WIDTH=252><TT>MoaMmTransInfo </TT></TD><TD WIDTH=252>Structure representing transition cueing information</TD></TR><TR><TD WIDTH=252><TT>PMoaMmTransInfo </TT></TD><TD WIDTH=252>Pointer to <TT>MoaMmTransInfo</TT> structure</TD></TR><TR><TD WIDTH=252><TT>ConstPMoaMmTransInfo</TT> </TD><TD WIDTH=252>Constant pointer to <TT>MoaMmTransInfo</TT> structure</TD></TR></TABLE><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="MMMACROS">Multimedia Macros</A></font></h3><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC53">Color access and conversion</A> </font></h4><P>Defined in: mmtpes.h<h5><font face=arial,helvetica,sans-serif><A NAME="MoaToMacRGB">MoaToMacRGB</A>()</font></h5><P><TT>MoaToMacRGB</TT>(<TT>PMoaMmRGBTriple</TT><TT>pMoaColor</TT>, <TT>RGBColorFAR *</TT> <TT>pMacColor</TT>)<P><TABLE BORDER="2"><TR><TD WIDTH=83><TT>pMoaColor</TT><I> </I></TD><TD WIDTH=421>Pointer to a <TT>MoaMmRGBTriple </TT>containing a color</TD></TR><TR><TD WIDTH=83><TT>pMacColor</TT><I> </I></TD><TD WIDTH=421>Pointer to an <TT>RGBColor </TT>to receive the Macintosh-specific RGB result</TD></TR></TABLE><P>Converts the value located in <TT>pMoaColor</TT>into a Macintosh-specific <TT>RGBColor</TT>and places the result in the location specified by <TT>pMacColor</TT>.<h5><font face=arial,helvetica,sans-serif><A NAME="MacToMoaRGB">MacToMoaRGB</A>()</font></h5><PRE WIDTH=132><TT>MacToMoaRGB</TT>(<TT>RGBColor FAR * pMacColor</TT>,        <TT>PMoaMmRGBTriple pMoaColor</TT>)</PRE><P><TABLE BORDER="2"><TR><TD WIDTH=83><TT>pMacColor</TT><I> </I></TD><TD WIDTH=421>Pointer to an <TT>RGBColor</TT></TD></TR><TR><TD WIDTH=83><TT>pMoaColor</TT><I> </I></TD><TD WIDTH=421>Pointer to a to receive <TT>MoaMmRGBTriple </TT>the MOA-specific result</TD></TR></TABLE><P>Converts the value located in <TT>pMacColor</TT>into a MOA-specific <TT>PMoaMmRGBTriple</TT>and places the result in the location specified by<TT>pMoaColor</TT>.<h5><font face=arial,helvetica,sans-serif><A NAME="MoaToWinRGB">MoaToWinRGB</A>()</font></h5><P><TT>MoaToWinRGB(PMoaMmRGBTriple pMoaColor,</TT><TT>COLORREF winColor)</TT><P>Converts the value located in <TT>pMoaColor</TT>into a Windows-specific <TT>COLORREF</TT>and places the result in the location specified by<TT>pWinColor</TT>.<h5><font face=arial,helvetica,sans-serif><A NAME="WinToMoaRGB">WinToMoaRGB</A>()</font></h5><P><TT>WinToMoaRGB(COLORREF winColor,PMoaMmRGBTriple pMoaColor)</TT><P>Converts the value located in <TT>pWinColor</TT>into a MOA-specific <TT>PMoaMmRGBTriple</TT>and places the result in the location specified by<TT>pMoaColor</TT>.<h5><font face=arial,helvetica,sans-serif><A NAME="ColorSpec_MakeFromIndex">MoaEqualRGB()</A></font></h5><P><TT>MoaBool MoaEqualRGB(PMoaMmRGBTriplepMoaColorOne, PMoaMmRGBTriple pMoaColorOne)</TT><P>Compares two colors.<h5><font face=arial,helvetica,sans-serif>ColorSpec_MakeFromIndex()</font></h5><P><TT>ColorSpec_MakeFromIndex(PMoaMmColorSpecpSpec, MoaByte theIndex)</TT><P><TABLE BORDER="2"><TR><TD WIDTH=68><TT>pSpec</TT> </TD><TD WIDTH=436>Pointer to a <TT>PMoaMmColorSpec </TT>containing the new color specification</TD></TR><TR><TD WIDTH=68><TT>theIndex</TT> </TD><TD WIDTH=436>Indexed color value</TD></TR></TABLE><P>Creates a new color specification from the index.<h5><font face=arial,helvetica,sans-serif><A NAME="ColorSpec_MakeFromMacRGB">ColorSpec_MakeFromMacRGB</A>()</font></h5><PRE><TT>ColorSpec_MakeFromMacRGB(PMoaMmColorSpec pSpec,</TT>        <TT>MoaMmRGBTriple FAR* pMacRGBColor)</TT></PRE><P><TABLE BORDER="2"><TR><TD WIDTH=99><TT>pSpec</TT> </TD><TD WIDTH=405>Pointer to a <TT>PMoaMmColorSpec </TT>containing the new color specification</TD></TR><TR><TD WIDTH=99><TT>pMacRGBColor</TT> </TD><TD WIDTH=405>The Macintosh RGB color</TD></TR></TABLE><P>Makes a new RGB color specification from a Macintosh RGB value.<h5><font face=arial,helvetica,sans-serif><A NAME="ColorSpec_MakeFromWinRGB">ColorSpec_MakeFromWinRGB</A>()</font></h5><P><TT>ColorSpec_MakeFromWinRGB(pSpec,winColorRef)</TT><P><TABLE BORDER="2"><TR><TD WIDTH=88><TT>pSpec</TT> </TD><TD WIDTH=416>Pointer to a <TT>PMoaMmColorSpec </TT>containing the new color specification</TD></TR><TR><TD WIDTH=88><TT>winColorRef</TT> </TD><TD WIDTH=416>The Windows, 32-bit RGB value</TD></TR></TABLE><P>Makes a new RGB color specification from a Windows COLORREF<BR><hr width=45% align=left><h4><font face=arial,helvetica,sans-serif>Scripting Xtra Macros</font></h4><P>Defined in: mmixscrp.h<h5><font face=arial,helvetica,sans-serif><A NAME="AccessArgByIndex">AccessArgByIndex</A></font></h5><P><CODE>AccessArgByIndex(<I>n</I>,<I>pValue</I>)</CODE><P>Access an argument to a scripting language function by numericalindex and return in <CODE><I>pValue</I></CODE>.<BR><hr width=45% align=left><h4><font face=arial,helvetica,sans-serif><A NAME="CPMACROS">Cue Point Macros</A></font></h4><P>Defined in: mmtypes.h<BR><h5><font face=arial,helvetica,sans-serif><A NAME="CuePoint_GetChannel">CuePoint_GetChannel</A></font></h5><P><CODE>CuePoint_GetChannel(<I>pCuePoint</I>)</CODE><P>Returns the channel of a cue point structure.<BR><h5><font face=arial,helvetica,sans-serif><A NAME="CuePoint_GetIndex">CuePoint_GetIndex</A></font></h5><P><CODE>CuePoint_GetIndex(<I>pCuePoint</I>)</CODE><P>Returns index of a cue point structure. <BR><h5><font face=arial,helvetica,sans-serif><A NAME="CuePoint_GetName">CuePoint_GetName</A></font></h5><P><CODE>CuePoint_GetName(<I>pCuePoint</I>)</CODE><P>Returns name of cue point structure. <BR><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="MMCONSTS">Multimedia Constants</A></font></h3><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC62">General constants</A> </font></h4><P>Defined in: mmtypes.h<P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=237><B>Constant</B></TD><TD WIDTH=36><B>Val</B></TD><TD WIDTH=231><B>Description</B></TD></TR><TR><TD WIDTH=237><TT>kMoaMmMaxXtraName</TT></TD><TD WIDTH=36>32</TD><TD WIDTH=231>Max byte lgth of Xtra name symbol string</TD></TR><TR><TD WIDTH=237><TT>kMoaMmMaxPropName</TT></TD><TD WIDTH=36>32</TD><TD WIDTH=231>Max byte lgth of property name symbol string</TD></TR><TR><TD WIDTH=237><TT>kMoaMmMaxXtraDisplayName</TT></TD><TD WIDTH=36>64</TD><TD WIDTH=231>Max byte length of Xtra display name </TD></TR><TR><TD WIDTH=237><TT>kMoaMmMaxXtraDisplayCategory</TT></TD><TD WIDTH=36>64</TD><TD WIDTH=231>Max byte length of Xtra display category</TD></TR></TABLE><P><hr width=45% align=left><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC63">Graphics context constants</A> </font></h4><P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=192><B>Constant</B></TD><TD WIDTH=312><B>Description</B></TD></TR><TR><TD WIDTH=192><TT>kMoaMmGCType_Null</TT></TD><TD WIDTH=312>No graphics context or graphics context unknown</TD></TR><TR><TD WIDTH=192><TT>kMoaMmGCType_WinWindow</TT></TD><TD WIDTH=312>Microsoft Windows window graphics context</TD></TR><TR><TD WIDTH=192><TT>kMoaMmGCType_WinDIBDC</TT></TD><TD WIDTH=312>Microsoft Windows device-independent bitmap context</TD></TR><TR><TD WIDTH=192><TT>kMoaMmGCType_WinDDBDC</TT></TD><TD WIDTH=312>Microsoft Windows device-dependent bitmap context</TD></TR><TR><TD WIDTH=192><TT>kMoaMmGCType_MacWindow</TT></TD><TD WIDTH=312>Macintosh window graphics context</TD></TR><TR><TD WIDTH=192><TT>kMoaMmGCType_MacGWorld</TT></TD><TD WIDTH=312>Macintosh graphics world graphics context</TD></TR><TR><TD WIDTH=192><TT>kMoaMmGCType_Aux</TT></TD><TD WIDTH=312>(reserved)</TD></TR></TABLE><h5><font face=arial,helvetica,sans-serif>WIN_DIBDC variant of graphics context constants</font></h5><P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=192><B>Constant</B></TD><TD WIDTH=312><B>Description</B></TD></TR><TR>    <TD WIDTH=192><TT>kMoaMmWinDIBDCFlags_None</TT> </TD>    <TD WIDTH=312></TD></TR><TR>    <TD WIDTH=192><TT>kMoaMmWinDIBDCFlags_WinG</TT> </TD>    <TD WIDTH=312></TD></TR></TABLE><P><hr width=45% align=left><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC64">Transition constants</A> </font></h4><P>Defined in: mmtypes.h<P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=237><B>Constant</B></TD><TD WIDTH=267><B>Description</B></TD></TR><TR><TD WIDTH=237><TT>kMoaMmTransArea_FullStage</TT></TD><TD WIDTH=267>Transition applies to whole stage</TD></TR><TR><TD WIDTH=237><TT>kMoaMmTransArea_ChangeArea</TT></TD><TD WIDTH=267>Transition applies to change area only</TD></TR></TABLE><P>These constants represent valid values for a transition Xtras'<TT>defaultTransArea</TT> registryentry. If the transition Xtras <TT>kMoaMmTransCaps_ChangeArea</TT>is set, this entry determines the default state of the transitionarea control. If <TT>kMoaMmTransCaps_ChangeArea</TT>is not set, the default is automatically forced to <TT>kMoaMmTransArea_FullStage</TT>.<P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=237><B>Constant</B></TD><TD WIDTH=267><B>Description</B></TD></TR><TR><TD WIDTH=237><TT>kMoaMmTrans_IsNotComplete</TT></TD><TD WIDTH=267>FALSE. Returned if the transition isn't complete</TD></TR><TR><TD WIDTH=237><TT>kMoaMmTrans_IsComplete</TT></TD><TD WIDTH=267>TRUE. Returned when the transition is complete</TD></TR></TABLE><P>Use these constants as return values to the <TT>pFinished</TT> parameter of the <A HREF="mmxtrnst.htm#Continue">IMoaMmXTransitionActor::Continue()</A><TT></TT>method.<P><hr width=45% align=left><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC65">Media asset category constants</A> </font></h4><P>Defined in: mmtypes.h<P>Although an asset Xtra can register any string as its <TT>displayCategoryString</TT>(<TT>kMoaMmDictKey_DisplayCategoryString</TT>),using one of these predefined categories is recommended. Usingthe predefined categories helps the user locate asset Xtras, bygrouping similar types together. The predefined categories arealso recognized by the application, and the correct translationis automatically substituted in internationalized versions.<P>An Xtra should register the most-specific category applicable.Some applications, however, may combine some of the categoriesinto one group. For example, Director 5 combines Media Element,Sound, Video and ThreeD in the same submenu.<P><A NAME="_Toc350759264">Sprite category constants</A><P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=261><B>Category</B></TD><TD WIDTH=97><B>Value</B></TD><TD WIDTH=146><B>Description</B></TD></TR><TR><TD WIDTH=261><TT>kMoaMmSpriteCategory_Unknown</TT></TD><TD WIDTH=97><TT>&quot;&quot;</TT></TD><TD WIDTH=146>Default category</TD></TR><TR><TD WIDTH=261><TT>kMoaMmSpriteCategory_Media</TT></TD><TD WIDTH=97><TT>&quot;Media&quot;</TT></TD><TD WIDTH=146>Static media: e.g., bitmaps, static text</TD></TR><TR><TD WIDTH=261><TT>kMoaMmSpriteCategory_Control</TT></TD><TD WIDTH=97><TT>&quot;Control&quot;</TT></TD><TD WIDTH=146>UI controls, e.g., buttons, check boxes.</TD></TR><TR><TD WIDTH=261><TT>kMoaMmSpriteCategory_Behavior</TT></TD><TD WIDTH=97><TT>&quot;Behavior&quot;</TT></TD><TD WIDTH=146>behaviors, interactions, scripts: e.g., &quot;gravity&quot;</TD></TR><TR><TD WIDTH=261><TT>kMoaMmSpriteCategory_Database</TT></TD><TD WIDTH=97><TT>&quot;Database&quot;</TT></TD><TD WIDTH=146>Database management or connectivity</TD></TR><TR><TD WIDTH=261><TT>kMoaMmSpriteCategory_Sound</TT></TD><TD WIDTH=97><TT>&quot;Sound&quot;</TT></TD><TD WIDTH=146>Any audio</TD></TR><TR><TD WIDTH=261><TT>kMoaMmSpriteCategory_Video</TT></TD><TD WIDTH=97><TT>&quot;Video&quot;</TT></TD><TD WIDTH=146>Any video or animation</TD></TR><TR><TD WIDTH=261><TT>kMoaMmSpriteCategory_ThreeD</TT></TD><TD WIDTH=97><TT>&quot;ThreeD&quot;</TT></TD><TD WIDTH=146>Modeling, virtual worlds, etc.</TD></TR><TR><TD WIDTH=261><TT>kMoaMmSpriteCategory_Network</TT></TD><TD WIDTH=97><TT>&quot;Network&quot;</TT></TD><TD WIDTH=146>Communications and connectivity</TD></TR></TABLE><P>Asset caps constants<P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=210><B>Name</B></TD><TD WIDTH=294><B>Description</B></TD></TR><TR><TD WIDTH=210><TT>kMoaMmAssetCaps_CanLinkMedia</TT></TD><TD WIDTH=294>When this flag is set and you allow an author to create an asset through the import dialog (i.e., importing a Flash movie creates a Flash asset in your cast), they have the option of importing the file as linked, just like with sounds and bitmaps.</TD></TR><TR><TD WIDTH=210><TT>kMoaMmAssetCaps_MustLinkMedia</TT></TD><TD WIDTH=294>This means it is <I>always</I> imported as linked, regardless of what the user asks for. QT3 uses this flag, since you can not have an internal QT3 member embedded in the Director file.</TD></TR><TR><TD WIDTH=210><TT>kMoaMmAssetCaps_CanStream</TT></TD><TD WIDTH=294>If this flag is not set when a linked Xtra is playing an URL, it first downloads the entire file, then tells your asset to load from the local file, as well as creates any actors for the stage, etc. However, if this flag is set, Director loads your member right away, assuming that you can handle loading yourself from the URL. The Flash asset uses this setting.</TD></TR></TABLE><P><hr width=45% align=left><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC66">Sprite event mask constants</A> </font></h4><P>Defined in: mmtypes.h<P>Use these in the eventMask <TT>MoaMmXSpriteCaps</TT>field for sprite actors. To receive events from multiple eventclasses, combine your masks together using the OR operator (|),for example, <TT>kMoaMmEventMask_Mouse| kMoaMmEventMask_Key</TT><P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=261><B>Name</B></TD><TD WIDTH=243><B>Description</B></TD></TR><TR><TD WIDTH=261><TT>kMoaMmEventMask_Every</TT></TD><TD WIDTH=243>Receive all events</TD></TR><TR><TD WIDTH=261><TT>kMoaMmEventMask_None</TT></TD><TD WIDTH=243>Receive no events</TD></TR><TR><TD WIDTH=261><TT>kMoaMmEventMask_Idle</TT></TD><TD WIDTH=243>Receive idles (play-time only)</TD></TR><TR><TD WIDTH=261><TT>kMoaMmEventMask_Mouse</TT></TD><TD WIDTH=243>Receive all mouse events</TD></TR><TR><TD WIDTH=261><TT>kMoaMmEventMask_Key</TT></TD><TD WIDTH=243>Receive all key and focus events</TD></TR><TR><TD WIDTH=261><TT>kMoaMmEventMask_Step</TT></TD><TD WIDTH=243>Receive frame update events</TD></TR><TR><TD WIDTH=261><TT>kMoaMmEventMask_Span</TT></TD><TD WIDTH=243>Receive sprite span events</TD></TR><TR><TD WIDTH=261><TT>kMoaMmEventMask_Play</TT></TD><TD WIDTH=243>Receive play events (authoring only)</TD></TR><TR><TD WIDTH=261><TT>kMoaMmEventMask_Environment</TT></TD><TD WIDTH=243>Receive all environment change events</TD></TR></TABLE><P><hr width=45% align=left><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC67">Event constants</A> </font></h4><P>Defined in: mmtypes.h<P>Mac event handler constant<P><TT>kMoaMmMacEvent_CloseWindow</TT><A HREF="mmmcevnt.htm">IMoaMacEventHandler</A> constant to closewindow<P>Sprite actor event handling<P>Use these constants as return values to the <TT>pHandled</TT><I></I>parameter of the <A HREF="mmxsprta.htm#Event">IMoaMmXSpriteActor::Event()</A><TT></TT>method.<P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=223><B>Name</B></TD><TD WIDTH=102><B>Description</B></TD></TR><TR><TD WIDTH=223><TT>kMoaMmSprEvent_Handled </TT></TD><TD WIDTH=102>TRUE</TD></TR><TR><TD WIDTH=223><TT>kMoaMmSprEvent_Pass</TT></TD><TD WIDTH=102>FALSE</TD></TR></TABLE><P><hr width=45% align=left><h4><font face=arial,helvetica,sans-serif>Tool Xtra constants </font></h4><P>Defined in: mmtypes.h<P>Used to indicate the state and category of <A HREF="mmxtool.htm">IMoaMmXTool</A>implementations.<P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=210><B>Name</B></TD><TD WIDTH=294><B>Description</B></TD></TR><TR><TD WIDTH=210><TT>kMoaMmEnabledState_Disabled</TT></TD><TD WIDTH=294><TT>MoaMmEnabledState</TT> value for a disabled tool </TD></TR><TR><TD WIDTH=210><TT>kMoaMmEnabledState_Enabled</TT></TD><TD WIDTH=294><TT>MoaMmEnabledState</TT> value for a disabled tool </TD></TR><TR><TD WIDTH=210><TT>kMoaMmToolCategory_Unknown</TT></TD><TD WIDTH=294>Empty string-the default category for tools that don't specify a category</TD></TR></TABLE><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="MMNIDS">Multimedia Notification IDs</A></font></h3><P>Defined in: mmiservc.h<PRE>NID_MmNPaletteChangedNID_MmNStepNID_MmNIdle</PRE><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="MMREGKEYS">Multimedia Registry Keys</A></font></h3><P>Defined in: mmtypes.h<P><A NAME="RTFToC70">Registry keys are used in an Xtra's </A><A HREF="../moref/register.htm">IMoaRegister</A>interface to indicate the capabilities it provides. <h4><font face=arial,helvetica,sans-serif>Asset keys </font></h4><P><A NAME="RTFToC71">Keys used to register Xtras implementing the</A><A HREF="mmxasset.htm">IMoaMmXAsset</A> interface.<h5><font face=arial,helvetica,sans-serif>Symbol string </font></h5><P>key: <TT>kMoaMmDictKey_SymbolString</TT><P>string: &quot;symbolString&quot;<P>type: <TT>kMoaMmDictType_SymbolString</TT><P>base type: <TT>kMoaDictType_CString</TT><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC72">Display name string</A></font></h5><P>key: <TT>kMoaMmDictKey_DisplayNameString</TT><P>string: &quot;displayNameString&quot;<P>type: <TT>kMoaMmDictType_DisplayNameString</TT><P>base type: <TT>kMoaDictType_CString</TT><P>Specifies the name to appear for your Xtra in the host application'suser interface. If your Xtra doesn't specify a value for thiskey, the host application uses your symbol string.<h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC73">Display category string</A></font></h5><P>key: <TT>kMoaMmDictKey_DisplayCategoryString</TT><P>string: &quot;displayCategoryString&quot;<P>type: <TT>kMoaMmDictType_DisplayCategoryString</TT><P>base type: kMoaDictType_CString<h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC74">Color icon</A></font></h5><P>key: <TT>kMoaMmDictKey_ColorIcon</TT><P>string: &quot;colorIcon&quot;<P>type: <TT>kMoaMmDictType_ColorIcon</TT><P>base type: kMoaDictType_Bytes<P>Customizes the asset type icon for your asset by registering acolor icon using this dictionary entry. On both Macintosh andWindows, you register a &quot;bag of bytes&quot; for each icon.On the Macintosh, this is the contents of a PicHandle (PICT resource)representing the icon. On Windows, this is the contents of a packedDIB handle (a BITMAP resource). See the OvalSprite sample forthe code you need to handle this. In the future, we may providethis is common support code or build resource registration intoMOA.<h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC75">Black &amp; white icon</A></font></h5><P>key: kMoaMmDictKey_BWIcon<P>string: &quot;BWIcon&quot;<P>type: kMoaMmDictType_BWIcon<P>base type: kMoaDictType_Bytes<P>Customizes the asset type icon for your asset by registering ablack and white icon using this dictionary entry. On both Macintoshand Windows, you register a &quot;bag of bytes&quot; for eachicon. On the Macintosh, this is the contents of a PicHandle (PICTresource) representing the icon. On Windows, this is the contentsof a packed DIB handle (a BITMAP resource). See the InkTest samplefor the code you need to handle this. In the future, we may providethis is common support code or build resource registration intoMOA.<h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC76">Actor type</A></font></h5><P>key: kMoaMmDictKey_ActorType<P>string: &quot;actorType&quot;<P>type: kMoaMmDictType_ActorType<P>base type: kMoaDictType_Long<h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC77">Asset capabilities</A></font></h5><P>key: kMoaMmDictKey_AssetCaps<P>string: &quot;assetCaps&quot;<P>type: kMoaMmDictType_AssetCaps<P>base type: kMoaDictType_Bytes<h5><font face=arial,helvetica,sans-serif>Message table</font></h5><P>key: kMoaMmDictKey_MessageTable<P>string: &quot;msgTable&quot;<P>type: kMoaMmDictType_MessageTable<P>base type: kMoaDictType_CString<hr width=45% align=left><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC78">Transition keys</A> </font></h4><P><A NAME="RTFToC79">Keys used to register Xtras implementing the</A><A HREF="mmxtrnst.htm">IMoaMmXTransitionActor</A> interface.<h5><font face=arial,helvetica,sans-serif>Transition capabilities </font></h5><P>key: kMoaMmDictKey_TransitionCaps<P>string: &quot;transitionCaps&quot;<P>type: kMoaMmDictType_TransitionCaps<P>base type: kMoaDictType_Bytes<h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC80">Transition chunk size</A></font></h5><P>key: kMoaMmDictKey_TransDefaultChunkSize<P>string: &quot;transitionDefaultChunkSize&quot;<P>type: kMoaMmDictType_TransDefaultChunkSize<P>base type: kMoaDictType_Long<h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC81">Transition default area</A></font></h5><P>key: kMoaMmDictKey_TransDefaultArea<P>string: &quot;transitionDefaultArea&quot;<P>type: kMoaMmDictType_TransDefaultArea<P>base type: kMoaDictType_Long<h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC82">Transition default duration</A></font></h5><P>key: kMoaMmDictKey_TransDefaultDuration<P>string: &quot;transitionDefaultDuration&quot;<P>type: kMoaMmDictType_TransDefaultDuration<P>base type: kMoaDictType_Long<BR><hr width=45% align=left><h4><font face=arial,helvetica,sans-serif>Scripting Xtra keys </font></h4><P>Key used to register Xtras implementing the <A HREF="mmxscrpt.htm">IMoaMmXScript</A>interface. <P>key: <TT>kMoaMmDictKey_MessageTable</TT><P>symbol: &quot;msgTable&quot;<P>type: <TT>kMoaMmDictType_MessageTable</TT><P>base type: <TT>kMoaDictType_CString<BR></TT><hr width=45% align=left><h4><font face=arial,helvetica,sans-serif>Tool Xtra keys </font></h4><P>Key used to register Xtras implementing the <A HREF="mmxtool.htm">IMoaMmXTool</A>interface. <P>key: <TT>kMoaMmDictKey_AlwaysEnabled</TT><P>symbol: &quot;alwaysEnabled&quot;<P>type:<TT>kMoaMmDictType_AlwaysEnabled</TT><P>base type: <TT>kMoaDictType_Long<BR></TT><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="MMERRS">Multimedia Error Codes</A> </font></h3><P>Defined in: mmtypes.h<h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC84">General errors</A> </font></h4><P><TABLE BORDERCOLOR=#808080 BORDER=2><TR><TD WIDTH=237><B>Error</B></TD><TD WIDTH=267><B>Description</B></TD></TR><TR><TD WIDTH=237><TT>kMoaMmErr_Base</TT></TD><TD WIDTH=267>Base for MOA Multimedia API error codes</TD></TR><TR><TD WIDTH=237><TT>kMoaMmErr_NotImplemented</TT></TD><TD WIDTH=267>Method not implemented</TD></TR><TR><TD WIDTH=237><TT>kMoaMmErr_InterfaceNotFound</TT></TD><TD WIDTH=267>Interface not provided by Xtra or application</TD></TR><TR><TD WIDTH=237><TT>kMoaMmErr_InternalError</TT></TD><TD WIDTH=267>Internal error</TD></TR><TR><TD WIDTH=237><TT>kMoaMmErr_XAssetTypeUnknown</TT></TD><TD WIDTH=267>Unknown Xtra type</TD></TR><TR><TD WIDTH=237><TT>kMoaMmErr_GCTypeNotSupported</TT></TD><TD WIDTH=267>Unsupported graphics context specified</TD></TR><TR><TD WIDTH=237><TT>kMoaMmErr_GCNotModifiable</TT></TD><TD WIDTH=267>An attempt is made to modify an application-owned graphics context</TD></TR><TR><TD WIDTH=237><TT>kMoaMmErr_GCNotAvailable</TT></TD><TD WIDTH=267>Attempted to get a stage window graphics context or a stage buffer graphics context and one isn't available</TD></TR><TR><TD WIDTH=237><TT>kMoaMmErr_NotRegistered</TT></TD><TD WIDTH=267>You attempted to unregister an object (such as a <TT>PIMoaMmMacEventHandler</TT>) that is not currently registered.</TD></TR></TABLE><P><hr width=45% align=left><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC85">Call handler errors</A> </font></h4><P><TT>kMoaMmErr_FunctionNotFound</TT><P><TT>kMoaMmErr_NoArgExpected</TT><P><TT>kMoaMmErr_OneArgExpected</TT><P><TT>kMoaMmErr_TwoArgsExpected</TT><P><TT>kMoaMmErr_ThreeArgsExpected</TT><P><TT>kMoaMmErr_FourArgsExpected</TT><P><TT>kMoaMmErr_WrongNumberOfArgs</TT><P><TT>kMoaMmErr_NotRegistered<BR></TT><P><hr width=45% align=left><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC86">Property access errors</A> </font></h4><P>Errors returned by methods of the <A HREF="mmprpown.htm">IMoaMmPropOwner</A>interface.<P><TT>kMoaMmErr_PropertyNotFound</TT><P><TT>kMoaMmErr_CannotSetProperty</TT><P><TT>kMoaMmErr_NoMemForString</TT><P><TT>kMoaMmErr_ArgOutOfRange</TT><P><TT>kMoaMmErr_IntegerExpected</TT><P><TT>kMoaMmErr_SymbolExpected</TT><P><TT>kMoaMmErr_FloatExpected</TT><P><TT>kMoaMmErr_StringExpected</TT><P><TT>kMoaMmErr_PointExpected</TT><P><TT>kMoaMmErr_RectExpected<BR></TT><P><hr width=45% align=left><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC87">Tool Xtra errors</A></font></h4><P>Error returned by Xtras implementing the <A HREF="mmxtool.htm">IMoaMmXTool</A>interface. <P><TT>kMoaMmErr_ToolDisabled</TT>Tool disabled<BR><P><hr width=45% align=left><h4><font face=arial,helvetica,sans-serif>Miscellaneous errors </font></h4><P><TT>kMoaMmErr_NotRegistered</TT><P><TT>kMoaMmErr_StreamInFailed</TT><P><TT>kMoaMmErr_StreamOutFailed</TT><P><TT>kMoaMmErr_FreeFailed</TT><P><TT>kMoaMmErr_AssetCreationFailed</TT><P><TT>kMoaMmErr_GCNotModifiable</TT><P><TT>kMoaMmErr_GCNotAvailable</TT><P><TT>kMoaMmErr_WinGNotEnabled</TT><P><TT>kMoaMmErr_UnknownNotifyMsgCode</TT><P><TT>kMoaMmErr_ValueTypeMismatch</TT><hr width=45% align=left><P><A HREF="../copyrite.htm">Copyright &#169; 1995, 1996, 1997, 1998, 1999 Macromedia, Inc.</A></BODY><!--#include virtual="/uber/html/footer.html" --></html>
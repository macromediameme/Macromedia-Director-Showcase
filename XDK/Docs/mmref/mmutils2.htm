<HTML><HEAD><TITLE>IMoaMmUtils2</TITLE><META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0z"></HEAD><body bgcolor="#FFFFFF"  link="#ff3300" alink="#ff3300" vlink="#333399"><P><A HREF="../mmdg/index.htm">MM Developer's Guide</A><BR><A HREF="index.htm" >MM Interfaces</A> | <A HREF="mmmthndx.htm" >MM Methods</A>| <A HREF="mmtypndx.htm">MM Types and Misc API</A><hr width=45% align=left><h2><font face=arial,helvetica,sans-serif><A NAME="IMoaMmUtils2">IMoaMmUtils2</A></font></h2><hr width=45% align=left><P>Interface ID: <CODE>IID_IMoaMmUtils2<BR></CODE>Pointer type: <CODE>PIMoaMmUtils2<BR></CODE>Inheritance: <CODE>IMoaUnknown<BR></CODE>Header file: <A HREF = "../../include/mmiutil.h">mmiutil.h</A><BR><h3><font face=arial,helvetica,sans-serif>Description</font></h3><P><DL><DT><DD>This interface provides utilities for printing messages in thescripting window, for getting a graphics context from the hostplatform, and for converting colors between RGB and the currentpalette. <P>With <A HREF="mmvalue.htm">IMoaMmValue</A>, <A HREF="mmwndmac.htm">IMoaMmWndMac</A>,and <A HREF="mmwndwin.htm">IMoaMmWndWin</A>, this interface supersedes<CODE>IMoaMmUtils</CODE>, which has been made redundant. <BR></DL><h3><font face=arial,helvetica,sans-serif>Methods<BR></font></h3><h4><font face=arial,helvetica,sans-serif>General utilities </font></h4><DL><DT><DD><A HREF = "#PrintMessage">PrintMessage()</A> <BR><A HREF = "#PrintMessage1">PrintMessage1()</A> <BR><A HREF = "#PrintMessage2">PrintMessage2()</A> <BR><A HREF = "#PrintMessage3">PrintMessage3()</A> <BR><A HREF = "#PrintMessage4">PrintMessage4()</A> </DL><h4><font face=arial,helvetica,sans-serif>Imaging support </font></h4><DL><DT><DD><A HREF = "#NewGC">NewGC()</A> <BR><A HREF = "#RGBToIndex">RGBToIndex()</A> <BR><A HREF = "#IndexToRGB">IndexToRGB()</A> </DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="IndexToRGB">IndexToRGB()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>IndexToRGB(PIMoaMmUtils2 <I>This</I>, <DD>MoaMmColorIndex <I>index</I>, <BR>PMoaMmRGBTriple pRGBColor) )</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmUtils2 </CODE>interface<BR><BR><DT><CODE><I>index</I></CODE><DD><CODE>MoaMmColorIndex</CODE>The color index of the paletteentry <BR><BR><DT><CODE><I>pRGBColor</I></CODE>  <DD><CODE>PMoaMmRGBTriple</CODE>Pointer to a<TT><I> </I>MoaMmRGBTriple </TT>to     receive the result <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL>   <DT>   <DD><BR>    Replaces <TT>Index2Color()</TT> on the Macintosh. <BR>    <BR>    Cross-platform method to convert color index specified to the corresponding     RGB color in the current color palette. The palette currently in use by the     playback window device is used for the lookup,. The device must be set to     indexed color (less than or equal to 8 bits pixel depth) for this method to     work properly. If the device is set to a direct color mode (greater than 8     bits), the results are unpredictable. <TT><I>index </I></TT>specifies the     color index of the palette entry of interest. <TT><I>pRGBColor </I></TT>contains     a pointer to a <TT>MoaMmRGBTriple </TT>to receive the result. <BR>  <dt>&nbsp;</dt>  <DD>    <hr width=45% align=left>    <BR>    <h3><font face=arial,helvetica,sans-serif><a name = "RGBToIndex">RGBToIndex()</a></font></h3>    <dl>       <dt>         <h4><font face=arial,helvetica,sans-serif>Syntax</font></h4>      <dd>         <dl>           <dt><code>RGBToIndex(PIMoaMmColor <i>This</i>, <br>            </code>          <dd><code>ConstPMoaMmRGBTriple <i>pRGBColor</i>, <br>            PMoaMmColorIndex <i>pIndex</i>) </code>        </dl>        <br>    </dl>    <dl>       <dt>         <h4><font face=arial,helvetica,sans-serif>Parameters</font></h4>      <dd>         <dl>           <dt><code><i>This</i></code>          <dd>Pointer to the <code>IMoaMmColor</code> interface<br>            <br>          <dt><code><i>pRGBColor</i></code>          <dd><code>ConstPMoaMmRGBTriple</code>&nbsp;&nbsp;<br>            <br>          <dt><code><i>pIndex</i></code>          <dd><code>PMoaMmColorIndex</code>&nbsp;&nbsp;<br>            <br>        </dl>    </dl>    <dl>       <dt>         <h4><font face=arial,helvetica,sans-serif>Returns</font></h4>      <dd><code>MoaError</code>     </dl>    <p><font face="Arial, Helvetica, sans-serif">Description</font></p>    <p>Cross-platform method to convert RGB value specified to the closest corresponding       index in the current color palette. </p></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="NewGC">NewGC()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>NewGC(PIMoaMmUtils2 <I>This</I>, <DD>ConstPMoaMmNativeGCInfo <I>pNativeGCInfo</I>, <BR>PIMoaMmGC FAR * ppGC) )</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmUtils2 </CODE>interface<BR><BR><DT><CODE><I>pNativeGCInfo</I></CODE><DD>ConstPMoaMmNativeGCInfo<BR><BR><DT><CODE><I>ppGC</I></CODE><DD>PIMoaMmGC FAR *<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Creates a new <TT>IMoaMmGC </TT>interfacefor the native drawing context you specify (Macintosh <TT>WindowPtr</TT>or <TT>GWorld</TT>;Windows HWND, DDB DC, or DIB DC). Note that for Macintosh graphiccontexts, you need to fill in only the <TT>WindowPtr</TT>orthe <TT>GWorldPtr </TT>of the<TT>MoammNativeGCInfo</TT>;the host application handles the <TT>qdGlobalsPtr</TT>for you. <BR><BR>For Windows[[ordfeminine]] HWND, DIB, or DDB-based graphics contexts,you must supply an HDC (device context). The caller continuesto own the DC and is responsible for releasing it after releasingthe GC interface. Specific Windows GC types require additionalinformation (such as the HWND for a Window GC). <BR><BR></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="PrintMessage">PrintMessage()</A>, <A NAME="PrintMessage1">PrintMessage1()</A>,<A NAME="PrintMessage2">PrintMessage2()</A>, <A NAME="PrintMessage3">PrintMessage3()</A>,<A NAME="PrintMessage4">PrintMessage4()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>PrintMessage(PIMoaMmUtils<I>This</I>, <DD>ConstPMoaChar<I>pMsg</I>)<BR><BR><DT>PrintMessage1(PIMoaMmUtils<I>This</I>, <DD>ConstPMoaChar<I>pMsg</I>, <BR>MoaLong<I>arg1</I>)<BR><BR><DT>PrintMessage2(PIMoaMmUtils<I>This</I>, <DD>ConstPMoaChar<I>pMsg</I>, <BR>MoaLong<I>arg1</I>, <BR>MoaLong<I>arg2</I>)<BR><BR><DT>PrintMessage3(PIMoaMmUtils<I>This</I>, <DD>ConstPMoaChar<I>pMsg</I>, <BR>MoaLong<I>arg1</I>, <BR>MoaLong<I>arg2</I>, <BR>MoaLong<I>arg3</I>)<BR><BR><DT>PrintMessage4(PIMoaMmUtils<I>This</I>, <DD>ConstPMoaChar<I>pMsg</I>, <BR>MoaLong<I>arg1</I>, <BR>MoaLong<I>arg2</I>, <BR>MoaLong<I>arg3</I>, <BR>MoaLong<I>arg4</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmUtils2 </CODE>interface<BR><BR><DT><CODE><I>pMsg</I></CODE><DD><CODE>ConstPMoaChar</CODE>Pointer to the<TT><I></I>ConstPMoaChar</TT>containingthe message string <BR><BR><DT><CODE><I>arg1</I></CODE><DD><CODE>MoaLong</CODE><TT>MoaLong</TT>usedin place of printf() % constructions, which format variables <BR><BR><DT><CODE><I>arg2</I></CODE><DD><CODE>MoaLong</CODE><TT>MoaLong</TT>usedin place of printf() % constructions, which format variables <BR><BR><DT><CODE><I>arg3</I></CODE><DD><CODE>MoaLong</CODE><TT>MoaLong</TT>usedin place of printf() % constructions, which format variables <BR><BR><DT><CODE><I>arg4</I></CODE><DD><CODE>MoaLong</CODE><TT>MoaLong</TT>usedin place of printf() % constructions, which format variables <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Prints the message <TT>pMsg </TT>inthe host application debugging or message window. These methodsare similar to the standard C <TT>printf()</TT>function, except that they support only fixed numbersof arguments. The first argument, <TT><I>pMsg</I></TT>,is the message string. The arguments which follow are insertedinto <TT><I>pMsg </I></TT>inplace of &quot;%&quot; constructions, as in <TT>printf()</TT>.The constructions available in <TT><I>pMsg</I></TT>are:<BR><BR><P><TABLE BORDER="2"><TR><TH ALIGN="LEFT" VALIGN="TOP" WIDTH=104><B>Construction</B> </TH><TH ALIGN="LEFT" VALIGN="TOP" WIDTH=400><B>Argument type</B> </TH></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=104>%s</TD><TD ALIGN="LEFT"  VALIGN="TOP" WIDTH=400>C-string </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=104>%d</TD><TD ALIGN="LEFT"  VALIGN="TOP" WIDTH=400>integer </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=104>%ld</TD><TD ALIGN="LEFT"  VALIGN="TOP" WIDTH=400>long integer </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=104>%x</TD><TD ALIGN="LEFT"  VALIGN="TOP" WIDTH=400>hex integer </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=104>%lx</TD><TD ALIGN="LEFT"  VALIGN="TOP" WIDTH=400>long hex integer </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=104>%v</TD><TD ALIGN="LEFT"  VALIGN="TOP" WIDTH=400>pointer to <TT>MoaMmValue</TT>. </TD></TR></TABLE><P><BR></DL><hr width=45% align=left><P><A HREF = "../copyrite.htm">Copyright &#169; 1995, 1996, 1997, 1998, 1999 Macromedia, Inc.</A></BODY><!--#include virtual="/uber/html/footer.html" --></html>
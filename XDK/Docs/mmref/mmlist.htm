<HTML><HEAD><TITLE>IMoaMmList</TITLE><META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0z"></HEAD><body bgcolor="#FFFFFF"  link="#ff3300" alink="#ff3300" vlink="#333399"><P><A HREF="../mmdg/index.htm">MM Developer's Guide</A>  <BR><A HREF="index.htm" >MM Interfaces</A> | <A HREF="mmmthndx.htm" >MM Methods</A>| <A HREF="mmtypndx.htm">MM Types and Misc API</A><hr width=45% align=left><h2><font face=arial,helvetica,sans-serif>IMoaMmList</font></h2><hr width=45% align=left><P>Interface ID: <CODE>IID_IMoaMmList<BR></CODE>Pointer type: <CODE>PIMoaMmList<BR></CODE>Inheritance: <A HREF = "../moref/unknown.htm">IMoaUnknown</A><BR>Header file: <A HREF = "../../include/mmiservc.h">mmiservc.h</A><BR><h3><font face=arial,helvetica,sans-serif>Description</font></h3><DL><DT><DD><BR>Lists are a type of value used to represent a collection of elements.Lists can contain elements of multiple types, so it is possibleto have a single list containing any combination of integer, float,string, and other values. In general, there are two types of lists:linear and property. Linear lists contain an ordered sequenceof values which are referred to by index. Property lists containa sequence of <TT>propertyName </TT>valuepairs. Elements of a property list are referred to by propertyname.<BR><BR>A list is a type of <TT>MoaMmValue</TT>.Since lists are <TT>MoaMmValues</TT>,they can be used as properties of objects (such as assets andsprites) obtained and set using the standard <TT>IMoaMmPropowner::GetProp()</TT>and <TT>SetProp() </TT>methods,just like strings, integers, and other simple value types. Theelements of lists are also <TT>MoaMmValues</TT>.Thus, a list can itself contain lists (sublists).<BR><BR>When adding to or modifying elements in a list, the value suppliedby the caller automatically calls<TT>IMoaMmUtils::ValueAddRef() </TT>before it is added to thelist. In effect, the value is copied and then placed in the list.The caller continues to maintain ownership of the supplied elementvalue and is responsible for releasing it.<BR><BR>When retrieving elements from a list, the value in the list automaticallycalls<TT> IMoaMmUtils::ValueAddRef()</TT>when it is returned. For example, when you call <TT>GetValueByIndex()</TT>to retrieve a value, <TT>ValueAddRef()</TT>is called. In effect, the list value is copied, thenreturned to the caller. The caller owns the returned value andis responsible for releasing it.<BR><BR>When you dispose of the list, elements within the list are disposedrecursively.<BR><BR>To add or release values, use the <TT>IMoaMmUtils::ValueAddRef()</TT>and <TT>ValueRelease()</TT>methods.<BR><BR></DL><P><h3><font face=arial,helvetica,sans-serif>Methods</font></h3><DL><DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Adding values </font></h4><DL><DT><DD><A HREF = "#NewListValue">NewListValue()</A> <BR><A HREF = "#AppendValueToList">AppendValueToList()</A> <BR><A HREF = "#NewPropListValue">NewPropListValue()</A> <BR><A HREF = "#AppendValueToPropList">AppendValueToPropList()</A></DL><h4><font face=arial,helvetica,sans-serif>List management </font></h4><DL><DT><DD><A HREF = "#CountElements">CountElements()</A> </DL><h4><font face=arial,helvetica,sans-serif>Accessing values </font></h4><DL><DT><DD><A HREF = "#GetValueByIndex">GetValueByIndex()</A> <BR><A HREF = "#SetValueByIndex">SetValueByIndex()</A> <BR><A HREF = "#GetValueByProperty">GetValueByProperty()</A> <BR><A HREF = "#GetPropertyNameByIndex">GetPropertyNameByIndex()</A></DL><h4><font face=arial,helvetica,sans-serif>Editing values </font></h4><DL><DT><DD><A HREF = "#SetValueByProperty">SetValueByProperty()</A> </DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="AppendValueToList">AppendValueToList()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><CODE>AppendValueToList(PIMoaMmList<I>This</I>, <DD>PMoaMmValue<I>pListValue</I>, <BR>PMoaMmValue<I>pElementValue</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmList</CODE> interface<BR><BR><DT><CODE><I>pListValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to a pre-existing<TT><I></I>MoaMmValue </TT>linearlist <BR><BR><DT><CODE><I>pElementValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to the<TT><I></I>MoaMmValue </TT>toadd <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Adds a value to the end of the linear list stored in <TT><I>pListValue</I></TT>.<TT><I>pListValue </I></TT>mustbe a pointer to a preexisting linear list-type <TT>MoaMmValue</TT>.To create a new, empty list value, use <TT>IMoaMmList::NewListValue()</TT>.<TT><I>pElementValue </I></TT>isa pointer to the <TT>MoaMmValue </TT>toadd to the list. Values added to lists are copied; therefore,the caller maintains ownership of <TT><I>pElementValue</I></TT>and is responsible for releasing it. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="AppendValueToPropList">AppendValueToPropList()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><CODE>AppendValueToPropList(PIMoaMmList<I>This</I>, <DD>PMoaMmValue<I>pListValue</I>, <BR>PMoaMmValue<I>pElementProp</I>, <BR>PMoaMmValue<I>pElementValue</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmList</CODE> interface<BR><BR><DT><CODE><I>pListValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to a pre-existing<TT><I></I>MoaMmValue </TT>propertylist <BR><BR><DT><CODE><I>pElementProp</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to the<TT><I></I>MoaMmValue </TT>thatrepresents the property to add to the list <BR><BR><DT><CODE><I>pElementValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to the<TT><I></I>MoaMmValue </TT>thatrepresents the property value to add to the list <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Adds a value to the end of a the property list stored in <TT><I>pListValue</I></TT>.<TT><I>pListValue</I></TT>must be a pointer to a preexisting property list-type <TT>MoaMmValue</TT>.To create a new, empty property list value, use <TT>IMoaMmList::NewPropListValue()</TT>.<TT><I>pElementValue </I></TT>isa pointer to the <TT>MoaMmValue</TT>to add to the list. Values added to lists are copied; the callermaintains ownership of <TT><I>pElementValue</I></TT>and is responsible for releasing it. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="CountElements">CountElements()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><CODE>CountElements(PIMoaMmList<I>This</I>, <DD>ConstPMoaMmValue<I>pListValue</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmList</CODE> interface<BR><BR><DT><CODE><I>pListValue</I></CODE><DD><CODE>ConstPMoaMmValue</CODE>Pointer to the <TT>ConstPMoaMmValue</TT>for the list whose elements to count <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><TT>MoaLong</TT> </DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Returns the number of elements in <TT><I>pListValue</I></TT>.<TT><I>pListValue </I></TT>canbe either a linear-list or a property list. The list elementsare <I>not</I> counted recursively; that is, only the top-levelvalues are counted, not sublists. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetPropertyNameByIndex">GetPropertyNameByIndex()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>GetPropertyNameByIndex(PIMoaMmList<I>This</I>, <DD>ConstPMoaMmValue<I>pListValue</I>, <BR>MoaLong<I>index</I>, <BR>PMoaMmValue<I>pResultValue</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmList</CODE> interface<BR><BR><DT><CODE><I>pListValue</I></CODE><DD><CODE>ConstPMoaMmValue</CODE>Pointer to the <TT>ConstPMoaMmValue</TT>for the list <BR><BR><DT><CODE><I>index</I></CODE><DD><CODE>MoaLong</CODE>Ordinal number of element in the list<BR><BR><DT><CODE><I>pResultValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to the symbol-type value representingthe property name <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Returns the property name associated with an element in aproperty list. <TT><I>index</I></TT>specifies the element of interest, the first element in the listhas an index of 1. The property name is returned as a symbol-typevalue in <TT><I>pResultValue</I></TT>.To convert symbols to strings, use the <TT>IMoaMmUtils::SymbolToString()</TT>method. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetValueByIndex">GetValueByIndex()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><CODE>GetValueByIndex(PIMoaMmList<I>This</I>, <DD>ConstPMoaMmValue<I>pListValue</I>, <BR>MoaLong<I>index</I>, <BR>PMoaMmValue<I>pResultValue</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmList</CODE> interface<BR><BR><DT><CODE><I>pListValue</I></CODE><DD><CODE>ConstPMoaMmValue</CODE>Pointer to the <TT>ConstPMoaMmValue</TT>for the list <BR><BR><DT><CODE><I>index</I></CODE><DD><CODE>MoaLong</CODE>Ordinal number of element in the list<BR><BR><DT><CODE><I>pResultValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to the value of the element<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Obtains the value of an element in a list by index. <TT><I>index</I></TT>specifies the element of interest, the first elementin the list has an index of 1. This call populates a <TT>MoaMmValue</TT>at <TT><I>pResultValue</I></TT>with the list element. The caller is responsiblefor releasing the value returned. This call overwrites any currentvalue at <TT><I>pResultValue</I></TT>,so if the current value is valid, make sure to release it beforemaking this call. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetValueByProperty">GetValueByProperty()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>GetValueByProperty(PIMoaMmList<I>This</I>, <DD>ConstPMoaMmValue<I>pListValue</I>, <BR>PMoaMmValue<I>pPropNameValue</I>, <BR>PMoaMmValue<I>pResultValue</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmList</CODE> interface<BR><BR><DT><CODE><I>pListValue</I></CODE><DD><CODE>ConstPMoaMmValue</CODE>Pointer to the <TT>ConstPMoaMmValue</TT>for the list <BR><BR><DT><CODE><I>pPropNameValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to a symbol-type value representingthe property name of the element <BR><BR><DT><CODE><I>pResultValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to the value of the element<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Obtains the value of an element in a list by property name.<TT><I>pPropNameValue </I></TT>mustcontain a symbol-type value specifying the property name of theelement of interest. This call populates a <TT>MoaMmValue</TT>at <TT><I>pResultValue</I></TT>with the list element. The caller is responsiblefor releasing the value returned. This call overwrites any currentvalue at <TT><I>pResultValue</I></TT>,so if the current value is valid, make sure to release it beforemaking this call. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="NewListValue">NewListValue()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>NewListValue(PIMoaMmList<I>This</I>, <DD>PMoaMmValue<I>pListValue</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmList</CODE> interface<BR><BR><DT><CODE><I>pListValue</I></CODE><DD><CODE>PMoaMmValue</CODE>tt&gt;Pointer to the<TT><I></I>MoaMmValue </TT>forthe new linear list <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Creates a new linear list-type value. This call populatesthe value at <TT><I>pListValue </I></TT>withthe result. This call overwrites any current value at <TT><I>pListValue</I></TT>,so if the current value is valid, make ure to release it beforemaking this call. The caller owns the newly created value andis responsible for releasing it. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="NewPropListValue">NewPropListValue()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>NewPropListValue(PIMoaMmList<I>This</I>, <DD>PMoaMmValue<I>pListValue</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmList</CODE> interface<BR><BR><DT><CODE><I>pListValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to the<TT>MoaMmValue</TT>for the new property list <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE> </DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="SetValueByIndex">SetValueByIndex()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>SetValueByIndex(PIMoaMmList<I>This</I>, <DD>PMoaMmValue<I>pListValue</I>, <BR>MoaLong<I>index</I>, <BR>PMoaMmValue<I>pNewValue</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmList</CODE> interface<BR><BR><DT><CODE><I>pListValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to the<TT>MoaMmValue</TT>forthe existing list <BR><BR><DT><CODE><I>index</I></CODE><DD><CODE>MoaLong</CODE>Ordinal number of the element to modifyin the list <BR><BR><DT><CODE><I>pNewValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to the <TT>MoaMmValue</TT>to add to the list <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Sets the value of a list element by index. <TT><I>pListValue</I></TT>specifies an existing list to modify. <TT><I>index</I></TT>specifies the element to be modified, the firstelement in the list has an index of 1. <TT><I>pNewValue</I></TT>is a pointer to a caller-owned value to be addedto the list. This call copies the value at <TT><I>pNewValue</I></TT>,and replaces the current value in position <TT><I>index</I></TT>with the copy. Since the value is copied, thecaller maintains ownership of the <TT><I>pNewValue</I></TT>and is responsible for releasing it. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="SetValueByProperty">SetValueByProperty()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>SetValueByProperty(PIMoaMmList<I>This</I>, <DD>PMoaMmValue<I>pListValue</I>, <BR>PMoaMmValue<I>pPropNameValue</I>, <BR>PMoaMmValue<I>pNewValue</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmList</CODE> interface<BR><BR><DT><CODE><I>pListValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to the<TT>MoaMmValue</TT>for the existing list <BR><BR><DT><CODE><I>pPropNameValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to the symbol-type value representingthe property name of the element to modify <BR><BR><DT><CODE><I>pNewValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to the <TT>MoaMmValue</TT>to add to the list <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Sets the value of a list element by property name. <TT><I>pListValue</I></TT>specifies an existing property list to modify.<TT><I>pPropNameValue </I></TT>isa symbol-type value specifying the property name of the elementto be modified. <TT><I>pNewValue </I></TT>isa pointer to a caller-owned <TT>MoaMmValue</TT>to be added to the list. This call copies the valueat <TT><I>pNewValue</I></TT>,and replaces the current value in the list associated with property<TT><I>pPropNameValue </I></TT>withthe copy. Since the value is copied, the caller maintains ownershipof the <TT><I>pNewValue </I></TT>andis responsible for releasing it. <BR></DL><P><hr width=45% align=left><P><A HREF="../copyrite.htm" >Copyright &#169; 1995, 1996, 1997, 1998, 1999 Macromedia, Inc.</A></BODY><!--#include virtual="/uber/html/footer.html" --></html>
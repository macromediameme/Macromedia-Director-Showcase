<HTML><HEAD><TITLE>IMoaMmValue</TITLE><META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0z"></HEAD><body bgcolor="#FFFFFF"  link="#ff3300" alink="#ff3300" vlink="#333399"><P><A HREF="../mmdg/index.htm">MM Developer's Guide</A><BR><A HREF="index.htm" >MM Interfaces</A> | <A HREF="mmmthndx.htm" >MM Methods</A>| <A HREF="mmtypndx.htm">MM Types and Misc API</A><hr width=45% align=left><h2><font face=arial,helvetica,sans-serif><A NAME="IMoaMmValue">IMoaMmValue</A></font></h2><hr width=45% align=left><P>Interface ID: <CODE>IID_IMoaMmValue<BR></CODE>Pointer type: <CODE>PIMoaMmValue<BR></CODE>Inheritance: <CODE>IMoaUnknown<BR></CODE>Header file: <A HREF = "../../include/mmivalue.h">mmivalue.h</A><BR><h3><font face=arial,helvetica,sans-serif>Description</font></h3><P><DL><DT><DD>This interface provides support for converting C and MOA typesto values that can be passed through the <A HREF="mmprpown.htm">IMoaMmPropertyOwner</A>interface and elsewhere in the multimedia API. The <A HREF="mmtypndx.htm#MoaMmValue">MoaMmValue</A>type provides a general, platform and application-independentmechanism for moving data of various types between an Xtra andan application. <P>Like MOA interfaces, <CODE>MoaMmValues</CODE> use reference countingfor memory management. The methods <A HREF = "#ValueAddRef">ValueAddRef()</A>and <A HREF = "#ValueRelease">ValueRelease()</A> are providedby this interface to let you hold onto values when you need toand release them when you're finished. The &quot;caller-owns&quot;rule applies, as with MOA interfaces. <P>With <A HREF="mmutils2.htm">IMoaMmUtils2</A>, <A HREF="mmwndmac.htm">IMoaMmWndMac</A>,and <A HREF="mmwndwin.htm">IMoaMmWndWin</A>, this interface supercedes<CODE>IMoaMmUtils</CODE>, which has been made redundant. <BR></DL><h3><font face=arial,helvetica,sans-serif>Methods<BR></font></h3><h4><font face=arial,helvetica,sans-serif>Data conversion </font></h4><DL><DT><DD><A HREF = "#StringToSymbol">StringToSymbol()</A> <BR><A HREF = "#SymbolToString">SymbolToString()</A> <BR><A HREF = "#ValueToInteger">ValueToInteger()</A> <BR><A HREF = "#ValueToSymbol">ValueToSymbol()</A> <BR><A HREF = "#ValueToFloat">ValueToFloat()</A> <BR><A HREF = "#ValueToString">ValueToString()</A> <BR><A HREF = "#ValueToStringPtr">ValueToStringPtr()</A> <BR><A HREF = "#ValueToPoint">ValueToPoint()</A> <BR><A HREF = "#ValueToRect">ValueToRect()</A> <BR><A HREF = "#IntegerToValue">IntegerToValue()</A> <BR><A HREF = "#SymbolToValue">SymbolToValue()</A> <BR><A HREF = "#FloatToValue">FloatToValue()</A> <BR><A HREF = "#StringToValue">StringToValue()</A> <BR><A HREF = "#StringHandleToValue">StringHandleToValue()</A> <BR><A HREF = "#PointToValue">PointToValue()</A> <BR><A HREF = "#RectToValue">RectToValue()</A> </DL><h4><font face=arial,helvetica,sans-serif>MoaMmValue management </font></h4><DL><DT><DD><A HREF = "#ValueType">ValueType()</A> <BR><A HREF = "#ValueAddRef">ValueAddRef()</A> <BR><A HREF = "#ValueRelease">ValueRelease()</A> <BR><A HREF = "#ValueStringLength">ValueStringLength()</A> <BR><A HREF = "#ValueReleaseStringPtr">ValueReleaseStringPtr()</A></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="FloatToValue">FloatToValue()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>FloatToValue(PIMoaMmValue <I>This</I>, <DD>MoaDouble <I>fnum</I>, <BR>PMoaMmValue pValue)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmValue </CODE>interface<BR><BR><DT><CODE><I>fnum</I></CODE><DD><CODE>MoaDouble</CODE>Contains the<TT><I></I>MoaDouble</TT>tobe used for the new value <BR><BR><DT><CODE><I>pValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to the<TT><I></I>MoaMmValue</TT>toreceive the result <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Creates a new float-type <TT>MoaMmValue</TT>from a <TT>MoaDouble</TT>.<TT><I>fnum</I></TT> containsthe <TT>MoaDouble </TT>to beused as the basis for the new value. <TT><I>pValue</I></TT>contains a pointer to a <TT>MoaMmValue</TT>to receive the result. This call populates the <TT>MoaMmValue</TT>at <TT><I>pValue</I></TT>witha new <TT>MoaMmValue</TT>,overwriting any current value. Make sure to release any preexistingvalue before making this call. The caller is responsible for releasingthe returned value using <TT>IMoaMmValue::ValueRelease()</TT>. <BR><BR></DL><hr width=45% align=left><h3><A NAME="IntegerToValue"><font face=arial,helvetica,sans-serif>IntegerToValue()</font></A></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>IntegerToValue(PIMoaMmValue <I>This</I>, <DD>MoaLong <I>num</I>, <BR>PMoaMmValue pValue)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmValue </CODE>interface<BR><BR><DT><CODE><I>num</I></CODE><DD><CODE>MoaLong</CODE>Contains the<TT><I></I>MoaLong</TT>to beused for the new value <BR><BR><DT><CODE><I>pValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to a<TT><I></I>MoaMmValue</TT>toreceive the result <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Creates a new integer-type <TT>MoaMmValue</TT>from a <TT>MoaLong</TT>.<TT><I>num </I></TT>containsthe <TT>MoaLong </TT>to beused as the basis for the new value. <TT><I>pValue</I></TT>contains a pointer to a <TT>MoaMmValue</TT>to receive the result. This call populates the <TT>MoaMmValue</TT>at <TT><I>pValue</I></TT>witha new <TT>MoaMmValue</TT>,overwriting any current value. Make sure to release any preexistingvalue before making this call. The caller is responsible for releasingthe returned value using <TT>IMoaMmValue::ValueRelease()</TT>.<BR><BR></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="PointToValue">PointToValue()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>PointToValue(PIMoaMmValue <I>This</I>, <DD>ConstPMoaPoint <I>pPoint</I>, <BR>PMoaMmValue pValue)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmValue </CODE>interface<BR><BR><DT><CODE><I>pPoint</I></CODE><DD><CODE>ConstPMoaPoint</CODE>Pointer to a<TT><I></I>ConstPMoaPoint </TT>usedfor the new value <BR><BR><DT><CODE><I>pValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to a<TT><I></I>MoaMmValue</TT>toreceive the result <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Creates a new point-type <TT>MoaMmValue</TT>from a <TT>MoaPoint</TT>.On entry, <TT><I>pPoint </I></TT>containsa pointer to a <TT>MoaPoint </TT>tobe used as the basis for the new value. <TT><I>pValue</I></TT>contains a pointer to a <TT>MoaMmValue</TT>to receive the result. This call populates the <TT>MoaMmValue</TT>at <TT><I>pValue</I></TT>with a new <TT>MoaMmValue</TT>,overwriting any current value. Make sure to release any preexistingvalue before making this call. The caller is responsible for releasingthe returned value (see <TT>IMoaMmValue::ValueRelease()</TT>). <BR><BR></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="RectToValue">RectToValue()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>RectToValue(PIMoaMmValue <I>This</I>, <DD>ConstPMoaRect <I>pRect</I>, <BR>PMoaMmValue pValue)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmValue </CODE>interface<BR><BR><DT><CODE><I>pRect</I></CODE><DD><CODE>ConstPMoaRect</CODE>Pointer to a<TT><I></I>ConstPMoaRect</TT>usedas the basis for the new value <BR><BR><DT><CODE><I>pValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to a<TT><I></I>MoaMmValue</TT>toreceive the new value <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Creates a new rectangle-type <TT>MoaMmValue</TT>from a <TT>MoaRect</TT>.On entry, <TT><I>pRect </I></TT>containsa pointer to a <TT>MoaRect </TT>tobe used as the basis for the new value. <TT><I>pValue</I></TT>contains a pointer to a <TT>MoaMmValue</TT>to receive the result. This call populates the <TT>MoaMmValue</TT>at <TT><I>pValue </I></TT>witha new <TT>MoaMmValue</TT>,overwriting any existing value. Make sure to release any preexistingvalue before making this call. The caller is responsible for releasingthe returned value (see <TT>IMoaMmValue::ValueRelease()</TT>). <BR><BR></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="StringHandleToValue">StringHandleToValue()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>StringHandleToValue(PIMoaMmValue <I>This</I>, <DD>MoaHandle <I>hString</I>, <BR>PMoaMmValue pValue)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmValue </CODE>interface<BR><BR><DT><CODE><I>hString</I></CODE><DD><CODE>MoaHandle</CODE><TT>MoaHandle</TT>containinga null-terminated string used for the value <BR><BR><DT><CODE><I>pValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to a <TT>MoaMmValue</TT>to receive the new value <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Creates a new string-type <TT>MoaMmValue</TT>from a C string contained in a <TT>MoaHandle</TT>.On entry <TT><I>hString </I></TT>containsa valid <TT>MoaHandle </TT>containinga null-terminated C string to be used as the basis for the value.<TT><I>pValue </I></TT>containsa pointer to a <TT>MoaMmValue </TT>toreceive the result. This call populates the <TT>MoaMmValue</TT>at <TT><I>pValue </I></TT>witha new <TT>MoaMmValue</TT>,overwriting any current value. Make sure to release any preexistingvalue before making this call. The caller is responsible for releasingthe returned value (see <TT>IMoaMmValue::ValueRelease()</TT>). <BR><BR><B>Important</B>: <TT>StringHandleToValue()</TT>does <B>not</B> copy the <TT>MoaHandle</TT>supplied in <TT><I>hString</I></TT>.Instead, the <TT>MoaHandle </TT>istransferred to the value. Therefore, the caller releases directownership of the original handle by making this call and can nolonger reference or dispose it. To create a string-type valuefrom a copy of an existing C string, use <TT>StringToValue()</TT>instead.<BR><BR></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="StringToSymbol">StringToSymbol()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>StringToSymbol(PIMoaMmValue <I>This</I>, <DD>ConstPMoaChar <I>pString</I>, <BR>PMoaMmSymbol pSymbol)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmValue </CODE>interface<BR><BR><DT><CODE><I>pString</I></CODE><DD><CODE>ConstPMoaChar</CODE>Pointer to the<TT><I></I>ConstPMoaChar</TT>containingthe string <BR><BR><DT><CODE><I>pSymbol</I></CODE><DD><CODE>PMoaMmSymbol</CODE>Pointer to a<TT><I></I>MoaMmSymbol</TT>thatreceives the result <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</FONT></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Converts the string, <TT><I>pString</I></TT>,to the corresponding symbol and returns the result in <TT><I>pSymbol</I></TT>.Symbols are used to refer to specific properties and media data.In addition, symbols are data types in Lingo, Director's scriptinglanguage. <BR><BR></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="StringToValue">StringToValue()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>StringToValue(PIMoaMmValue <I>This</I>, <DD>ConstPMoaChar <I>pString</I>, <BR>PMoaMmValue pValue)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmValue </CODE>interface<BR><BR><DT><CODE><I>pString</I></CODE><DD><CODE>ConstPMoaChar</CODE>Pointer to a null-terminated stringused for the value <BR><BR><DT><CODE><I>pValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to a<TT><I></I>MoaMmValue</TT>thatreceives the result <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Creates a new string-type <TT>MoaMmValue</TT>from a C string stored at <TT><I>pString</I></TT>.On entry <TT><I>pString </I></TT>containsa pointer to a null-terminated C string to be used as the basisfor the value. <TT><I>pValue </I></TT>containsa pointer to a <TT>MoaMmValue</TT>to receive the result. This call populates the <TT>MoaMmValue</TT>at <TT><I>pValue</I></TT>witha new <TT>MoaMmValue</TT>,overwriting any existing value. Make sure to release any preexistingvalue before making this call. The caller is responsible for releasingthe returned value (see <TT>IMoaMmValue::ValueRelease()</TT>). <BR><BR><TT>StringToValue() </TT>copiesthe string data at <TT><I>pString</I></TT>foruse in the <TT>MoaValue</TT>.If you want to avoid a memory copy and supply the C string datadirectly for the value, use <TT>StringHandleToValue()</TT>instead. <BR><BR></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="SymbolToString">SymbolToString()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>SymbolToString(PIMoaMmValue <I>This</I>, <DD>MoaMmSymbol <I>symbol</I>, <BR>PMoaChar <I>pStringBuf</I>, <BR>MoaLong bufLen)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmValue </CODE>interface<BR><BR><DT><CODE><I>symbol</I></CODE><DD><CODE>MoaMmSymbol</CODE>The symbol to translate <BR><BR><DT><CODE><I>pStringBuf</I></CODE><DD><CODE>PMoaChar</CODE>Pointer to a string buffer to receivethe result <BR><BR><DT><CODE><I>bufLen</I></CODE><DD><CODE>MoaLong</CODE>The size of the string buffer <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Converts <TT><I>symbol </I></TT>toa string. <TT><I>pStringBuf </I></TT>containsa pointer to the caller's string buffer which will receive thestring. <TT><I>bufLen </I></TT>isthe size of the caller's buffer. Symbols are used to refer tospecific properties and media data. In addition, symbols are datatypes in Lingo, Director's scripting language.<BR><BR></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="SymbolToValue">SymbolToValue()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>SymbolToValue(PIMoaMmValue <I>This</I>, <DD>MoaMmSymbol <I>symbol</I>, <BR>PMoaMmValue pValue)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmValue </CODE>interface<BR><BR><DT><CODE><I>symbol</I></CODE><DD><CODE>MoaMmSymbol</CODE>The symbol to translate <BR><BR><DT><CODE><I>pStringBuf</I></CODE><DD><CODE>PMoaChar</CODE>Pointer to a string buffer to receivethe result <BR><BR><DT><CODE><I>bufLen</I></CODE><DD><CODE>MoaLong</CODE>The size of the string buffer <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Converts <TT><I>symbol </I></TT>toa string. <TT><I>pStringBuf </I></TT>containsa pointer to the caller's string buffer which will receive thestring. <TT><I>bufLen </I></TT>isthe size of the caller's buffer. Symbols are used to refer tospecific properties and media data. In addition, symbols are datatypes in Lingo, Director's scripting language.<BR><BR></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="ValueAddRef">ValueAddRef()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>ValueAddRef(PIMoaMmValue <I>This</I>, <DD>PMoaMmValue pValue)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmValue </CODE>interface<BR><BR><DT><CODE><I>pValue</I></CODE><DD>PMoaMmValue<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Increments the reference count of a value by 1. Because <TT>MoaMmValues</TT>areshared objects, you should always call this method on values youpassed as a method argument to retain it across method calls toyour Xtra. When you explicitly request or construct a new value(for example, using <TT>IntegerToValue()</TT>)this method is automatically called for you. Thus, you are responsiblefor calling <TT>IMoaMmValue:: ValueRelease()</TT>on any value you create, unless the value is beingpassed back to the host application. Values passed back to thehost application as return values to Xtra method functions aretransferred to the host application which is then responsiblefor releasing them. Examples of this are your asset and sprite<TT>GetProp()</TT>and <TT>CallFunction()</TT>methods,and your Lingo Xtra <TT>Call()</TT>method. <BR><BR></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="ValueRelease">ValueRelease()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>ValueRelease(PIMoaMmValue <I>This</I>, <DD><BR>PMoaMmValue pValue)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmValue </CODE>interface<BR><BR><DT><CODE><I>pValue</I></CODE><DD>PMoaMmValue<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Decrements the reference count of a value by 1. When the <TT>refCount</TT>drops to 0, the value is released from memory. Because <TT>MoaMmValues</TT>areshared objects, you should always call this method on values youpassed as a method argument if you need to retain it across methodcalls to your Xtra. When you explicitly request or construct anew value (for example, using <TT>IntegerToValue()</TT>)this method is automatically called for you. Thus, you are responsiblefor calling <TT>IMoaMmValue:: ValueRelease()</TT>on any value you create, unless the value is beingpassed back to the host application Values passed back to thehost application as return values to Xtra method functions aretransferred to the host application which is then responsiblefor releasing them. Examples of this are your asset and sprite<TT>GetProp()</TT> and <TT>CallFunction()</TT>methods, and your Lingo Xtra <TT>Call()</TT>method.<BR><BR></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="ValueReleaseStringPtr">ValueReleaseStringPtr()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>ValueReleaseStringPtr(PIMoaMmValue <I>This</I>, <DD>ConstPMoaMmValue pValue)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmValue </CODE>interface<BR><BR><DT><CODE><I>pValue</I></CODE><DD><CODE>ConstPMoaMmValue</CODE>Pointer to a string-type<TT><I>ConstPMoaMmValue</I></TT> <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Releases hold on the contents of a string value initiated by acall to <TT>ValueGetStringPtr()</TT>.<TT>ValueReleaseStringPtr()</TT>mustbe called when caller has finished directly accessing string data,stored in a string-type <TT>MoaMmValue</TT>.To obtain a copy of a value's string data, use <TT>ValueToString()</TT>rather than <TT>ValueToStringPtr()</TT>.<BR><BR></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="ValueStringLength">ValueStringLength()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>ValueStringLength(PIMoaMmValue <I>This</I>, <DD>ConstPMoaMmValue <I>pValue</I>, <BR>MoaLong FAR * pResult)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmValue </CODE>interface<BR><BR><DT><CODE><I>pValue</I></CODE><DD><CODE>ConstPMoaMmValue</CODE>Pointer to a string-type<TT><I></I>ConstPMoaMmValue</TT><BR><BR><DT><CODE><I>pResult</I></CODE><DD><CODE>MoaLong FAR *</CODE>Pointer to a<TT><I></I>MoaLong </TT>toreceive the string length <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Obtains the string length of a string-type <TT>MoaMmValue</TT>.<TT><I>pResult </I></TT>isa pointer to a <TT>MoaLong</TT>to receive the length. The length supplied does not include thenull terminator byte. Returns <TT>kMoaMmErr_StringExpected</TT>if <TT><I>pValue </I></TT>isnot a string-type value. <BR><BR></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="ValueToFloat">ValueToFloat()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>ValueToFloat(PIMoaMmValue <I>This</I>, <DD>ConstPMoaMmValue <I>pValue</I>, <BR>MoaDouble FAR * pResult)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmValue </CODE>interface<BR><BR><DT><CODE><I>pValue</I></CODE><DD><CODE>ConstPMoaMmValue</CODE>Pointer to a float-type <TT>ConstPMoaMmValue<BR><BR></TT><DT><CODE><I>pResult</I></CODE><DD><CODE>MoaDouble FAR *</CODE>Pointer to a<TT><I></I>MoaDouble </TT>toreceive the result <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Obtains the <TT>MoaDouble</TT>for a float-type <TT>MoaMmValue</TT>.<TT><I>pResult </I></TT>isa pointer to a <TT>MoaDouble </TT>toreceive the result. Returns <TT>kMoaMmErr_FloatExpected</TT>if <TT><I>pValue</I></TT>isnot a float-type value. <BR><BR></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="ValueToInteger">ValueToInteger()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>ValueToInteger(PIMoaMmValue <I>This</I>, <DD>ConstPMoaMmValue <I>pValue</I>, <BR>MoaLong FAR * pResult)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmValue </CODE>interface<BR><BR><DT><CODE><I>pValue</I></CODE><DD><CODE>ConstPMoaMmValue</CODE>Pointer to an integer-type <TT>ConstPMoaMmValue</TT><BR><BR><DT><CODE><I>pResult</I></CODE><DD><CODE>MoaLong FAR *</CODE>Pointer to a<TT><I></I>MoaLong </TT>toreceive the result <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Obtains the <TT>MoaLong </TT>foran integer-type <TT>MoaMmValue</TT>.<TT><I>pResult </I></TT>isa pointer to a <TT>MoaLong </TT>toreceive the result. Returns <TT>kMoaMmErr_IntegerExpected</TT>if <TT><I>pValue</I></TT>isnot an integer-type value. <BR></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="ValueToPoint">ValueToPoint()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>ValueToPoint(PIMoaMmValue <I>This</I>, <DD>ConstPMoaMmValue <I>pValue</I>, <BR>PMoaPoint pResult)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmValue </CODE>interface<BR><BR><DT><CODE><I>pValue</I></CODE><DD><CODE>ConstPMoaMmValue</CODE>Pointer to an integer-type <TT>ConstPMoaMmValue</TT><BR><BR><DT><CODE><I>pResult</I></CODE><DD><CODE>PMoaPoint</CODE>Pointer to a<TT><I></I>MoaPoint</TT>toreceive the result <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Obtains the <TT>MoaPoint </TT>foran integer-type <TT>MoaMmValue</TT>.<TT><I>pResult </I></TT>isa pointer to a <TT>MoaPoint </TT>toreceive the result. Returns <TT>kMoaMmErr_PointExpected</TT>if <TT><I>pValue</I></TT>isnot a point-type value. <BR><BR></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="ValueToRect">ValueToRect()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>ValueToRect(PIMoaMmValue <I>This</I>, <DD>ConstPMoaMmValue <I>pValue</I>, <BR>PMoaRect pResult)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmValue </CODE>interface<BR><BR><DT><CODE><I>pValue</I></CODE><DD><CODE>ConstPMoaMmValue</CODE>Pointer to a rectangle-type <TT>ConstPMoaMmValue</TT><BR><BR><DT><CODE><I>pResult</I></CODE><DD><CODE>PMoaRect</CODE>Pointer to a<TT><I></I>MoaRect</TT>to receivethe result <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Obtains the <TT>MoaRect </TT>fora rectangle-type <TT>MoaMmValue</TT>.<TT><I>pResult </I></TT>isa pointer to a <TT>MoaRect </TT>toreceive the result. Returns <TT>kMoaMmErr_RectExpected</TT>if <TT><I>pValue</I></TT>isnot a rectangle-type value. <BR><BR></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="ValueToString">ValueToString()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>ValueToString(PIMoaMmValue <I>This</I>, <DD>ConstPMoaMmValue <I>pValue</I>, <BR>PMoaChar <I>pStringBuf</I>, <BR>MoaLong bufLen)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmValue </CODE>interface<BR><BR><DT><CODE><I>pValue</I></CODE><DD><CODE>ConstPMoaMmValue</CODE>Pointer to a string-type <TT>ConstPMoaMmValue</TT><BR><BR><DT><CODE><I>pStringBuf</I></CODE><DD><CODE>PMoaChar</CODE>Pointer to a buffer to receive a copyof the string data <BR><BR><DT><CODE><I>bufLen</I></CODE><DD><CODE>MoaLong</CODE><TT>MoaLong</TT>indicatingthe length of the buffer <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Obtains the C string for a string-type <TT>MoaMmValue</TT>.<TT><I>pStringBuf</I></TT>isa pointer to a buffer to receive a copy of the string data. <TT><I>bufLen</I></TT>isthe length of the caller's buffer. The buffer must be large enoughfor the string data including the terminating null byte. To accessthe string data directly rather than obtaining a copy, use <TT>ValueToStringPtr()</TT>.Returns <TT>kMoaMmErr_StringExpected</TT>if<TT><I>pValue </I></TT>is nota string-type value. <BR></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="ValueToStringPtr">ValueToStringPtr()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>ValueToStringPtr(PIMoaMmValue <I>This</I>, <DD>ConstPMoaMmValue <I>pValue</I>, <BR>ConstPMoaChar FAR * <I>pResult) </I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmValue </CODE>interface<BR><BR><DT><CODE><I>pValue</I></CODE><DD><CODE>ConstPMoaMmValue</CODE>Pointer to a string-type <TT>ConstPMoaMmValue</TT><BR><BR><DT><CODE><I>pResult</I></CODE><DD><CODE>ConstPMoaChar FAR *</CODE>Pointer to a <TT>ConstPMoaChar</TT>to receive the pointer <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Obtains direct-access to the C string for a string-type <TT>MoaMmValue</TT>.<TT><I>pResult </I></TT>isa pointer to a <TT>MoaChar </TT>toreceive a pointer to the C string data. The string buffer beingaccessed is owned by the <TT>MoaMmValue</TT>.When done accessing the string data, you must call <TT>ValueReleaseStringPtr()</TT>.To get a copy of the string data rather than accessing it directly,use <TT>ValueToString()</TT>.Returns <TT>kMoaMmErr_StringExpected</TT>if <TT><I>pValue</I></TT>isnot a string-type value. <BR><BR></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="ValueToSymbol">ValueToSymbol()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>ValueToSymbol(PIMoaMmValue <I>This</I>, <DD>ConstPMoaMmValue <I>pValue</I>, <BR>PMoaMmSymbol pResult)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmValue </CODE>interface<BR><BR><DT><CODE><I>pValue</I></CODE><DD><CODE>ConstPMoaMmValue</CODE>Pointer to a symbol-type <TT>ConstPMoaMmValue</TT><BR><BR><DT><CODE><I>pResult</I></CODE><DD><CODE>PMoaMmSymbol</CODE>Pointer to a <TT>MoaMmSymbol</TT>to receive the result <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Obtain the <TT>MoaMmSymbol </TT>fora symbol-type <TT>MoaMmValue</TT>.<TT><I>pResult </I></TT>isa pointer to a <TT>MoaMmSymbol </TT>toreceive the result. Returns <TT>kMoaMmErr_SymbolExpected</TT>if <TT><I>pValue </I></TT>isnot a symbol-type value. <BR><BR></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="ValueType">ValueType()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>ValueType(PIMoaMmValue <I>This</I>, <DD>ConstPMoaMmValue <I>pValue</I>, <BR>MoaMmValueType FAR * pResult)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaMmValue </CODE>interface<BR><BR><DT><CODE><I>pValue</I></CODE><DD><CODE>ConstPMoaMmValue</CODE>Pointer to a <TT>ConstPMoaMmValue</TT><BR><BR><DT><CODE><I>pResult</I></CODE><DD><CODE>MoaMmValueType FAR *</CODE>Pointer to a <TT>MoaMmValueType</TT>to receive the result <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Obtains the type code for a <TT>MoaMmValue</TT>.This method returns a <TT>MoaMmValueType</TT>which specifies the type of value.<BR><BR></DL><hr width=45% align=left><P><A HREF = "../copyrite.htm">Copyright &#169; 1995, 1996, 1997, 1998, 1999 Macromedia, Inc.</A></BODY><!--#include virtual="/uber/html/footer.html" --></html>
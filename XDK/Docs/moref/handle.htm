<HTML><HEAD><TITLE>IMoaHandle</TITLE></HEAD><body bgcolor="#FFFFFF"  link="#ff3300" alink="#ff3300" vlink="#333399"><A HREF="../moadg/index.htm">MOA Developer's Guide</A><BR><A HREF="index.htm">MOA Interfaces</A> | <A HREF="momthndx.htm">MOA Methods</A> | <A HREF="motypndx.htm">MOA Types and Misc API</A><hr width=45% align=left><h2><font face=arial,helvetica,sans-serif>IMoaHandle</font></h2><hr width=45% align=left><P>Interface ID: <CODE>IID_IMoaHandle<BR></CODE>Pointer type: <CODE>PIMoaHandle<BR></CODE>Inheritance: <A HREF = "unknown.htm"><FONT SIZE=2>IMoaUnknown</FONT></A><BR>Header file: <A HREF = "../../include/moastdif.h">moastdif.h</A><BR><h3><font face=arial,helvetica,sans-serif>Description</font></h3><DL><DT><DD><BR>This standard MOA interface is implemented by every application'scallback object for the use of Xtras. It provides methods foruse in allocating handle-based, relocatable memory. <BR><BR>This interface is preferable to the <TT><FONT SIZE=2 FACE="Courier">IMoaCalloc</FONT></TT>interface for use in allocating larger chunks of memory, suchas those required for sound buffers and bitmap data. <BR><BR>You can access this interface by calling the <TT><FONT SIZE=2 FACE="Courier">QueryInterface()</FONT></TT>method of <TT><FONT SIZE=2 FACE="Courier">IMoaCallback</FONT></TT>interface, provided by the <TT><FONT SIZE=2 FACE="Courier">pCallback</FONT></TT>instance variable of all MOA objects. <BR><BR></DL><P><h3><font face=arial,helvetica,sans-serif>Methods</font></h3><DL><DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Allocating </font></h4><DL><DT><DD><A HREF = "#Alloc">Alloc()</A> <BR><A HREF = "#ZeroAlloc">ZeroAlloc()</A> </DL><h4><font face=arial,helvetica,sans-serif>Freeing </font></h4><DL><DT><DD><A HREF = "#Free">Free()</A> </DL><h4><font face=arial,helvetica,sans-serif>Sizing </font></h4><DL><DT><DD><A HREF = "#GetSize">GetSize()</A> <BR><A HREF = "#Resize">Resize()</A> <BR><A HREF = "#GetLargestFreeBlock">GetLargestFreeBlock()</A> </DL><h4><font face=arial,helvetica,sans-serif>Accessing </font></h4><DL><DT><DD><A HREF = "#Lock">Lock()</A> <BR><A HREF = "#Unlock">Unlock()</A> </DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="Alloc">Alloc()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>Alloc(PIMoaHandle<I>This</I>, <DD><BR>MoaLong<I>cb</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaHandle</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">cb</FONT></I></CODE><DD><CODE>MoaLong</CODE>Integer representing size of memory blockto allocate <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><TT><FONT SIZE=2 FACE="Courier">MoaHandle</FONT></TT> </DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Allocates and returns a relocatable memory block of at leastcb bytes in size. The memory isn't necessarily zeroed out. Ifthe request cannot be satisfied,NULL is returned. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="Free">Free()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>Free(PIMoaHandle<I>This</I>, <DD><BR>MoaHandle<I>h</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaHandle</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">h</FONT></I></CODE><DD><CODE>MoaHandle</CODE>Previously allocated handle to be freed<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD>void </DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Frees a handle passed in. It is OK to pass NULL, or a lockedhandle, to this method. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetLargestFreeBlock">GetLargestFreeBlock()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>GetLargestFreeBlock(PIMoaHandle<I>This</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaHandle</CODE> interface<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD>Size of largest free block </DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>The method <TT><FONT SIZE=2 FACE="Courier">GetLargestFreeBlock()</FONT></TT>returns the amount of free space that could be quickly allocatedvia the <TT><FONT SIZE=2 FACE="Courier">Alloc</FONT></TT> method(i.e., how large a handle could be allocated without purging,compacting, etc.). A return value of -1 means that this functionisn't implemented. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetSize">GetSize()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>GetSize(PIMoaHandle<I>This</I>, <DD><BR>MoaHandle<I>h</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaHandle</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">h</FONT></I></CODE><DD><CODE>MoaHandle</CODE>Previously allocated handle <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD>Size of handle h </DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Returns the logical size of the handle h. The value returnedwill always be the exact value passed when the handle was allocatedor resized using the <TT><FONT SIZE=2 FACE="Courier">Alloc()</FONT></TT>,<TT><FONT SIZE=2 FACE="Courier">ZeroAlloc()</FONT></TT>, or <TT><FONT SIZE=2 FACE="Courier">Resize()</FONT></TT>methods. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="Lock">Lock()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>Lock(PIMoaHandle<I>This</I>, <DD><BR>MoaHandle<I>h</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaHandle</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">h</FONT></I></CODE><DD><CODE>MoaHandle</CODE>Previously allocated handle to lock<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD>Pointer to start of handle's storage area </DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Call this method to lock the handle h in memory. This routinenever returns NULL; it always return a valid pointer (unless thehandle passed in was invalid). The pointer will be aligned toat least a two-byte boundary (but not necessarily to a four-byteboundary). Note that this method doesn't provide lock counting,so nested calls to <TT><FONT SIZE=2 FACE="Courier">Lock()</FONT></TT>have no cumulative effect: the first call of <TT><FONT SIZE=2 FACE="Courier">Unlock()</FONT></TT>will unlock the handle. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="Resize">Resize()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>Resize(PIMoaHandle<I>This</I>, <DD><BR>MoaHandle<I>h</I>, <BR>MoaLong<I>newSize</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaHandle</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">h</FONT></I></CODE><DD><CODE>MoaHandle</CODE>Previously allocated handle <BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">newSize</FONT></I></CODE><DD><CODE>MoaLong</CODE>New size to allocated for handle <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD>TRUE if resized, FALSE if not </DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Attempts to resize the handle h to be at least newSize byteslong. If the request can be satisfied, this method resizes thehandle and returns TRUE. Returns FALSE if the handle h can't beresized or is locked. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="Unlock">Unlock()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>Unlock(PIMoaHandle<I>This</I>, <DD><BR>MoaHandle<I>h</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaHandle</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">h</FONT></I></CODE><DD><CODE>MoaHandle</CODE>Previously allocated handle <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD>void </DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Unlocks the given handle and invalidates any pointers to it.<BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="ZeroAlloc">ZeroAlloc()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>ZeroAlloc(PIMoaHandle<I>This</I>, <DD><BR>MoaLong<I>cb</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaHandle</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">cb</FONT></I></CODE><DD><CODE>MoaLong</CODE>Integer representing size of memory blockto allocate <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD>Handle to newly allocated memory </DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Allocates and returns a relocatable memory block of at leastcb bytes in size. The memory is zeroed out. If the request cannotbe satisfied, NULL is returned. <BR></DL><P><BR><hr width=45% align=left><P><A HREF="../copyrite.htm" >Copyright &#169; 1995, 1996, 1997, 1998, 1999 Macromedia, Inc.</A></BODY><!--#include virtual="/uber/html/footer.html" --></html>
<HTML><HEAD><TITLE>MOA Types and Miscellaneous API</TITLE></HEAD><body bgcolor="#FFFFFF"  link="#ff3300" alink="#ff3300" vlink="#333399"><P><A HREF="../moadg/index.htm">MOA Developer's Guide</A><BR><A HREF="index.htm">MOA Interfaces</A> | <A HREF="momthndx.htm">MOA Methods</A><HR width=45% align=left><H3><A NAME="RTFToC2"><FONT SIZE=4 face=arial,helvetica,sans-serif>Director 7 Xtra Development Kit: MOA API Reference</FONT></A></H3><H2><FONT SIZE=5 face=arial,helvetica,sans-serif>MOA Types and Miscellaneous API</FONT></H2><HR width=45% align=left><P>This document contains the following sections:<UL><LI><A HREF = "#MOTYPES">MOA Types</A><LI><A HREF = "#MOCONSTS">MOA Constants</A><LI><A HREF = "#MOGLOBS">MOA Globals</A><LI><A HREF = "#MOFUNCS">MOA Functions</A><LI><A HREF = "#MOMACROS">MOA Macros</A><LI><A HREF = "#MOERRS">MOA Errors</A></UL><HR width=45% align=left><H3><FONT SIZE=4 face=arial,helvetica,sans-serif><A NAME="MOTYPES">MOA Types</A></FONT></H3>Defined in: moatypes.h<P>The following standard types are defined by MOA for use in variousinterfaces, including both MOA standard interfaces and applicationspecific interfaces. <BR><h4><font face=arial,helvetica,sans-serif>General types </font></h4><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC3"><A NAME="MoaChar">MoaChar</A>,</A><BR>PMoaChar, <BR>ConstPMoaChar </font></h5><P><TABLE BORDER="2"><TR><TD WIDTH=252><TT>MoaChar</TT> </TD><TD WIDTH=252>Signed character type </TD></TR><TR><TD WIDTH=252><TT>PMoaChar</TT> </TD><TD WIDTH=252>Pointer to null-terminated C string</TD></TR><TR><TD WIDTH=252><TT>ConstPMoaChar</TT> </TD><TD WIDTH=252>Pointer to constant character string</TD></TR></TABLE><BR><BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaBool">MoaBool</A></font></h5><P><P>Boolean value type<P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaByte">MoaByte</A>  </font></h5><P><P>Byte value type<P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaShort">MoaShort</A>  </font></h5><P><P>Short integer type<P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaUshort">MoaUshort</A>  </font></h5><P><P>Unsigned short integer type <P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaLong">MoaLong</A>  </font></h5><P><P>Long integer type<P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaUlong">MoaUlong</A>  </font></h5><P><P>Unsigned long integer type<P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaFixed">MoaFixed</A>  </font></h5><P><P>16.16 fixed-point number <P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaError">MoaError</A>  </font></h5><P><P>Standard error type used as return value to most methods<P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaFloat">MoaFloat</A>  </font></h5><P><P>32-bit IEEE floating point number<P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaDouble">MoaDouble</A>  </font></h5><P><P>Double floating point number. In Metrowerks, defined as a 64-bittype, regardless of &quot;8-byte double&quot; and &quot;Gen 881&quot;;64-bit IEEE floating point number in other environments<P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC14"><A NAME="PMoaVoid">PMoaVoid</A>,</A><BR>ConstPMoaVoid,<BR>PPMoaVoid </font></h5><P><TABLE BORDER=2><TR><TD WIDTH=252><TT>PMoaVoid</TT> </TD><TD WIDTH=252>Pointer to a void type</TD></TR><TR><TD WIDTH=252><TT>ConstPMoaVoid</TT> </TD><TD WIDTH=252>Pointer to a void type constant</TD></TR><TR><TD WIDTH=252><TT>PPMoaVoid</TT> </TD><TD WIDTH=252>Pointer to pointer to a void type constant</TD></TR></TABLE><BR><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaCharParam">MoaCharParam</A>  </font></h5><P><P>Character parameter type; for types &lt; 32 bits, this is thelong-sized versions for argument lists<P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaBoolParam">MoaBoolParam</A>  </font></h5><P><P>Boolean parameter type<P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaWide">MoaWide</A>  </font></h5><P><P>Double long integer, defined differently (but compatibly) forthe two platforms currently supported. On the Macintosh, definedto match the <TT>wide</TT>integer type. In Windows defined to match the <TT>LARGE_INTEGER</TT>type<h4><font face=arial,helvetica,sans-serif>2D Graphics Types </font></h4><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaCoord">MoaCoord</A>  </font></h5><P><TT>MoaCoord</TT> <TT>MoaLong</TT><P>Moa graphic coordinate type<BR><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaPoint">MoaPoint</A>  </font></h5><PRE>typedef struct MoaPoint {        MoaCoord y;        MoaCoord x;} MoaPoint;</PRE><P>Type representing a position in two-dimensional coordinate space.<TT>y</TT> represents the verticalposition of the point, <TT>x</TT>represents the horizontal position. <P><TABLE BORDER="2"><TR><TD WIDTH=252><TT>MoaPoint</TT> </TD><TD WIDTH=252>Structure type </TD></TR><TR><TD WIDTH=252><TT>PMoaPoint</TT></TD><TD WIDTH=252>Pointer type</TD></TR><TR><TD WIDTH=252><TT>ConstPMoaPoint</TT></TD><TD WIDTH=252>Constant pointer type</TD></TR></TABLE><BR><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaRect">MoaRect</A></font></h5><PRE>typedef struct MoaRect {        MoaCoord top;        MoaCoord left;        MoaCoord bottom;        MoaCoord right;} MoaRect;</PRE><P>Structure representing a rectangular area in two-dimensional coordinatespace. <TT>top</TT> representsthe upper bounding coordinate of the area, <TT>left</TT>represents the left side bounding coordinate, <TT>bottom</TT>represents the bottom bounds and <TT>right</TT>represents the right side coordinate. <P><TABLE BORDER=2><TR><TD WIDTH=252><TT>MoaRect</TT></TD><TD WIDTH=252>Structure type</TD></TR><TR><TD WIDTH=252><TT>PMoaRect</TT></TD><TD WIDTH=252>Pointer type</TD></TR><TR><TD WIDTH=252><TT>ConstPMoaRect</TT></TD><TD WIDTH=252>Constant pointer type</TD></TR></TABLE><BR><h4><font face=arial,helvetica,sans-serif><A NAME="MOSTRMTYPE">IMoaStream types</A></font></h4><BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaStreamPosition">MoaStreamPosition</A> </font></h5><P>Type for specifying current position<P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaStreamCount">MoaStreamCount</A> </font></h5><P>Type for specifying size<h4><font face=arial,helvetica,sans-serif><A NAME="MOFILETYPE">IMoaFile types</A></font></h4><BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaSystemFileSpec">MoaSystemFileSpec</A> </font></h5><P><TT>typedef MoaChar MoaSystemFileSpec[MOA_MAX_PATHNAME]<BR></TT><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="MoaFileEachProc">MoaFileEachProc</A> </font></h5><PRE>MoaError MoaFileEachProc(        ConstPMoaSystemFileSpec <I>pSpec</I>,        ConstPMoaChar <I>pFileName</I>,        MoaBoolParam <I>isDirectory</I>,         MoaWide <I>lastModDate</I>,        MoaUlong <I>fileType</I>,        PMoaVoid <I>refCon</I>)</PRE>Enumeration function prototype for <A HREF = "file.htm#EachFile">IMoaFile::EachFile()</A> method.<P><HR width=45% align=left><H3><FONT SIZE=4 face=arial,helvetica,sans-serif><A NAME="MOCONSTS">MOA Constants</A></FONT></H3><P>Defined in: moatypes.h<h4><font face=arial,helvetica,sans-serif>Boolean Constants </font></h4><P><TABLE BORDER=2><TR><TD WIDTH=252><TT>TRUE</TT></TD><TD WIDTH=252>1</TD></TR><TR><TD WIDTH=252><TT>FALSE</TT></TD><TD WIDTH=252>0</TD></TR></TABLE><h4><font face=arial,helvetica,sans-serif><A NAME="MOINFOCONST">IMoaAppInfo constants</A></font></h4><P>These constants are used for obtaining information about the Xtra'shost application through the <A HREF="appinfo.htm" >IMoaAppInfo</A>callback interface. The desiredInfo parameter specifies the typeof information being requested; it can be one of the followingenumerated constants:<BR><P><TABLE BORDER=2><TR><TD WIDTH=205>Constant</TD><TD WIDTH=299>Description</TD></TR><TR><TD WIDTH=205><CODE>kMoaAppInfo_SerialNumber</CODE> </TD><TD WIDTH=299>Application serial number as a string. Format of a serial number is unspecified, except that it is guaranteed to be less than 256 bytes long. An empty string may be returned.</TD></TR><TR><TD WIDTH=205><CODE>kMoaAppInfo_RunMode</CODE> </TD><TD WIDTH=299>RunMode of the app as a string. Defined modes are: <BR>&quot;Author&quot; authoring application<BR>&quot;Projector&quot; projector-only application<BR>These values are not localized. </TD></TR><TR><TD WIDTH=205><CODE>kMoaAppInfo_UserName</CODE></TD><TD WIDTH=299>the user name entered at registration.</TD></TR><TR><TD WIDTH=205><CODE>kMoaAppInfo_OrganizationName</CODE></TD><TD WIDTH=299>the company/organization name entered at registration.</TD></TR><TR><TD WIDTH=205><CODE>kMoaAppInfo_AppFileSpec</CODE></TD><TD WIDTH=299>a MoaSystemFileSpec to the application/projector executable. This is a MoaSystemFileSpec, not a character string, thus on the Macintosh you will receive an FSSpec.</TD></TR><TR><TD WIDTH=205><CODE>kMoaAppInfo_ProductName</CODE></TD><TD WIDTH=299>The name of the product, minus version information. This is not localized. Currently defined are &quot;Director&quot;, &quot;SoundEdit&quot;, &quot;FreeHand&quot;</TD></TR><TR><TD WIDTH=205><CODE>kMoaAppInfo_ProductVersion</CODE></TD><TD WIDTH=299>Version of the product, generally a character string representing a number, though it may include letters as well, e.g., &quot;5.0&quot;,&quot;5.0a&quot;, &quot;5.5&quot;</TD></TR></TABLE><BR>Note that not all apps will support all these; you must be preparedfor an app to return kMoaErr_NoSuchKey for any or all of these.additional values may be added in the future.<BR><BR>The parameters <TT><I>pInfoBuffer</I></TT>and <TT><I>infoBufferLen</I></TT>provide the application with a buffer to write the correspondinginformation to.<BR><h4><font face=arial,helvetica,sans-serif><A NAME="MODICTCONST">IMoaDict constants</A></font></h4><H6><font face=arial,helvetica,sans-serif><A NAME="RTFToC33">Entry Constant</A></font></h6><P><TABLE BORDER=2><TR><TD WIDTH=252><CODE>MoaDictTypeID</CODE> </TD><TD WIDTH=252>32 bit numbers representing the type of an entry. </TD></TR></TABLE><BR>The first 2^16 MoaDictTypeID values are reserved by MOA. (Thetypes IDs enumerated so far are listed above.) Type ID valuesabove the reserved range are dynamically assigned at runtime andmap to an object exporting the <TT>IMoaDict</TT>interface. These can be looked up either using the well knowntypes dictionary or by enumerating MOA interfaces.<BR><H6><font face=arial,helvetica,sans-serif><A NAME="RTFToC34">Data Type Constants</A></font></h6><P><TABLE BORDER=2><TR><TD WIDTH=216><TT>kMoaDictType_Bogus</TT> </TD><TD WIDTH=288>Illegal entry type.</TD></TR><TR><TD WIDTH=216><TT>kMoaDictType_Long</TT> </TD><TD WIDTH=288><TT>MoaLong</TT></TD></TR><TR><TD WIDTH=216><TT>kMoaDictType_Float</TT> </TD><TD WIDTH=288>32 bit IEEE single-precision floating-point number </TD></TR><TR><TD WIDTH=216><TT>kMoaDictType_Wide</TT> </TD><TD WIDTH=288><TT>MoaWide</TT></TD></TR><TR><TD WIDTH=216><TT>kMoaDictType_Bool</TT> </TD><TD WIDTH=288><TT>MoaBool</TT></TD></TR><TR><TD WIDTH=216><TT>kMoaDictType_MoaID</TT> </TD><TD WIDTH=288><TT>MoaID</TT></TD></TR><TR><TD WIDTH=216><TT>kMoaDictType_Bytes</TT> </TD><TD WIDTH=288>Arbitrary bytes</TD></TR><TR><TD WIDTH=216><TT>kMoaDictType_CString</TT> </TD><TD WIDTH=288>Null-terminated C String</TD></TR><TR><TD WIDTH=216><TT>kMoaDictType_Dict</TT> </TD><TD WIDTH=288><TT>PIMoaDict</TT> (see note)</TD></TR><TR><TD WIDTH=216><TT>kMoaDictType_PIMoaUnknown</TT> </TD><TD WIDTH=288>Arbitrary MOA interface. When storing interfaces in a dictionary, calling <TT>Put()</TT> on the containing <TT>IMoaDict</TT> calls <TT>AddRef()</TT> on the interface being stored; calling <TT>Remove()</TT> on the <TT>IMoaDict</TT> calls <TT>Release()</TT> on the interface. </TD></TR></TABLE><BR><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC35">Runtime Key Identifier Constant</A><BR></font></h5><P><TT>MOADICT_RUNTIME_KEY_PREFIX</TT><TT>&quot;_rt_&quot; <BR><BR></TT>By convention, all keys beginning with these characterswill never be written to persistent storage; they are runtime-onlykeys.<BR><h4><font face=arial,helvetica,sans-serif><A NAME="MOSTRMCONST">IMoaStream constants</A></font></h4><P>These constants are used with methods of the <A HREF="stream.htm" >IMoaStream</A>interface.<H6><A NAME="RTFToC37">Access Mode Constants</A></h6><P><TABLE BORDER=2><TR><TD WIDTH=252><TT>kMoaStreamOpenAccess_ReadOnly </TT></TD><TD WIDTH=252>Open stream for reading</TD></TR><TR><TD WIDTH=252><TT>kMoaStreamOpenAccess_ReadWrite </TT></TD><TD WIDTH=252>Open stream for reading and writing</TD></TR><TR><TD WIDTH=252><TT>kMoaStreamOpenAccess_WriteOnly </TT></TD><TD WIDTH=252>Open stream for writing</TD></TR></TABLE><BR><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC38">ReadAhead Limit Constants</A></font></h5><P><TABLE BORDER=2><TR><TD WIDTH=252><TT>kMoaStreamReadAheadLimit</TT> </TD><TD WIDTH=252>Bytes available to ReadAhead() (value may be implementation dependent)</TD></TR></TABLE><BR><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC39">Set Position Constants</A></font></h5><P>These constants are passed to <A HREF="stream.htm#Open" >Open()</A>to specify use of <A HREF="stream.htm#SetPosition" >SetPosition()</A>.This API enables the stream to optimize for particular seekingneeds. <BR><P><TABLE BORDER=2><TR><TD WIDTH=252><TT>kMoaStreamSetPositionType_None</TT> </TD><TD WIDTH=252>Never calls SetPosition()</TD></TR><TR><TD WIDTH=252><TT>kMoaStreamSetPositionType_Expensive</TT> </TD><TD WIDTH=252>Rarely calls SetPosition(); don't optimize</TD></TR><TR><TD WIDTH=252><TT>kMoaStreamSetPositionType_Cheap </TT></TD><TD WIDTH=252>Often calls SetPosition(); optimize seek</TD></TR></TABLE><h4><font face=arial,helvetica,sans-serif><A NAME="MOFILECONST">IMoaFile constants</A></font></h4><P>These constants are used with methods of the <A HREF="file.htm" >IMoaFile</A>interface.  <P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC41">File access constants</A></font></h5><PRE>kMoaFileAccessPerm_ReadkMoaFileAccessPerm_Write</PRE><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC42">File name size constants</A></font></h5><PRE>MOA_MAX_PATHNAME 		(260)MOA_MAX_FILENAME 		(256)</PRE><P><HR width=45% align=left><H3><FONT SIZE=4 face=arial,helvetica,sans-serif><A NAME="MOGLOBS">MOA Globals</A></FONT></H3><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC44">gXtraFileRef</A> </font></h4><P>Defined in: moatxtra.h<P>MOA reference to the Xtra object file. This value is a <TT>MoaFileRef</TT>,a MOA-specific type used only as an argument to the <A HREF="callback.htm" >IMoaCallback</A>interface methods <A HREF="callback.htm#MoaBeginUsingResources" >MoaBeginUsingResources()</A>and <A HREF="callback.htm#MoaEndUsingResources" >MoaEndUsingResources()</A>.This value enables MOA to identify the resource file associatedwith an Xtra. <BR><P><HR width=45% align=left><H3><FONT SIZE=4 face=arial,helvetica,sans-serif><A NAME="MOFUNCS">MOA Functions</A></FONT></H3><h4><font face=arial,helvetica,sans-serif>MOAID comparison function</font></h4><P>Defined in: moaxtra.h<P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC46"><A NAME="MoaEqualID">MoaEqualID()</A></A></font></h5><PRE>MoaLong MoaEqualID(ConstPMoaID <TT><I>a</I></TT>,        ConstPMoaID <TT><I>b</I></TT>)</PRE><P><TABLE BORDER="2"><TR><TD WIDTH=49><TT><I>a</I></TT>, <TT><I>b</I></TT></TD><TD WIDTH=216>MoaIDs to compare</TD></TR></TABLE><BR>Returns Boolean result of comparison<BR><BR>Use this function to test the values in two MoaIDs, for example,to find an entry for a particular interface in the cache. <BR><P><HR width=45% align=left><H3><FONT SIZE=4 face=arial,helvetica,sans-serif><A NAME="MOMACROS">MOA Macros</A></FONT></H3><h4><font face=arial,helvetica,sans-serif>Wide Integer Handlers </font></h4><P>Defined in: moatypes.h<P>The following macros are defined in MOA for use in evaluatingand converting values of type <CODE>s</CODE>. <BR><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC49"><A NAME="LONG_TO_WIDE">LONG_TO_WIDE</A>()</A></font></h5><P><TT>LONG_TO_WIDE(<I>L</I>, <I>W</I>)<BR></TT><P><TABLE BORDER=2><TR><TD WIDTH=43><TT><I>L</I> </TT></TD><TD WIDTH=354>Long integer to convert</TD></TR><TR><TD WIDTH=43><TT><I>W</I> </TT></TD><TD WIDTH=354>Wide integer to contain the return value</TD></TR></TABLE><P>Converts the <TT>MoaLong</TT>integer <TT><I>L</I></TT> toa <TT>MoaWide</TT> integerand puts the result in <TT><I>W</I></TT>.<BR><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC50"><A NAME="WIDE_ADD_WIDE">WIDE_ADD_WIDE</A>()</A></font></h5><P><TT>WIDE_ADD_WIDE(<I>x</I>, <I>y</I>)<BR></TT><P><TABLE BORDER=2><TR><TD WIDTH=43><TT><I>x</I> </TT></TD><TD WIDTH=354><CODE>MoaWide</CODE> to add and return result</TD></TR><TR><TD WIDTH=43><TT><I>y</I> </TT></TD><TD WIDTH=354><CODE>MoaWide</CODE> to add</TD></TR></TABLE><BR><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC51"><A NAME="WIDE_EQ_ZERO">WIDE_EQ_ZERO</A>()</A></font></h5><P><TT>WIDE_EQ_ZERO(<I>x</I>)<BR></TT><P><TABLE BORDER=2><TR><TD WIDTH=43><TT><I>W</I> </TT></TD><TD WIDTH=354>Wide integer to test</TD></TR></TABLE><P><BR>Tests the <TT>MoaWide</TT>value <TT><I>x</I></TT> tosee if it represents zero.  Returns MoaBool result of test<BR><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC52"><A NAME="WIDE_FITS">WIDE_FITS</A>()</A></font></h5><P><TT>WIDE_FITS(<I>W</I>)</TT><P><TABLE BORDER=2><TR><TD WIDTH=43><TT><I>W</I> </TT></TD><TD WIDTH=353>Wide integer to test</TD></TR></TABLE><P><BR>Returns: MoaBool result of test<BR><BR>Tests whether the <TT>MoaWide</TT>integer <TT><I>W</I></TT> canbe converted to a <TT>MoaLong</TT>.<BR><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC53"><A NAME="WIDE_GT_ZERO">WIDE_GT_ZERO</A>()</A></font></h5><P><TT>WIDE_GT_ZERO(<I>x</I>) <BR><BR><I>W</I> </TT>Wide integer to test<BR><BR>Returns MoaBool result of test<BR><BR>Tests the <TT>MoaWide</TT>value <TT><I>x</I></TT> tosee if it represents a positive number. <BR><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC54"><A NAME="WIDE_LT_ZERO">WIDE_LT_ZERO</A>()</A></font></h5><TT>WIDE_LT_ZERO(x)</TT><TABLE BORDER=2><TR><TD WIDTH=257><TT><I>X</I> </TT></TD><TD WIDTH=257>Wide integer to test</TD></TR></TABLE><P><BR>Returns: MoaBool result of test<P>Tests the <TT>MoaWide</TT>value <TT><I>x</I></TT> tosee if it represents a negative number. <P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC55"><A NAME="WIDE_NEGATE">WIDE_NEGATE</A>()</A></font></h5><P><TT>WIDE_NEGATE(<I>x</I>)<BR></TT><TABLE BORDER=2><TR><TD COLSPAN=2 WIDTH=252><P><TT><I>x</I> </TT></TD><TD WIDTH=-251><CODE>MoaWide</CODE> to negate and return result</TD></TR></TABLE><P>Negates the <TT>MoaWide</TT>value <TT><I>x</I></TT>.<BR><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC56"><A NAME="WIDE_TO_LONG">WIDE_TO_LONG</A>()</A></font></h5><P><TT>WIDE_TO_LONG(<I>W</I>, <I>L</I>)<BR></TT><P><TABLE BORDER=2><TR><TD WIDTH=37><TT><I>W</I> </TT></TD><TD WIDTH=360>Wide integer to convert</TD></TR><TR><TD WIDTH=37><TT><I>L</I> </TT></TD><TD WIDTH=360>Long integer to contain the return value</TD></TR></TABLE><P><BR>Converts the <TT>MoaWide</TT>integer <TT><I>W</I></TT> toa <TT>MoaLong</TT> integerand puts the result in <TT><I>L</I></TT>.<h4><font face=arial,helvetica,sans-serif>2D Graphics Macros<BR></font></h4><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC58"><A NAME="MoaToMacPoint">MoaToMacPoint</A>()</A></font></h5><P><TT>MoaToMacPoint(<I>moa</I>,<I>mac</I>)<BR></TT><P><TABLE BORDER=2><TR><TD WIDTH=55><TT><I>moa</I></TT></TD><TD WIDTH=342>MOA point to convert</TD></TR><TR><TD WIDTH=55><TT><I>mac</I></TT></TD><TD WIDTH=342>Mac point to receive the result</TD></TR></TABLE><BR><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC59"><A NAME="MacToMoaPoint">MacToMoaPoint</A>()</A></font></h5><P><TT>MacToMoaPoint(<I>mac</I>,<I> moa</I>)<BR></TT><P><TABLE BORDER=2><TR><TD WIDTH=55><TT><I>mac</I></TT></TD><TD WIDTH=342>Mac point to convert</TD></TR><TR><TD WIDTH=55><TT><I>moa</I></TT></TD><TD WIDTH=342>MOA point to receive the result</TD></TR></TABLE><BR><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC60"><A NAME="MoaToMacRect">MoaToMacRect</A>()</A></font></h5><P><TT>MoaToMacRect(<I>a</I>,<I>b</I>)<BR></TT><P><TABLE BORDER=2><TR><TD WIDTH=55><TT><I>a</I></TT></TD><TD WIDTH=342>MOA rect to convert</TD></TR><TR><TD WIDTH=55><TT><I>b</I></TT></TD><TD WIDTH=342>Mac rect to receive the result</TD></TR></TABLE><P><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC61"><A NAME="MacToMoaRect">MacToMoaRect</A>()</A></font></h5><P><TT>MacToMoaRect(<I>a</I>,<I> b</I>)<BR></TT><P><TABLE BORDER=2><TR><TD WIDTH=55><TT><I>a</I></TT></TD><TD WIDTH=342>Mac rect to convert</TD></TR><TR><TD WIDTH=55><TT><I>b</I></TT></TD><TD WIDTH=342>MOA rect to receive the result</TD></TR></TABLE><BR><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC62"><A NAME="MoaToWinPoint">MoaToWinPoint</A>()</A></font></h5><P><TT>MoaToWinPoint(<I>moa</I>,<I>win</I>)<BR></TT><P><TABLE BORDER=2><TR><TD WIDTH=55><TT><I>moa</I></TT></TD><TD WIDTH=342>MOA point to convert</TD></TR><TR><TD WIDTH=55><TT><I>win</I></TT></TD><TD WIDTH=342>Windows point to receive the result</TD></TR></TABLE><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC63"><A NAME="WinToMoaPoint">WinToMoaPoint</A>()</A></font></h5><P><TT>WinToMoaPoint(<I>win, moa</I>)<BR></TT><P><TABLE BORDER=2><TR><TD WIDTH=55><TT><I>win</I></TT></TD><TD WIDTH=342>Windows point to convert</TD></TR><TR><TD WIDTH=55><PRE><TT><I>moa</I></TT></PRE></TD><TD WIDTH=342>MOA point to receive the result</TD></TR></TABLE><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC64"><A NAME="MoaToWinRect">MoaToWinRect</A>()</A></font></h5><P><TT>MoaToWinRect(<I>a</I>,<I>b</I>)<BR></TT><P><TABLE BORDER=2><TR><TD WIDTH=55><PRE><TT><I>a</I></TT></PRE></TD><TD WIDTH=342>Moa rect to convert</TD></TR><TR><TD WIDTH=55><PRE><TT><I>b</I></TT></PRE></TD><TD WIDTH=342>Windows rect to receive result</TD></TR></TABLE><BR><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC65"><A NAME="WinToMoaRect">WinToMoaRect</A>()</A></font></h5><P><TT>WinToMoaRect(<I>a</I>,<I> b</I>)<BR></TT><P><TABLE BORDER=2><TR><TD WIDTH=55><PRE><TT><I>a</I></TT></PRE></TD><TD WIDTH=342>Windows rect to convert</TD></TR><TR><TD WIDTH=55><PRE><TT><I>b</I></TT></PRE></TD><TD WIDTH=342>MOA rect to receive result</TD></TR></TABLE><h4><font face=arial,helvetica,sans-serif>Error Code Generator <BR></font></h4><P><BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC67"><A NAME="MAKE_MOAERR">MAKE_MOAERR</A>()</A></font></h5><P><TT>MAKE_MOAERR(<I>code</I>)<BR></TT><P><TABLE BORDER=2><TR><TD WIDTH=55><TT><I>code</I></TT> </TD><TD WIDTH=378>MoaLong to convert to standard MOA error code</TD></TR></TABLE><P><BR>Converts <TT><I>code</I></TT>to a value that conforms with standard MOA error code conventions.<BR><P><HR width=45% align=left><H3><FONT SIZE=4 face=arial,helvetica,sans-serif><A NAME="MOERRS">MOA Errors</A></FONT></H3><P>Header files: moatypes.h<BR><BR><BR>The following constants provide standard return values for MOAmethods that return MoaError. Certain MOA and application-specificinterfaces define additional error codes; see interface descriptionsfor details. <BR><h4><font face=arial,helvetica,sans-serif>Success code </font></h4><P>This error code is the standard return value for successful MOAmethod calls.<BR><P><TABLE BORDER=2><TR><TD WIDTH=252><TT>kMoaErr_NoErr</TT> </TD><TD WIDTH=252>Successful call</TD></TR></TABLE><BR><h4><font face=arial,helvetica,sans-serif>Calling errors </font></h4><P>The following codes represent standard errors that may be returnedfrom a number of MOA methods, in interfaces implemented by theapplication and in the interfaces you implement. Your code mayencounter these errors when calling MOA methods; you can writeyour code to handle these errors in the appropriate ways. Yourcode should return these codes when it encounters correspondingerror conditions. <BR><P><TABLE BORDER=2><TR><TD WIDTH=252><TT>kMoaErr_BadParam</TT> </TD><TD WIDTH=252>Bogus argument to a method</TD></TR><TR><TD WIDTH=252><TT>kMoaErr_OutOfMem</TT> </TD><TD WIDTH=252>Core &quot;memory full&quot; error</TD></TR><TR><TD WIDTH=252><TT>kMoaErr_XtraInUse</TT> </TD><TD WIDTH=252>Xtra has objects in use</TD></TR><TR><TD WIDTH=252><TT>kMoaErr_BadInterface</TT> </TD><TD WIDTH=252>Interface not recognized</TD></TR><TR><TD WIDTH=252><TT>kMoaErr_BadClass</TT> </TD><TD WIDTH=252>Class not recognized</TD></TR><TR><TD WIDTH=252><TT>kMoaErr_FileNotFound</TT> </TD><TD WIDTH=252>File not found or not opened</TD></TR><TR><TD WIDTH=252><TT>kMoaErr_XtraNotFound</TT> </TD><TD WIDTH=252>Xtra not found in file</TD></TR><TR><TD WIDTH=252><TT>kMoaErr_FuncNotFound</TT> </TD><TD WIDTH=252>Function missing from Xtra</TD></TR><TR><TD WIDTH=252><TT>kMoaErr_ClassInfoNotFound</TT> </TD><TD WIDTH=252>Class information missing from Xtra</TD></TR><TR><TD WIDTH=252><TT>kMoaErr_ConnectionNotOpen</TT> </TD><TD WIDTH=252>Xtra not properly opened (internal error)</TD></TR></TABLE><P><h4><font face=arial,helvetica,sans-serif>Initialization errors </font></h4><P>The following codes enable Xtras to report when they can't runon a given configuration. Xtras should return these codes to indicatefailure in their <A HREF="register.htm" >IMoaRegister</A>or <A HREF="intfrmdc.htm" >IMoaInitFromDict</A>interface. <BR><P><TABLE BORDER=2><TR><TD WIDTH=262><TT>kMoaErr_NotEnoughCPU</TT> </TD><TD WIDTH=242>Xtra requires newer CPU</TD></TR><TR><TD WIDTH=262><TT>kMoaErr_NotEnoughFPU</TT> </TD><TD WIDTH=242>Xtra requires an FPU</TD></TR><TR><TD WIDTH=262><TT>kMoaErr_NotEnoughHardware</TT> </TD><TD WIDTH=242>Extra hardware required</TD></TR><TR><TD WIDTH=262><TT>kMoaErr_NotEnoughSSW</TT> </TD><TD WIDTH=242>System software incompatible</TD></TR><TR><TD WIDTH=262><TT>kMoaErr_NotEnoughExtraSSW</TT> </TD><TD WIDTH=242>Missing extensions (e.g., QuickTime)</TD></TR><TR><TD WIDTH=262><TT>kMoaErr_NotEnoughDiskSpace</TT> </TD><TD WIDTH=242>Need more free space on disk</TD></TR><TR><TD WIDTH=262><TT>kMoaErr_NoUnusedFreed</TT> </TD><TD WIDTH=242>MoaFreeUnused couldn't free mem</TD></TR><TR><TD WIDTH=262><TT>kMoaErr_RequiredCallbackMissing</TT> </TD><TD WIDTH=242>A required interface wasn't supplied</TD></TR></TABLE><BR><h4><font face=arial,helvetica,sans-serif><A NAME="MODICTERRS">IMoaDict errors</A></font></h4><P>Errors returned by methods of <A HREF="dict.htm" >IMoaDict</A>.<P><TABLE BORDER=2><TR><TD WIDTH=252><TT>kMoaDictErr_NotFound</TT> </TD><TD WIDTH=252>Lookup of a nonexistent key.</TD></TR><TR><TD WIDTH=252><TT>kMoaDictErr_WrongType</TT> </TD><TD WIDTH=252>Key exists but holds different type than requested.</TD></TR><TR><TD WIDTH=252><TT>kMoaDictErr_CantWrite</TT> </TD><TD WIDTH=252>Attempt to put or remove value where not allowed (e.g. structure dicts).</TD></TR><TR><TD WIDTH=252><TT>kMoaDictErr_BufferTooSmall </TT></TD><TD WIDTH=252>Value won't fit into the buffer you passed.</TD></TR></TABLE><P><h4><font face=arial,helvetica,sans-serif><A NAME="MOFILEERRS">IMoaFile errors</A></font></h4><P>Errors returned by methods of <A HREF="file.htm" >IMoaFile</A>.<P><TABLE BORDER=2><TR><TD WIDTH=252>kMoaFileErr_IoError</TD><TD WIDTH=252></TD></TR><TR><TD WIDTH=252>kMoaFileErr_BufferTooSmall </TD><TD WIDTH=252></TD></TR><TR><TD WIDTH=252>kMoaFileErr_DuplicateSpec</TD><TD WIDTH=252></TD></TR><TR><TD WIDTH=252>kMoaFileErr_DiskFull</TD><TD WIDTH=252></TD></TR><TR><TD WIDTH=252>kMoaFileErr_FileBusy</TD><TD WIDTH=252></TD></TR><TR><TD WIDTH=252>kMoaFileErr_BadFileSpec</TD><TD WIDTH=252></TD></TR></TABLE><P><h4><font face=arial,helvetica,sans-serif><A NAME="MOSTRMERRS">IMoaStream errors</A></font></h4><P>Errors returned by methods of <A HREF="stream.htm" >IMoaStream</A>.<P><TABLE BORDER=2><TR><TD WIDTH=247><TT>kMoaStreamErr_StreamNotOpen</TT> </TD><TD WIDTH=257>Returned when calling any method before <TT>Open()</TT></TD></TR><TR><TD WIDTH=247><TT>kMoaStreamErr_StreamAlreadyOpen</TT></TD><TD WIDTH=257>Returned when re-calling Open()</TD></TR><TR><TD WIDTH=247><TT>kMoaStreamErr_BadParameter</TT> </TD><TD WIDTH=257>Bad parameter</TD></TR><TR><TD WIDTH=247><TT>kMoaStreamErr_IoError</TT> </TD><TD WIDTH=257>Read/write/positioning error</TD></TR><TR><TD WIDTH=247><TT>kMoaStreamErr_ReadPastEnd</TT> </TD><TD WIDTH=257>Attempted to read past end</TD></TR><TR><TD WIDTH=247><TT>kMoaStreamErr_BadAccessMode</TT> </TD><TD WIDTH=257>Not an allowable read/write parameter</TD></TR><TR><TD WIDTH=247><TT>kMoaStreamErr_BadSetPositionMode</TT> </TD><TD WIDTH=257>Not an allowable seek parameter</TD></TR><TR><TD WIDTH=247><TT>kMoaStreamErr_ReadAheadTooFar</TT> </TD><TD WIDTH=257>Requested too many bytes from ReadAhead()</TD></TR><TR><TD WIDTH=247><TT>kMoaStreamErr_WrotePastEnd </TT></TD><TD WIDTH=257>Attempted to write too much: disk full, etc.</TD></TR></TABLE><BR><BR><hr width=45% align=left><P><A HREF="../copyrite.htm">Copyright &#169; 1995, 1996, 1997, 1998, 1999 Macromedia, Inc.</A></BODY><!--#include virtual="/uber/html/footer.html" --></html>
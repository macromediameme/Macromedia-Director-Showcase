<HTML><HEAD><TITLE>IMoaFile</TITLE></HEAD><body bgcolor="#FFFFFF"  link="#ff3300" alink="#ff3300" vlink="#333399"><A HREF="../moadg/index.htm">MOA Developer's Guide</A><BR><A HREF="index.htm">MOA Interfaces</A> | <A HREF="momthndx.htm">MOA Methods</A> | <A HREF="motypndx.htm">MOA Types and Misc API</A><hr width=45% align=left><h2><font face=arial,helvetica,sans-serif>IMoaFile</font></h2><hr width=45% align=left><P>Interface ID: <CODE>IID_IMoaFile<BR></CODE>Pointer type: <CODE>PIMoaFile<BR></CODE>Inheritance: <A HREF = "unknown.htm"><FONT SIZE=2>IMoaUnknown</FONT></A><BR>Header file: <A HREF = "../../include/moafile.h">moafile.h</A><BR><h3><font face=arial,helvetica,sans-serif>Description</font></h3><DL><DT><DD><BR>The <TT><FONT SIZE=2 FACE="Courier">IMoaFile</FONT></TT> interfaceis provided by the <TT><FONT SIZE=2 FACE="Courier">MoaFile</FONT></TT>Xtra. This interface provides platform-independent methods torepresent a specific file in a directory structure.<BR><BR><TT><FONT SIZE=2 FACE="Courier">MoaFile</FONT></TT> is packagedas an independent Xtra, containing just the <TT><FONT SIZE=2 FACE="Courier">CMoaFile</FONT></TT>class. <TT><FONT SIZE=2 FACE="Courier">CMoaFile</FONT></TT> implementsthe <TT><FONT SIZE=2 FACE="Courier">IMoaFile</FONT></TT> interface,as well as an <TT><FONT SIZE=2 FACE="Courier">IMoaStream</FONT></TT>interface used in conjunction with <TT><FONT SIZE=2 FACE="Courier">IMoaFile</FONT></TT>(see the <TT><FONT SIZE=2 FACE="Courier">IMoaFile::GetStream()</FONT></TT>method for details).<BR><BR>Call the method <A HREF = "callback.htm#MoaCreateInstance"><FONT SIZE=2>IMoaCallback::MoaCreateInstance()</FONT></A>using the arguments <TT><FONT SIZE=2 FACE="Courier">&amp;CLSID_CMoaFile</FONT></TT>and <TT><FONT SIZE=2 FACE="Courier">&amp;IID_IMoaFile</FONT></TT>to create a new instance of <TT><FONT SIZE=2 FACE="Courier">IMoaFile</FONT></TT>for your use. After creating it, use <TT><FONT SIZE=2 FACE="Courier">SetSpec()</FONT></TT>,<TT><FONT SIZE=2 FACE="Courier">SetSysSpec()</FONT></TT>, or <TT><FONT SIZE=2 FACE="Courier">SetPathnameSpec()</FONT></TT>to fill in the file information.<BR><BR>To access a stream to the given file, call the <TT><FONT SIZE=2 FACE="Courier">GetStream()</FONT></TT>method. Remember that both the <TT><FONT SIZE=2 FACE="Courier">MoaStream</FONT></TT>and the <TT><FONT SIZE=2 FACE="Courier">MoaFile</FONT></TT> belongto you; you must release both. The <TT><FONT SIZE=2 FACE="Courier">MoaStream</FONT></TT>may or may not be an interface onto the same object as the <TT><FONT SIZE=2 FACE="Courier">MoaFile</FONT></TT>;this is an implementation detail that is undefined.<BR><BR></DL><P><h3><font face=arial,helvetica,sans-serif>See also</font></h3><DL><DT><DD><A href="motypndx.htm#MOFILETYPE">IMoaFile types</A>, <A href="motypndx.htm#MOFILECONST">IMoaFile constants</A>, <A href="motypndx.htm#MOFILEERRS">IMoaFile errors</A></DL><h3><font face=arial,helvetica,sans-serif>Methods</font></h3><DL><DT><DD></DL><h4><font face=arial,helvetica,sans-serif>File specification </font></h4><DL><DT><DD><A HREF = "#SetSpec">SetSpec()</A> <BR><A HREF = "#SetNewTempSpec">SetNewTempSpec()</A> <BR><A HREF = "#GetSysSpec">GetSysSpec()</A> <BR><A HREF = "#SetSysSpec">SetSysSpec()</A> <BR><A HREF = "#GetPathnameSpec">GetPathnameSpec()</A> <BR><A HREF = "#SetPathnameSpec">SetPathnameSpec()</A> </DL><h4><font face=arial,helvetica,sans-serif>Creating and deleting files </font></h4><DL><DT><DD><A HREF = "#CreateFile">CreateFile()</A> <BR><A HREF = "#CreateDirectory">CreateDirectory()</A> <BR><A HREF = "#Delete">Delete()</A> <BR><A HREF = "#Clone">Clone()</A> </DL><h4><font face=arial,helvetica,sans-serif>Exchanging files </font></h4><DL><DT><DD><A HREF = "#SwapFile">SwapFile()</A> </DL><h4><font face=arial,helvetica,sans-serif>Naming files </font></h4><DL><DT><DD><A HREF = "#GetFilename">GetFilename()</A> <BR><A HREF = "#SetFilename">SetFilename()</A> <BR><A HREF = "#Rename">Rename()</A> </DL><h4><font face=arial,helvetica,sans-serif>File information </font></h4><DL><DT><DD><A HREF = "#GetSize">GetSize()</A> <BR><A HREF = "#SetSize">SetSize()</A> <BR><A HREF = "#GetAccess">GetAccess()</A> <BR><A HREF = "#GetDates">GetDates()</A> <BR><A HREF = "#GetDirectory">GetDirectory()</A> <BR><A HREF = "#IsDirectory">IsDirectory()</A> <BR><A HREF = "#IsExisting">IsExisting()</A> </DL><h4><font face=arial,helvetica,sans-serif>Comparing files </font></h4><DL><DT><DD><A HREF = "#IsSameFile">IsSameFile()</A> </DL><h4><font face=arial,helvetica,sans-serif>Iterating </font></h4><DL><DT><DD><A HREF = "#EachFile">EachFile()</A> </DL><h4><font face=arial,helvetica,sans-serif>Accessing file data </font></h4><DL><DT><DD><A HREF = "#GetStream">GetStream()</A> </DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="Clone">Clone()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>Clone(PIMoaFile<I>This</I>, <DD><BR>struct IMoaFile FAR * FAR *<I>ppFile</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">ppFile</FONT></I></CODE><DD>struct IMoaFile FAR * FAR *<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><TT><FONT SIZE=2 FACE="Courier">Clone()</FONT></TT> returnsa copy of the <TT><FONT SIZE=2 FACE="Courier">MoaFile</FONT></TT>with the same file spec. It does NOT duplicate, copy, or modifythe underlying file in any way; it's just a utility method usedto make a new <TT><FONT SIZE=2 FACE="Courier">MoaFile</FONT></TT>and assign the same file spec to it. The caller must <TT><FONT SIZE=2 FACE="Courier">Release()</FONT></TT>the newly returned <TT><FONT SIZE=2 FACE="Courier">MoaFile</FONT></TT>when done. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="CreateDirectory">CreateDirectory()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>CreateDirectory(PIMoaFile<I>This</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Creates a directory matching the current spec. If a file ordirectory matching that spec already exists, an error is returned.<BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="CreateFile">CreateFile()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>CreateFile(PIMoaFile<I>This</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Creates a file matching the current spec. If a file or directorymatching that spec already exists, an error is returned. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="Delete">Delete()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>Delete(PIMoaFile<I>This</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Deletes the file or directory matching the current spec. Ifthe spec is a directory, all files and directories contained willbe deleted. If there is no file or directory, an error is returned.<BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="EachFile">EachFile()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>EachFile(PIMoaFile<I>This</I>, <DD><BR>MoaBoolParam<I>resolveAlias</I>, <BR>MoaFileEachProc<I>proc</I>, <BR>PMoaVoid<I>refCon</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">resolveAlias</FONT></I></CODE><DD>MoaBoolParam<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">proc</FONT></I></CODE><DD>MoaFileEachProc<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">refCon</FONT></I></CODE><DD>PMoaVoid<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><TT><FONT SIZE=2 FACE="Courier">EachFile()</FONT></TT> isused to iterate the files and directories in a given directory.If the file spec is a directory, the files and directories willbe enumerated. If the file spec is a file, just that file willbe enumerated. If resolveAlias is TRUE, all alias/shortcut fileswill be resolved prior to passing them to the enumeration proc(note that in this case, some enumerated files might not actuallybe &quot;in&quot; the directory!). <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetAccess">GetAccess()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>GetAccess(PIMoaFile<I>This</I>, <DD><BR>MoaLong FAR *<I>pAccessPerm</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">pAccessPerm</FONT></I></CODE><DD>MoaLong FAR *<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><TT><FONT SIZE=2 FACE="Courier">GetAccess()</FONT></TT> returnsthe access privileges allowable for this file (in the form ofa bit mask). <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetDates">GetDates()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>GetDates(PIMoaFile<I>This</I>, <DD><BR>MoaWide FAR *<I>pCreate</I>, <BR>MoaWide FAR *<I>pModify</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">pCreate</FONT></I></CODE><DD>MoaWide FAR *<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">pModify</FONT></I></CODE><DD>MoaWide FAR *<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><TT><FONT SIZE=2 FACE="Courier">GetDates()</FONT></TT> returnsthe creation and modification dates of this file. This methoddoes not operate on directories (an error is returned). <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetDirectory">GetDirectory()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>GetDirectory(PIMoaFile<I>This</I>, <DD><BR>struct IMoaFile FAR * FAR *<I>pDir</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">pDir</FONT></I></CODE><DD>struct IMoaFile FAR * FAR *<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><TT><FONT SIZE=2 FACE="Courier">GetDirectory()</FONT></TT>returns a <TT><FONT SIZE=2 FACE="Courier">PIMoaFile</FONT></TT>for this file's parent directory. The caller must <TT><FONT SIZE=2 FACE="Courier">Release()</FONT></TT>it when done. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetFilename">GetFilename()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>GetFilename(PIMoaFile<I>This</I>, <DD><BR>PMoaChar<I>pNameBuf</I>, <BR>MoaLong<I>nameBufSize</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">pNameBuf</FONT></I></CODE><DD>PMoaChar<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">nameBufSize</FONT></I></CODE><DD>MoaLong<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Returns the file/directory name from the current spec. <TT><FONT SIZE=2 FACE="Courier">SetFilename()</FONT></TT>changes the filename portion of the file spec without renamingthe file. In other words, you can use this call to change justthe &quot;leaf&quot; portion of the file spec. Note that thiscall causes the <TT><FONT SIZE=2 FACE="Courier">MoaFile</FONT></TT>to refer to another file, while <TT><FONT SIZE=2 FACE="Courier">Rename()</FONT></TT>causes the <TT><FONT SIZE=2 FACE="Courier">MoaFile</FONT></TT>to rename the given file and refer to the file by the given name.<BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetPathnameSpec">GetPathnameSpec()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>GetPathnameSpec(PIMoaFile<I>This</I>, <DD><BR>PMoaChar<I>pNameBuf</I>, <BR>MoaLong<I>nameBufSize</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">pNameBuf</FONT></I></CODE><DD>PMoaChar<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">nameBufSize</FONT></I></CODE><DD>MoaLong<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Takes the file description from a pathname on all platforms.<TT><FONT SIZE=2 FACE="Courier">GetPathnameSpec</FONT></TT> returnsthe existing file description in similar form. <TT><FONT SIZE=2 FACE="Courier">SetPathnameSpec</FONT></TT>and <TT><FONT SIZE=2 FACE="Courier">GetPathnameSpec</FONT></TT>will return errors if directories in the path are missing, butnot if the file is missing. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetSize">GetSize()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>GetSize(PIMoaFile<I>This</I>, <DD><BR>MoaLong FAR *<I>pFileLen</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">pFileLen</FONT></I></CODE><DD>MoaLong FAR *<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><TT><FONT SIZE=2 FACE="Courier">GetSize()</FONT></TT> returnsthe size, in bytes, of the data fork of a file. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetStream">GetStream()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>GetStream(PIMoaFile<I>This</I>, <DD><BR>MoaLong<I>bufferSize</I>, <BR>PIMoaStream FAR *<I>ppStream</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">bufferSize</FONT></I></CODE><DD>MoaLong<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">ppStream</FONT></I></CODE><DD>PIMoaStream FAR *<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><TT><FONT SIZE=2 FACE="Courier">GetStream()</FONT></TT> createsan <TT><FONT SIZE=2 FACE="Courier">IMoaStream</FONT></TT> to thegiven file. If the spec is a directory, an error is returned.The caller must <TT><FONT SIZE=2 FACE="Courier">Release()</FONT></TT>the stream when done. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetSysSpec">GetSysSpec()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>GetSysSpec(PIMoaFile<I>This</I>, <DD><BR>PMoaSystemFileSpec<I>pSpec</I>, <BR>MoaLong<I>specBufSize</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">pSpec</FONT></I></CODE><DD>PMoaSystemFileSpec<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">specBufSize</FONT></I></CODE><DD>MoaLong<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Takes the file description from an FSSpec (Macintosh) or pathname(Windows). It optionally resolves alias/shortcut files. <TT><FONT SIZE=2 FACE="Courier">GetSysSpec()</FONT></TT>returns the existing file description in a similar form. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="IsDirectory">IsDirectory()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>IsDirectory(PIMoaFile<I>This</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><TT><FONT SIZE=2 FACE="Courier">IsDirectory()</FONT></TT>is used to determine if the <TT><FONT SIZE=2 FACE="Courier">IMoaFile</FONT></TT>specifies a directory (vs. a file); <TT><FONT SIZE=2 FACE="Courier">kMoaErr_NoErr</FONT></TT>is returned if the spec is a directory. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="IsExisting">IsExisting()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>IsExisting(PIMoaFile<I>This</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><TT><FONT SIZE=2 FACE="Courier">IsExisting()</FONT></TT> isused to determine if the <TT><FONT SIZE=2 FACE="Courier">IMoaFile</FONT></TT>specifies an existing file entity; <TT><FONT SIZE=2 FACE="Courier">kMoaErr_NoErr</FONT></TT>is returned if the spec exists. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="IsSameFile">IsSameFile()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>IsSameFile(PIMoaFile<I>This</I>, <DD><BR>struct IMoaFile FAR *<I>pOther</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">pOther</FONT></I></CODE><DD>struct IMoaFile FAR *<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><TT><FONT SIZE=2 FACE="Courier">IsSameFile()</FONT></TT> isused to determine if to <TT><FONT SIZE=2 FACE="Courier">IMoaFiles</FONT></TT>refer to the same file entity; <TT><FONT SIZE=2 FACE="Courier">kMoaErr_NoErr</FONT></TT>is returned if they do. The file entities need not exist for theresult to be valid. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="Rename">Rename()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>Rename(PIMoaFile<I>This</I>, <DD><BR>ConstPMoaChar<I>pNameBuf</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">pNameBuf</FONT></I></CODE><DD>ConstPMoaChar<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Returns the file/directory name from the current spec. <TT><FONT SIZE=2 FACE="Courier">SetFilename()</FONT></TT>changes the filename portion of the file spec without renamingthe file. In other words, you can use this call to change justthe &quot;leaf&quot; portion of the file spec. Note that thiscall causes the <TT><FONT SIZE=2 FACE="Courier">MoaFile</FONT></TT>to refer to another file, while <TT><FONT SIZE=2 FACE="Courier">Rename()</FONT></TT>causes the <TT><FONT SIZE=2 FACE="Courier">MoaFile</FONT></TT>to rename the given file and refer to the file by the given name.Rename() renames the file.<BR><BR>Note that this call will NOT move the file (ie, the argument isa filename, not a pathname). The <TT><FONT SIZE=2 FACE="Courier">MoaFile's</FONT></TT>internal file spec is updated to reflect the new name.<BR><BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="SetFilename">SetFilename()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>SetFilename(PIMoaFile<I>This</I>, <DD><BR>ConstPMoaChar<I>pNameBuf</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">pNameBuf</FONT></I></CODE><DD>ConstPMoaChar<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Returns the file/directory name from the current spec. <TT><FONT SIZE=2 FACE="Courier">SetFilename()</FONT></TT>changes the filename portion of the file spec without renamingthe file. In other words, you can use this call to change justthe &quot;leaf&quot; portion of the file spec. Note that thiscall causes the <TT><FONT SIZE=2 FACE="Courier">MoaFile</FONT></TT>to refer to another file, while <TT><FONT SIZE=2 FACE="Courier">Rename()</FONT></TT>causes the <TT><FONT SIZE=2 FACE="Courier">MoaFile</FONT></TT>to rename the given file and refer to the file by the given name.<BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="SetNewTempSpec">SetNewTempSpec()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>SetNewTempSpec(PIMoaFile<I>This</I>, <DD><BR>struct IMoaFile FAR *<I>pDir</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">pDir</FONT></I></CODE><DD>struct IMoaFile FAR *<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Creates a unique file description that matches no existingfile. It does not create the file itself. The file descriptionis in pDir, or an arbitrary directory if pDir is NULL. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="SetPathnameSpec">SetPathnameSpec()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>SetPathnameSpec(PIMoaFile<I>This</I>, <DD><BR>ConstPMoaChar<I>pNameBuf</I>, <BR>MoaBoolParam<I>resolveAlias</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">pNameBuf</FONT></I></CODE><DD>ConstPMoaChar<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">resolveAlias</FONT></I></CODE><DD>MoaBoolParam<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Takes the file description from a pathname on all platforms.<TT><FONT SIZE=2 FACE="Courier">GetPathnameSpec</FONT></TT> returnsthe existing file description in similar form. <TT><FONT SIZE=2 FACE="Courier">SetPathnameSpec</FONT></TT>and <TT><FONT SIZE=2 FACE="Courier">GetPathnameSpec</FONT></TT>will return errors if directories in the path are missing, butnot if the file is missing. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="SetSize">SetSize()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>SetSize(PIMoaFile<I>This</I>, <DD><BR>MoaLong<I>fileLen</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">fileLen</FONT></I></CODE><DD>MoaLong<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><TT><FONT SIZE=2 FACE="Courier">SetSize()</FONT></TT> setsthe size, in bytes, of the data fork of a file; if the file isshorter, enough space is reserved for the given number of bytes;if the file is longer, all extra bytes are removed. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="SetSpec">SetSpec()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>SetSpec(PIMoaFile<I>This</I>, <DD><BR>struct IMoaFile FAR *<I>pDir</I>, <BR>ConstPMoaChar<I>pFileName</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">pDir</FONT></I></CODE><DD>struct IMoaFile FAR *<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">pFileName</FONT></I></CODE><DD>ConstPMoaChar<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Takes the file description from a file name and directoryspecifier; the directory is provided by another <TT><FONT SIZE=2 FACE="Courier">IMoaFile</FONT></TT>.NULL can be passed for the directory spec, in which case the filewill be specified in the &quot;current&quot; directory (implementationdefined). <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="SetSysSpec">SetSysSpec()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>SetSysSpec(PIMoaFile<I>This</I>, <DD><BR>ConstPMoaSystemFileSpec<I>pSpec</I>, <BR>MoaBoolParam<I>resolveAlias</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">pSpec</FONT></I></CODE><DD>ConstPMoaSystemFileSpec<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">resolveAlias</FONT></I></CODE><DD>MoaBoolParam<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Takes the file description from an FSSpec (Macintosh) or pathname(Windows). It optionally resolves alias/shortcut files. <TT><FONT SIZE=2 FACE="Courier">GetSysSpec()</FONT></TT>returns the existing file description in a similar form. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="SwapFile">SwapFile()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><DD><DT>SwapFile(PIMoaFile<I>This</I>, <DD><BR>struct IMoaFile FAR *<I>pOther</I>)<DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I><FONT SIZE=2 FACE="Courier">This</FONT></I></CODE><DD>Pointer to the <CODE>IMoaFile</CODE> interface<BR><BR><DT><CODE><I><FONT SIZE=2 FACE="Courier">pOther</FONT></I></CODE><DD>struct IMoaFile FAR *<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><TT><FONT SIZE=2 FACE="Courier">SwapFile()</FONT></TT>: Ifthis and other are both existing files (not directories), thefiles are swapped such that the spec for &quot;this&quot; nowpoints to &quot;other&quot; and vice versa. If &quot;this&quot;exists, but &quot;other&quot; does not, &quot;this&quot; is moved(not copied) to &quot;other&quot;. If this doesn't exist but otherdoes, it's an error. <TT><FONT SIZE=2 FACE="Courier">SwapFile()</FONT></TT>only works if this and other are on the same volume. <TT><FONT SIZE=2 FACE="Courier">SwapFile()</FONT></TT>doesn't work if either this or other are directories. <BR></DL><P><BR><hr width=45% align=left><P><A HREF="../copyrite.htm" >Copyright &#169; 1995, 1996, 1997, 1998, 1999 Macromedia, Inc.</A></BODY><!--#include virtual="/uber/html/footer.html" --></html>
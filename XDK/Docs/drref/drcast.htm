<HTML><HEAD><TITLE>IMoaDrCast</TITLE><META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0z"></HEAD><body bgcolor="#FFFFFF"  link="#ff3300" alink="#ff3300" vlink="#333399"><A HREF = "../drdg/index.htm">DR Developer's Guide</A><BR><A HREF = "index.htm"> DR Interfaces</A> | <A HREF = "drmthndx.htm">DR Methods</A> | <A HREF = "drtypndx.htm">DR Types and Misc API</A><hr width=45% align=left><h2><font face=arial,helvetica,sans-serif>IMoaDrCast</font></h2><hr width=45% align=left><P>Interface ID: <CODE>IID_IMoaDrCast<BR></CODE>Pointer type: <CODE>PIMoaDrCast<BR></CODE>Inheritance: <A HREF = "../mmref/mmprpown.htm">IMoaMmPropOwner</A><BR>Header file: <A HREF = "../../include/driservc.h">driservc.h</A><BR><h3><font face=arial,helvetica,sans-serif>Description</font></h3><DL><DT><DD><BR>The <TT>IMoaDrCast</TT> interfacerepresents a cast in a movie. This interface can be acquired bycalling the <TT>IMoaDrMovie</TT>methods <TT>NewCast()</TT>,<TT>GetCastFromName()</TT>and <TT>GetNthCast()</TT>.<BR><BR></DL><h3><font face=arial,helvetica,sans-serif><A NAME="RTFToC2">Cast properties</A></font></h3<DL><DT><DD><BR><TT>IMoaDrCast</TT> inheritsfrom the <TT>IMoaMmPropOwner</TT>interface, providing for access to data through the propertiesmechanism described in the chapter &quot;Properties&quot; earlierin this document. The following table lists properties definedfor objects providing the <TT>IMoaDrCast</TT>interface. <BR><BR></DL><P><h3><font face=arial,helvetica,sans-serif>Methods</font></h3><DL><DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Property owner methods </font></h4><DL><DT><DD><A HREF = "#GetProp">GetProp()</A> <BR><A HREF = "#SetProp">SetProp()</A> </DL><h4><font face=arial,helvetica,sans-serif>Movie Interaction </font></h4><DL><DT><DD><A HREF = "#GetIndexInMovie">GetIndexInMovie()</A> </DL><h4><font face=arial,helvetica,sans-serif>Cast member access </font></h4><DL><DT><DD><A HREF = "#GetFirstUsedMemberIndex">GetFirstUsedMemberIndex()</A><BR><A HREF = "#GetNextUsedMemberIndex">GetNextUsedMemberIndex()</A><BR><A HREF = "#GetLastUsedMemberIndex">GetLastUsedMemberIndex()</A><BR><A HREF = "#GetFirstFreeMemberIndex">GetFirstFreeMemberIndex()</A><BR><A HREF = "#GetNextFreeMemberIndex">GetNextFreeMemberIndex()</A><BR><A HREF = "#GetLastFreeMemberIndex">GetLastFreeMemberIndex()</A><BR><A HREF = "#GetMemberIndexFromName">GetMemberIndexFromName()</A><BR><A HREF = "#GetCastMem">GetCastMem()</A> </DL><h4><font face=arial,helvetica,sans-serif>Cast member management </font></h4><DL><DT><DD><A HREF = "#CreateCastMem">CreateCastMem()</A> <BR><A HREF = "#DeleteCastMem">DeleteCastMem()</A> <BR><A HREF = "#DuplicateCastMem">DuplicateCastMem()</A> </DL><h4><font face=arial,helvetica,sans-serif>Cast management </font></h4><DL><DT><DD><A HREF = "#Save">Save()</A> </DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="CreateCastMem">CreateCastMem()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>CreateCastMem(PIMoaDrCast<I>This</I>, <DD>MoaDrMemberIndex<I>memberIndex</I>, <BR>MoaMmSymbol<I>typeSymbol</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCast</CODE> interface<BR><BR><DT><CODE><I>memberIndex</I></CODE><DD><CODE>MoaDrMemberIndex</CODE>Index of the cast member slotinto which the newly created cast member will be placed <BR><BR><DT><CODE><I>typeSymbol</I></CODE><DD><CODE>MoaMmSymbol</CODE>The <TT>MoaMmSymbol</TT>of the type of cast member to create <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Creates a new cast member of the specified type in the specifiedcast member slot. The caller must provide the symbol of the typeto create. Symbols of all registered types can be obtained fromthe Player cast member type methods (<TT>GetNthCastMemTypeSymbol</TT>).If you know that the type is registered and the text string forthe type, you can get the symbol directly using <TT>IMoaMmUtils::StringToSymbol()</TT>.If the specified cast member slot is occupied, the existing castmember is deleted. At the time of creation, the cast member probablywill not have any media associated with it; use the <TT>IMoaDrCastMem::SetMedia()</TT>(or its media accessor interface) to supply it. <BR><BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="DeleteCastMem">DeleteCastMem()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>DeleteCastMem(PIMoaDrCast<I>This</I>, <DD>MoaDrMemberIndex<I>memberIndex</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCast</CODE> interface<BR><BR><DT><CODE><I>memberIndex</I></CODE><DD><CODE>MoaDrMemberIndex</CODE>Index of the cast member to delete<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Deletes the cast member in the specified slot. The cast memberis removed immediately. Any references to the cast member in thescore will be dangling.<BR><BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="DuplicateCastMem">DuplicateCastMem()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>DuplicateCastMem(PIMoaDrCast <I>This</I>, <DD>MoaDrMemberIndex <I>sourceMemberIndex</I>, <BR>struct IMoaDrCast FAR *<I>pDestCast</I>, <BR>MoaDrMemberIndex <I>destMemberIndex</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCast</CODE> interface<BR><BR><DT><CODE><I>sourceMemberIndex</I></CODE><DD><CODE>MoaDrMemberIndex</CODE>Index of the cast member in thiscast to duplicate <BR><BR><DT><CODE><I>pDestCast</I></CODE><DD><CODE>struct IMoaDrCast FAR *</CODE>Pointer to a caller-owned<TT>IMoaDrCast </TT>interfacefor the destination cast <BR><BR><DT><CODE><I>destMemberIndex</I></CODE><DD><CODE>MoaDrMemberIndex</CODE>Index in <TT><I>pDestCast</I></TT>of the cast member slot in which to place thecopied cast member <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Duplicates a cast member, placing the copy in the specified slotwithin the specified cast. The caller must pass in an interfaceto the destination cast; this interface continues to be ownedby the caller. This method duplicates the cast member entirely,including its properties (name, and so on) and media data. Ifthe destination cast member slot is occupied, the existing castmember is deleted. <BR><BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetCastMem">GetCastMem()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>GetCastMem(PIMoaDrCast<I>This</I>, <DD>MoaDrMemberIndex<I>memberIndex</I>, <BR>PIMoaDrCastMem FAR *<I>ppIMoaDrCastMem</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCast</CODE> interface<BR><BR><DT><CODE><I>memberIndex</I></CODE><DD><CODE>MoaDrMemberIndex</CODE>Index of the cast member of interest.This must be an occupied cast member slot. <BR><BR><DT><CODE><I>ppIMoaDrCastMem</I></CODE><DD><CODE>PIMoaDrCastMem FAR *</CODE>Pointer to a <TT>PIMoaDrCastMem</TT>to receive a pointer to the cast member's interface. Interfaceis then owned by caller which must dispose when no longer needed<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Obtains a cast member interface for the specified cast member.The caller subsequently owns the interface and is responsiblefor releasing it when it is no longer needed. A cast member interfacemay no longer be valid if the associated cast member is movedor deleted from the cast. You should always release the cast memberinterface before returning from the method implementation thatcalls this method. <BR><BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetFirstFreeMemberIndex">GetFirstFreeMemberIndex()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>GetFirstFreeMemberIndex(PIMoaDrCast<I>This</I>, <DD>MoaDrMemberIndex FAR *<I>pMemberIndex</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCast</CODE> interface<BR><BR><DT><CODE><I>pMemberIndex</I></CODE><DD><CODE>MoaDrMemberIndex FAR *</CODE>Pointer to a <TT>MoaDrMemberIndex</TT>to receive the memberIndex<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Obtains the index of the first empty cast member slot in the cast.Returns a <TT>NULL </TT>memberindex if there are no empty cast member slots remaining in thecast.<BR><BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetFirstUsedMemberIndex">GetFirstUsedMemberIndex()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>GetFirstUsedMemberIndex(PIMoaDrCast<I>This</I>, <DD>MoaDrMemberIndex FAR *<I>pMemberIndex</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCast</CODE> interface<BR><BR><DT><CODE><I>pMemberIndex</I></CODE><DD><CODE>MoaDrMemberIndex FAR *</CODE>Pointer to a <TT>MoaDrMemberIndex</TT>to receive the <TT>memberIndex</TT>.<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Obtains the index of the first occupied (non-empty) cast memberslot in the cast. Returns a <TT>NULL</TT>member index if there are no cast members in the cast. <BR><BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetIndexInMovie">GetIndexInMovie()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>GetIndexInMovie(PIMoaDrCast<I>This</I>, <DD>struct IMoaDrMovie FAR *<I>pIMoaDirMovie</I>, <BR>MoaDrCastIndex FAR *<I>pCastIndex</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCast</CODE> interface<BR><BR><DT><CODE><I>pIMoaDirMovie</I></CODE><DD><CODE>struct IMoaDrMovie FAR *</CODE>Pointer to a caller-ownedinterface for the movie of interest. <BR><BR><DT><CODE><I>pCastIndex</I></CODE><DD><CODE>MoaDrCastIndex FAR *</CODE>Pointer to a <TT>MoaDrCastIndex</TT>to receive the index of the cast in the specified movie <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Obtains the index of the cast in the specified movie's cast list.Casts can be shared among several simultaneously-playing movies;each cast can have a different position within each movie's castlist. The caller must supply an interface to the movie of interest,which continues to be owned by the caller. <BR><BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetLastFreeMemberIndex">GetLastFreeMemberIndex()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>GetLastFreeMemberIndex(PIMoaDrCast<I>This</I>, <DD>MoaDrMemberIndex FAR *<I>pMemberIndex</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCast</CODE> interface<BR><BR><DT><CODE><I>pMemberIndex</I></CODE><DD><CODE>MoaDrMemberIndex FAR *</CODE>Pointer to a <TT>MoaDrMemberIndex</TT>to receive the <TT>memberIndex</TT><BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Obtains the index of the last empty cast member slot in thecast. Returns a <TT>NULL</TT>member index if there are no empty cast member slots remainingin the cast. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetLastUsedMemberIndex">GetLastUsedMemberIndex()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>GetLastUsedMemberIndex(PIMoaDrCast<I>This</I>, <DD>MoaDrMemberIndex FAR *<I>pMemberIndex</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCast</CODE> interface<BR><BR><DT><CODE><I>pMemberIndex</I></CODE><DD><CODE>MoaDrMemberIndex FAR *</CODE>Pointer to a <TT>MoaDrMemberIndex</TT>to receive the memberIndex<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Obtains the index of the last occupied (non-empty) cast memberslot in the cast. Returns a <TT>NULL</TT>member index if there are no cast members in the cast. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetMemberIndexFromName">GetMemberIndexFromName()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>GetMemberIndexFromName(PIMoaDrCast<I>This</I>, <DD>PMoaChar<I>pCastMemName</I>, <BR>MoaDrMemberIndex FAR *<I>pMemberIndex</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCast</CODE> interface<BR><BR><DT><CODE><I>pCastMemName</I></CODE><DD><CODE>PMoaChar</CODE>Pointer to a C string buffer containingthe name of the cast member of interest <BR><BR><DT><CODE><I>pMemberIndex</I></CODE><DD><CODE>MoaDrMemberIndex FAR *</CODE>Pointer to a <TT>MoaDrMemberIndex</TT>to receive the index of the cast member <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Obtains the index of a cast member in the cast given the castmember name. Returns 0 if the cast member cannot be found in thecast. Name comparisons are case-insensitive. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetNextFreeMemberIndex">GetNextFreeMemberIndex()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>GetNextFreeMemberIndex(PIMoaDrCast<I>This</I>, <DD>MoaDrMemberIndex<I>afterMemberIndex</I>, <BR>MoaDrMemberIndex FAR *<I>pMemberIndex</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCast</CODE> interface<BR><BR><DT><CODE><I>afterMemberIndex</I></CODE><DD><CODE>MoaDrMemberIndex</CODE>Index of cast member slot afterwhich to begin searching for an empty cast member slot. <BR><BR><DT><CODE><I>pMemberIndex</I></CODE><DD><CODE>MoaDrMemberIndex FAR *</CODE>Pointer to a <TT>MoaDrMemberIndex</TT>to receive the member index <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Obtains the index of the next empty cast member slot in thecast after the specified cast member slot. Returns a <TT>NULL</TT>member index if there are no empty cast member slots in the castafter <TT><I>afterMemberIndex</I></TT>.<BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetNextUsedMemberIndex">GetNextUsedMemberIndex()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>GetNextUsedMemberIndex(PIMoaDrCast<I>This</I>, <DD>MoaDrMemberIndex<I>afterMemberIndex</I>, <BR>MoaDrMemberIndex FAR *<I>pMemberIndex</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCast</CODE> interface<BR><BR><DT><CODE><I>afterMemberIndex</I></CODE><DD><CODE>MoaDrMemberIndex</CODE>Index of cast member slot afterwhich to begin search for a non-empty cast member <BR><BR><DT><CODE><I>pMemberIndex</I></CODE><DD><CODE>MoaDrMemberIndex FAR *</CODE>Pointer to a <TT>MoaDrMemberIndex</TT>to receive the member index <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Obtains the index of the next occupied (non-empty) cast memberslot in the cast after the specified cast member slot. Returnsa <TT>NULL</TT> member indexif there are no cast members in the cast after <TT><I>afterMemberIndex</I></TT>.<BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetProp">GetProp()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>GetProp(PIMoaDrCast<I>This</I>, <DD>MoaMmSymbol<I>symbol</I>, <BR>PMoaMmValue<I>pPropValue</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCast</CODE> interface<BR><BR><DT><CODE><I>symbol</I></CODE><DD><CODE>MoaMmSymbol</CODE>The <TT>MoaMmSymbol</TT>for the property of interest <BR><BR><DT><CODE><I>pPropValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to a <TT>MoaMmValue</TT>structure to receive the value <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><TABLE BORDER="2"><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=201><TT>kMoaErr_NoErr</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=303>Property exists and value was returned </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=201><TT>kMoaErr_BadParam</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=303>Invalid <TT><I>pPropValue</I></TT> passed in </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=201><TT>kMoaMmErr_PropertyNotFound</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=303>Property isn't supported by this class </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=201><TT>kMoaMmErr_InternalError</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=303>Property exists but couldn't get due to internal err </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=201><TT>kMoaMmErr_NoMemForString</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=303>Couldn't allocate memory for string value data </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=201><TT>kMoaErr_OutOfMem</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=303>Couldn't allocate memory for other value data </TD></TR></TABLE></DL><P><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Obtains the value of the specified cast property. To get the symbolfrom a string, use the <TT>IMoaMmUtils::StringToSymbol()</TT>.Thecaller is responsible for releasing the value referenced by <TT><I>pPropValue</I></TT>with <TT>IMoaMmUtils::ValueRelease()</TT>when it is no longer needed.<BR><BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="Save">Save()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>Save(PIMoaDrCast<I>This</I>, <DD>PMoaChar<I>pNewPathName</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCast</CODE> interface<BR><BR><DT><CODE><I>pNewPathName</I></CODE><DD><CODE>PMoaChar</CODE>Pointer to a specified path <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><TABLE BORDER="2"><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=134><TT>kMoaErr_NoErr</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=370>Successful</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=134><TT>kMoaDrErr_DiskIO</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=370>IO error encountered during file access. </TD></TR></TABLE></DL><P><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Saves the cast to the specified path, which should include thefilename. This method applies only to external cast members. <BR><BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="SetProp">SetProp()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>SetProp(PIMoaDrCast<I>This</I>, <DD>MoaMmSymbol<I>symbol</I>, <BR>ConstPMoaMmValue<I>pPropValue</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCast</CODE> interface<BR><BR><DT><CODE><I>symbol</I></CODE><DD><CODE>MoaMmSymbol</CODE>The <TT>MoaMmSymbol</TT>for the property of interest <BR><BR><DT><CODE><I>pPropValue</I></CODE><DD><CODE>ConstPMoaMmValue</CODE>Pointer to a caller-owned <TT>ConstPMoaMmValue</TT>structure containing the new value <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><TABLE BORDER="2"><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=216><TT>kMoaErr_NoErr</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=288>Property exists and value was set </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=216><TT>kMoaErr_BadParam</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=288>Invalid <TT><I>pPropValue </I></TT>passed in </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=216><TT>kMoaMmErr_PropertyNotFound</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=288>Property isn't supported by this class </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=216><TT>kMoaMmErr_InternalError</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=288>Property exists, value ok, couldn't set--internal error </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=216><TT>kMoaMmErr_NoMemForString</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=288>Couldn't allocate memory for setting string value data </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=216><TT>kMoaErr_OutOfMem</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=288>Couldn't allocate memory for setting other value data </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=216><TT>kMoaMmErr_IntegerExpected</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=288>Type mismatch: integer value expected </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=216><TT>kMoaMmErr_SymbolExpected</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=288>Type mismatch: symbol value expected </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=216><TT>kMoaMmErr_FloatExpected</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=288>Type mismatch: float value expected </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=216><TT>kMoaMmErr_StringExpected</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=288>Type mismatch: string value expected </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=216><TT>kMoaMmErr_PointExpected</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=288>Type mismatch: point value expected </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=216><TT>kMoaMmErr_RectExpected</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=288>Type mismatch: rect value expected </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=216><TT>kMoaMmErr_ValueTypeMismatch</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=288>Type mismatch: other value expected (non-specific) </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=216><TT>kMoaDrErr_CastMemberExpected</TT> </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=288>Type mismatch: <TT>CMRef</TT> value expected </TD></TR></TABLE></DL><P><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Sets a cast property to a new value. The caller continues to maintainownership of the value passed in, and should release it using<TT>IMoaMmUtils::ValueRelease() </TT>whenit is no longer needed. <BR><BR></DL><P><hr width=45% align=left><P><A HREF="../copyrite.htm" >Copyright &#169; 1995, 1996, 1997, 1998, 1999 Macromedia, Inc.</A></BODY><!--#include virtual="/uber/html/footer.html" --></html>
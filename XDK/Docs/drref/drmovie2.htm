<html><head><title>IMoaDrMovie2</title></head><body bgcolor="#FFFFFF"  link="#ff3300" alink="#ff3300" vlink="#333399"><A HREF = "../drdg/index.htm">DR Developer's Guide</A><BR><A HREF = "index.htm"> DR Interfaces</A> | <A HREF = "drmthndx.htm">DR Methods</A> | <A HREF = "drtypndx.htm">DR Types and Misc API</A><hr width=45% align=left><h2><font face=arial,helvetica,sans-serif><A name = "IMoaDrMovie2">IMoaDrMovie2</A></font></h2><hr width=45% align=left><BR>Interface ID: <CODE>IID_IMoaDrMovie2</CODE><BR>Pointer type: <CODE>PIMoaDrMovie2</CODE><BR>Inheritance: <CODE>IMoaDrMovie</CODE><BR>Header file: <A HREF = "../../include/driservc.h">driservc.h</A><BR><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD><p>The IMoaDrMovie2 interface represents open movies in Director.  You acquire amovie interface by calling the <tt>IMoaDrPlayer</tt> methods<tt>GetActiveMovie()</tt> or <tt>GetNthMovie()</tt>. This returns to you an <tt>IMoaDrMovie</tt>interface.  You can calling the <tt>QueryInterface</tt> method off this interface to retrievean <tt>IMoaDrMovie2 interface</tt><p><p><h5><font face=arial,helvetica,sans-serif><a name="RTFToC2">Movieproperties</a></a></a></a></a></a></a></a></a></a></a></a></font></h5><p><tt>IMoaDrMovie2</tt> inherits from the <tt>IMoaMmPropOwner</tt> interface,providing for access to data through the properties mechanism described in the"Multimedia Services" chapter in the <i>Development Guide </i>document.  Seethe "Properties" section for information on the properties defined for objectsproviding the <tt>IMoaDrMovie</tt> interface.  <p><p><h5><font face=arial,helvetica,sans-serif><a name="RTFToC3">Moviemedia</a></a></a></a></a></a></font></h5><p><tt>IMoaDrMovie</tt> inherits from the <tt>IMoaDrMediaOwner</tt> interface,providing for access to media through the media owner mechanism described inthe "Director Services" chapter in the <i>Development Guide </i>document.Movies have one kind of media: scores.  Scores are editable through the<tt>IMoaDrScoreAccess</tt> interface.  You acquire a movie's score data bycalling either <tt>IMoaDrMovie::GetMedia()</tt>, which returns a handle to thescore data, or<tt> GetScoreAccess()</tt>, which returns an<tt>IMoaDrScoreAccess</tt> interface to the score data.  <p></DL><BR><DL><DT><h4><font face=arial,helvetica,sans-serif>Methods</font></h4><DD><!MethodListBegin><DL><DT><h5><font face=arial,helvetica,sans-serif>Property owner methods</font></h5><DD><A HREF = "#GetProp">GetProp()</A><BR><A HREF = "#SetProp">SetProp()</A></DL><!mcPropertyownermethods><DL><DT><h5><font face=arial,helvetica,sans-serif>Media owner methods</font></h5><DD><A HREF = "#GetMedia">GetMedia()</A><BR><A HREF = "#SetMedia">SetMedia()</A><BR><A HREF = "#AttachMedia">AttachMedia()</A></DL><!mcMediaownermethods><DL><DT><h5><font face=arial,helvetica,sans-serif>Scripting support</font></h5><DD><A HREF = "#CallHandler">CallHandler()</A><BR><A HREF = "#SendSpriteMessage">SendSpriteMessage()</A></DL><!mcScriptingsupport><DL><DT><h5><font face=arial,helvetica,sans-serif>Managing casts</font></h5><DD><A HREF = "#GetCastCount">GetCastCount()</A><BR><A HREF = "#GetNthCast">GetNthCast()</A><BR><A HREF = "#GetCastFromName">GetCastFromName()</A><BR><A HREF = "#GetCastIndexFromName">GetCastIndexFromName()</A><BR><A HREF = "#NewCast">NewCast()</A><BR><A HREF = "#AddExternalCast">AddExternalCast()</A><BR><A HREF = "#RemoveCast">RemoveCast()</A><BR><A HREF = "#GetCMRefFromMemberName">GetCMRefFromMemberName()</A><BR><A HREF = "#GetCMRefFromCMId">GetCMRefFromCMId()</A><BR><A HREF = "#GetCMIdFromCMRef">GetCMIdFromCMRef()</A><BR><A HREF = "#MoveCastMember">MoveCastMember()</A></DL><!mcManagingcasts><DL><DT><h5><font face=arial,helvetica,sans-serif>Acquiring ImoaDrCastMem</font></h5><DD><A HREF = "#GetCastMemFromCMRef">GetCastMemFromCMRef()</A></DL><!mcAcquiringImoaDrCastMem><DL><DT><h5><font face=arial,helvetica,sans-serif>Imaging support</font></h5><DD><A HREF = "#UpdateStageRect">UpdateStageRect()</A><BR><A HREF = "#GetStageWindowGC">GetStageWindowGC()</A><BR><A HREF = "#GetStageBufferGC">GetStageBufferGC()</A></DL><!mcImagingsupport><DL><DT><h5><font face=arial,helvetica,sans-serif>Accessing frame labels</font></h5><DD><A HREF = "#GetFrameIndexFromLabel">GetFrameIndexFromLabel()</A><BR><A HREF = "#GetFrameLabelFromIndex">GetFrameLabelFromIndex()</A><BR><A HREF = "#SetFrameLabel">SetFrameLabel()</A></DL><!mcAccessingframelabels><DL><DT><h5><font face=arial,helvetica,sans-serif>Acquiring IMoaDrScoreAccess</font></h5><DD><A HREF = "#GetScoreAccess">GetScoreAccess()</A></DL><!mcAcquiringIMoaDrScoreAccess><DL><DT><h5><font face=arial,helvetica,sans-serif>Managing movies</font></h5><DD><A HREF = "#Save">Save()</A></DL><!mcManagingmovies><!MethodListEnd></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "AddExternalCast">AddExternalCast()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>AddExternalCast(PIMoaDrMovie2 <I>This</I>, <BR><DD>PMoaChar <I>pCastName</I>, <BR>PMoaChar <I>pPathName</I>, <BR>PMoaDrCastIndex <I>pNewCastIndex)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>pCastName</I></CODE><DD>The user reference name for the cast<BR><BR><DT><CODE><I>pPathName</I></CODE><DD>The full path name for an external cast<BR><BR><DT><CODE><I>pNewCastIndex)</I></CODE><DD><tt>PMoaDrCastIndex</tt> for the position in the cast list<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><CODE>MoaError</CODE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD><p>Adds an existing external cast to the movie's cast list.  Returns in<tt><i>pNewCastIndex</i></tt> the position of the cast in the movie's castlist.  <p></DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "AttachMedia">AttachMedia()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>AttachMedia(PIMoaDrMovie2 <I>This</I>, <BR><DD>PMoaDrMediaInfo <I>pMediaInfo)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>pMediaInfo)</I></CODE><DD>Pointer to a caller-owned media information structure<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><CODE>MoaError</CODE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD><p>Attaches media to a movie, releasing it from the caller. This is the same as<tt>SetMedia()</tt> except instead of copying the data, it is moved to themovie.  (In effect, a <tt>SetMedia() </tt>call followed by<tt>ReleaseMedia()</tt>.)  Before making this call, use<tt>IMoaDrUtils::NewMediaInfo() </tt>to fill out the structure, specifying NULLfor the <tt>aux </tt>field and <tt>kMoaDrMediaOpts_None </tt>for the<tt>options </tt>field.<p><p>On enter, the <tt>labelSymbol </tt>and <tt>formatSymbol </tt>fields should bepopulated with symbols indicating which chunk of media is to be attach(<tt>labelSymbol</tt>), and what format the media is supplied in(<tt>formatSymbol</tt>).  The <tt>mediaData </tt>field should hold the dataitself (typically a <tt>MoaHandle</tt>, Macintosh Handle, or Windows globalhandle) <p><p>Upon return, if there is no error, the media has changed ownership and belongsto the host application, and should no longer be referenced by the caller.This method is provided to allow the host application to optimizemedia-transfer if possible, preventing an extra copy of the media data, whichmay occur with separate <tt>SetMedia() </tt>and <tt>ReleaseMedia()</tt>calls).<p></DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "CallHandler">CallHandler()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>CallHandler(PIMoaDrMovie2 <I>This</I>, <BR><DD>MoaMmSymbol <I>name</I>, <BR>MoaLong <I>nArgs</I>, <BR>PMoaMmValue <I>pArgs</I>, <BR>PMoaMmValue <I>pResult)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>name</I></CODE><DD>Symbol of the handler name to call MoaMmSymbol<BR><BR><DT><CODE><I>nArgs</I></CODE><DD>Number of arguments to pass<BR><BR><DT><CODE><I>pArgs</I></CODE><DD>Array of <tt>MoaDrValues</tt> containing the arguments to the call<BR><BR><DT><CODE><I>pResult)</I></CODE><DD>Pointer to a caller-owned <tt>MoaMmValue</tt> to receive the return value<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><CODE>MoaError</CODE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD>Calls the Lingo handler <tt><i>name</i></tt> in the movie. The<tt><i>nArgs</i></tt>  argument is the number of arguments to the handler, the<i>pArgs</i> argument is a <tt>MoaMmList</tt> of arguments as<tt>MoaMmValues</tt>.  You must pass in NULL to <tt><i>pResult</i></tt>  if youdo not expect a result.  You must pass in a valid pointer if you do expect aresult.</DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "GetCastCount">GetCastCount()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>GetCastCount(PIMoaDrMovie2 <I>This</I>, <BR><DD>MoaLong FAR * <I>pCastCount)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>pCastCount)</I></CODE><DD>Pointer to a <tt>MoaLong</tt> to receive the number of casts<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><CODE>MoaError</CODE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD>Obtains the number of casts in the movie.</DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "GetCastFromName">GetCastFromName()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>GetCastFromName(PIMoaDrMovie2 <I>This</I>, <BR><DD>PMoaChar <I>pCastName</I>, <BR>PIMoaDrCast FAR * <I>ppIMoaDrCast)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>pCastName</I></CODE><DD>Pointer to a null-terminated C string containing the cast name of interest<BR><BR><DT><CODE><I>ppIMoaDrCast)</I></CODE><DD>Pointer to a <tt>PIMoaDrCast</tt> to receive a pointer to the cast interface<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><CODE>MoaError</CODE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD>Obtains an interface to one of the movie's casts by name, as it appears in the Cast Properties dialog. The interface is then owned by the caller, and the caller is responsible for releasing it when it is no longer needed. </DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "GetCastIndexFromName">GetCastIndexFromName()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>GetCastIndexFromName(PIMoaDrMovie2 <I>This</I>, <BR><DD>PMoaChar <I>pCastName</I>, <BR>MoaDrCastIndex FAR * <I>pCastIndex)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>pCastName</I></CODE><DD>Pointer to a null-terminated C string containing the cast name of interest<BR><BR><DT><CODE><I>pCastIndex)</I></CODE><DD>Pointer to a <tt>MoaDrCastIndex</tt> to receive the index<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><CODE>MoaError</CODE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD>Obtains the movie cast index associated with a named cast. This is a valuefrom 1 to <tt>GetCastCount()</tt>.</DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "GetCastMemFromCMRef">GetCastMemFromCMRef()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>GetCastMemFromCMRef(PIMoaDrMovie2 <I>This</I>, <BR><DD>PMoaDrCMRef <I>pCastMemRef</I>, <BR>PIMoaDrCastMem FAR * <I>ppIMoaDrCastMem)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>pCastMemRef</I></CODE><DD>Pointer to a <tt>MoaDrCMRef</tt> which specifies the cast member of interest<BR><BR><DT><CODE><I>ppIMoaDrCastMem)</I></CODE><DD>Pointer to a <tt>PIMoaDrCastMem</tt> to receive the interface for the cast member<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><CODE>MoaError</CODE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD><p>Obtains the <tt>IMoaDrCastMem</tt> interface for the cast member with thesupplied cast member reference.  The cast member reference specifies the<tt>movieCastIndex </tt>(index to cast in the movie) and <tt>memberIndex</tt>(index to cast member slot position within the cast); use the CMRef_macros in drtypes.h to create and access a <tt>0</tt>.  The caller owns thereturned  interface and is responsible for releasing it when it is no longerneeded.  <p></DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "GetCMIdFromCMRef">GetCMIdFromCMRef()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>GetCMIdFromCMRef(PIMoaDrMovie2 <I>This</I>, <BR><DD>PMoaDrCMRef <I>pCastMemRef</I>, <BR>PMoaDrCMId <I>pCastMemId)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>pCastMemRef</I></CODE><DD>Pointer to a <tt>MoaDrCMRef</tt> identifying the cast member we want a unique ID from<BR><BR><DT><CODE><I>pCastMemId)</I></CODE><DD>Pointer to a <tt>MoaDrCMId</tt> to recieve the unique cast member identifier<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><CODE>MoaError</CODE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD><p>Obtains a unique identifier (<tt> MoaDrCMId</tt>) for the cast member referred toby <i>pCastMemRef</i>.  This identifer can be used to retrieve the <tt>MoaDrCMRef</tt> forthis cast member at a later time, even if the cast member has been moved across cast boundaries.</DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "GetCMRefFromCMId">GetCMRefFromCMId()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>GetCMRefFromCMId(PIMoaDrMovie2 <I>This</I>, <BR><DD>PMoaDrCMId  <I>pCastMemId</I>, <BR>PMoaDrCMRef <I>pCastMemRef)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>pCastMemId</I></CODE><DD>Pointer to a <tt>MoaDrCMId</tt> identifying the cast member to search for<BR><BR><DT><CODE><I>pCastMemRef)</I></CODE><DD>Pointer to a <tt>MoaDrCMRef</tt> to receive cast member reference<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><TABLE BORDER="2"><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=229><TT>kMoaErr_NoErr</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=361>Successful</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=229><TT>kMoaDrErr_CastMemNotFound</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=361>Cast member not found</TD></TR></TABLE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD><p>Obtains the cast member reference (<tt>MoaDrCMRef</tt>) for a cast member fromits unique identifier.  This method scans all of the casts for the movie, and returns the<tt>MoaDrCMRef</tt> for the cast member whose id matches the onesupplied.  If no cast member is found with the specified id,<tt>kMoaDrErr_CastMemNotFound </tt>is returned and<tt><i>pCastMemRef</i></tt><i> </i>is set to a null reference .  Use<tt>CMRef_IsNull()</tt> to test the result.<p></DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "GetCMRefFromMemberName">GetCMRefFromMemberName()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>GetCMRefFromMemberName(PIMoaDrMovie2 <I>This</I>, <BR><DD>PMoaChar <I>pMemberName</I>, <BR>PMoaDrCMRef <I>pCastMemRef)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>pMemberName</I></CODE><DD>Pointer to a null-terminated C string containing the cast member name of interest<BR><BR><DT><CODE><I>pCastMemRef)</I></CODE><DD>Pointer to a <tt>MoaDrCMRef</tt>  to receive cast member reference<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><TABLE BORDER="2"><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=229><TT>kMoaErr_NoErr</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=361>Successful</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=229><TT>kMoaDrErr_CastMemNotFound</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=361>Cast member not found</TD></TR></TABLE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD><p>Obtains the cast member reference (<tt>MoaDrCMRef</tt>) for a cast member fromits name.  This method scans all of the casts for the movie, and returns the<tt>MoaDrCMRef</tt> for the first cast member whose name matches the onesupplied.  If no cast member is found with the specified name,<tt>kMoaDrErr_CastMemNotFound </tt>is returned and<tt><i>pCastMemRef</i></tt><i> </i>is set to a null reference .  Use<tt>CMRef_IsNull()</tt> to test the result.<p></DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "GetFrameIndexFromLabel">GetFrameIndexFromLabel()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>GetFrameIndexFromLabel(PIMoaDrMovie2 <I>This</I>, <BR><DD>PMoaChar <I>pLabelName</I>, <BR>PMoaDrFrameIndex <I>pFrameIndex)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>pLabelName</I></CODE><DD>Pointer to a null-terminated C-string  containing the name of the marker associated with the score frame (case-insensitive)<BR><BR><DT><CODE><I>pFrameIndex)</I></CODE><DD>Pointer to a <tt>MoaDrFrameIndex</tt> to receive the frame number of the label (marker)<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><TABLE BORDER="2"><TR><TD WIDTH=133><TT>kMoaErr_NoErr</TT></TD><TD WIDTH=457>if successful, <TT>kMoaDrErr_LabelNotFound</TT> if marker doesn't exist.</TD></TR></TABLE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD><p>Obtains the frame number from a label (marker) name. <p></DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "GetFrameLabelFromIndex">GetFrameLabelFromIndex()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>GetFrameLabelFromIndex(PIMoaDrMovie2 <I>This</I>, <BR><DD>MoaDrFrameIndex <I>frameIndex</I>, <BR>PMoaChar <I>pLabelName</I>, <BR>MoaLong <I>maxLen)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>frameIndex</I></CODE><DD>A <tt>MoaDrFrameIndex</tt> holding the frame number of interest<BR><BR><DT><CODE><I>pLabelName</I></CODE><DD>Pointer to a string buffer to receive the name of the marker associated with the given score frame<BR><BR><DT><CODE><I>maxLen)</I></CODE><DD>The length in bytes of the caller's C string buffer<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><CODE>MoaError</CODE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD>Obtains the name of the label (marker) at a given score frame number. Returns an empty string if no marker exists for the frame. </DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "GetMedia">GetMedia()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>GetMedia(PIMoaDrMovie2 <I>This</I>, <BR><DD>PMoaDrMediaInfo <I>pMediaInfo)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>pMediaInfo)</I></CODE><DD>Pointer to a caller-owned media information structure<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><CODE>MoaError</CODE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD><p>Gets movie media data by obtaining a copy of the media associated with a movie.This is how one obtains the score data associated with a movie. Before makingthis call, use <tt>IMoaDrUtils::NewMediaInfo() </tt>to fill out the structure,specifying NULL for the <tt>aux </tt>field and <tt>kMoaDrMediaOpts_None</tt>for the <tt>options </tt>field.  The caller partially populates a<tt>MoaDrMediaInfo </tt>structure with symbols indicating the requested chunkof media (<tt>labelSymbol</tt>) and the requested format(<tt>formatSymbol</tt>).  After the call, the <tt>mediaData</tt> field ispopulated with the requested data.  The type of this field depends on theformat requested.  The caller owns the data and is responsible for disposingit, if applicable.  Typically, this data is either a <tt>MoaHandle</tt>, aMacintosh handle or pointer, or a Windows global handle.  See Directorproperty.rtf for a table of <tt>mediaLabels </tt>and <tt>mediaFormats</tt>supported for movies. <p></DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "GetNthCast">GetNthCast()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>GetNthCast(PIMoaDrMovie2 <I>This</I>, <BR><DD>MoaDrCastIndex <I>movieCastIndex</I>, <BR>PIMoaDrCast FAR * <I>ppIMoaDrCast)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>movieCastIndex</I></CODE><DD>Index of the cast (from 1 to GetCastCount() of interest<BR><BR><DT><CODE><I>ppIMoaDrCast)</I></CODE><DD>Pointer to a <tt>PIMoaDrCast</tt> to receive a pointer to the cast interface<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><CODE>MoaError</CODE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD>Obtains an interface to one of the movie's casts by index. The interface is then owned by the caller, and the caller is responsible for releasing it when it is no longerneeded.</DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "GetProp">GetProp()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>GetProp(PIMoaDrMovie2 <I>This</I>, <BR><DD>MoaMmSymbol <I>symbol</I>, <BR>PMoaMmValue <I>pPropValue)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>symbol</I></CODE><DD>The <tt>MoaMmSymbol</tt> for the  property of interest.<BR><BR><DT><CODE><I>pPropValue)</I></CODE><DD>Pointer to a <tt>MoaMmValue</tt> to receive the value<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><TABLE BORDER="2"><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=235><TT>kMoaErr_NoErr</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=355>Property exists and value was returned</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=235><TT>kMoaErr_BadParam</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=355>Invalid <TT><I><FONT SIZE=2 FACE="Courier New">pPropValue </FONT></I></TT>passed in</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=235><TT>kMoaMmErr_PropertyNotFound</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=355>Property isn't supported by this class</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=235><TT>kMoaMmErr_InternalError</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=355>Property exists but couldn't get due to internal error</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=235><TT>kMoaMmErr_NoMemForString</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=355>Couldn't allocate memory for string value data</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=235><TT>kMoaErr_OutOfMem</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=355>Couldn't allocate memory for other value data</TD></TR></TABLE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD><p>Obtains the value of the specified movie property. To get the symbol from astring, use the <tt>IMoaMmUtils::StringToSymbol()</tt>.  The caller isresponsible for releasing the value at <tt><i>pPropValue  </i></tt>with<tt>IMoaMmUtils::ValueRelease()</tt> when it is no longer  needed.<p></DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "GetScoreAccess">GetScoreAccess()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>GetScoreAccess(PIMoaDrMovie2 <I>This</I>, <BR><DD>PIMoaDrScoreAccess FAR * <I>ppScore)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>ppScore)</I></CODE><DD>Score access interface for movie<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><CODE>MoaError</CODE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD>Gets a ScoreAccess interface provider for the movie's score. </DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "GetStageBufferGC">GetStageBufferGC()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>GetStageBufferGC(PIMoaDrMovie2 <I>This</I>, <BR><DD>PIMoaMmGC FAR * <I>ppBufferGC)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>ppBufferGC)</I></CODE><DD>Pointer to a <tt>IMoaMmGC</tt> interface for the stage offscreen buffer<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><CODE>MoaError</CODE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD>Obtains the graphics context for the stage offscreen buffer.  This includes thebounds rectangle, pixel depth, as well as platform-specific information (suchas the WindowPtr of the window on the Macintosh or the HWND on Windows). Thisinformation is valid only for the duration of the current call into your Xtramethod, because the stage window can change in depth or size at any time (andmay be disposed of and reallocated in the process).   You must release thegraphics context when done by calling its <tt>Release()</tt> method.   <p><h6><font face=arial,helvetica,sans-serif><a name="RTFToC20">Important note about graphic contexts</a></font></h6><p><p>This method should only be called by Lingo and Tool Xtras to do temporarydrawing into the stage window.  It should be called just before doing yourdrawing, and the acquired interface should be released before returning controlto the calling application. This is because <tt>nativeGCInfo</tt> for the stagebuffer can become invalid at any time.  For example, the buffer may be dumpedand recreated if window size, monitor depth, or other display characteristicschange.  <p><p>It's not always possible to obtain the a graphics context for the stage buffer.During registration, startup, and shut-down, internal movie data structures maynot be initialized, thus trying to get the GC for it will return the err<tt>kMoaDrErr_MovieNotOpen</tt>.  Xtra developers should never attempt toacquire a graphics context and hold onto it; instead, you should acquire theinterface each time you need to draw and release it before your methodreturns.<p><p>Finally, this method should not be called to get a context for sprite ortransition drawing.  Instead, use the graphic context passed to you explicitlyin <tt>IMoaMmSpriteActor::Image()</tt> or<tt>IMoaDrTransitionActor::Continue()</tt>.  If you attempt to use thiscontext, your Xtra will not work correctly in MIAWs, export, or otherapplications such as Authorware. <p></DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "GetStageWindowGC">GetStageWindowGC()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>GetStageWindowGC(PIMoaDrMovie2 <I>This</I>, <BR><DD>PIMoaMmGC FAR * <I>ppWindowGC)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>ppWindowGC)</I></CODE><DD>Pointer to a <tt>IMoaMmGC</tt> interface for the stage window<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><CODE>MoaError</CODE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD><p>Obtains the graphics context for the stage window.  This includes the boundsrectangle, pixel depth, as well as platform-specific information (such as theWindowPtr of the window on the Macintosh, or the HWND on Windows). Thisinformation is valid only for the duration of the current call into your Xtramethod, because the stage window can change in depth or size at any time (andmay be disposed of and reallocated in the process).   You must release thegraphics context when done by calling its <tt>Release() </tt>method.   <p><p><h6><font face=arial,helvetica,sans-serif><a name="RTFToC22">Important note about graphic contexts</a></font></h6><p><p>This method should only be called by Lingo and Tool Xtras to do temporarydrawing into the stage window.  It should be called just before doing yourdrawing, and the acquired interface should be released before returning controlto the calling application. This is because <tt>nativeGCInfo</tt> for the stagebuffer can become invalid at any time.  For example, the buffer may be dumpedand recreated if window size, monitor depth, or other display characteristicschange.  <p><p>It's not always possible to obtain the a graphics context for the stage window.During registration, startup, and shut-down, internal movie data structures maynot be initialized, thus trying to get the GC for it will return the err<tt>kMoaDrErr_MovieNotOpen</tt>.  Xtra developers should never attempt toacquire a graphics context and hold onto it; instead, you should acquire theinterface each time you need to draw and release it before your methodreturns.<p><p>Also, <tt>GetStageWindowGC()</tt> should not be used to get a parent window forWindows(TM) dialogs.  The correct procedure is to use the <tt>IMoaMmUtils</tt>Windows API cover methods such as <tt>WinDialogBox()</tt> and<tt>WinDialogBoxParam()</tt>.  If you're putting up a system dialog on Windows,use <tt>WinGetParent()</tt> to get the parent HWND to use, and bracket yourdialog call with <tt>WinPrepareDialogBox()</tt> and<tt>WinUnprepareDialogBox()</tt>.<p><p>Finally, these calls should not be used for sprite or transition drawing.Instead, use the graphic context passed to you explicitly in<tt>IMoaMmSpriteActor::Image()</tt> or<tt>IMoaDrTransitionActor::Continue()</tt>.  If you do attempt to use thiscontext, your Xtra will not work correctly in MIAWs, export, or otherapplications such as Authorware. <p></DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "MoveCastMember">MoveCastMember()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>MoveCastMember(PIMoaDrMovie2 <I>This</I>, <BR><DD>PMoaDrCMRef <I>pSrcMemRef</I>, <BR>PMoaDrCMRef <I>pDestMemRef)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>pSrcMemRef</I></CODE><DD>Pointer to <tt>MoaDrCMRef</tt> containing cast member to move<BR><BR><DT><CODE><I>pDestMemRef)</I></CODE><DD>Pointer to <tt>MoaDrCMRef</tt> containing location to move to<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><CODE>MoaError</CODE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD>Moves the cast member in the location referred to by <tt>pSrcMemRef</tt> to the locationreferred to by <tt>pDestMemRef</tt>.  If there is an existing cast member in the destinationslot, it will be removed.</DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "NewCast">NewCast()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>NewCast(PIMoaDrMovie2 <I>This</I>, <BR><DD>PMoaChar <I>pCastName</I>, <BR>MoaBoolParam <I>bExternal</I>, <BR>PMoaDrCastIndex <I>pNewCastIndex)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>pCastName</I></CODE><DD>Name of cast<BR><BR><DT><CODE><I>bExternal</I></CODE><DD>Specify external or internal<BR><BR><DT><CODE><I>pNewCastIndex)</I></CODE><DD>Position of new cast in current movie<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><CODE>MoaError</CODE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD>Creates a new cast and add it to the movie's cast list.  Returns the positionof the new cast in the <tt><i>pNewCastIndex</i></tt> argument.  </DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "RemoveCast">RemoveCast()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>RemoveCast(PIMoaDrMovie2 <I>This</I>, <BR><DD>MoaDrCastIndex <I>castIndexToRemove)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>castIndexToRemove)</I></CODE><DD><tt>MoaDrCastIndex</tt> for cast to remove<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><CODE>MoaError</CODE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD>Removes the cast specified by <tt><i>castToRemove</i></tt> from the movie'scast list.</DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "Save">Save()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>Save(PIMoaDrMovie2 <I>This</I>, <BR><DD>PMoaChar <I>pNewPathName</I>, <BR>MoaBoolParam <I>bSaveExtCasts)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>pNewPathName</I></CODE><DD>Null-terminated C string for the path<BR><BR><DT><CODE><I>bSaveExtCasts)</I></CODE><DD>Specifies whether to save external casts<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><TABLE BORDER="2"><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=157><TT>kMoaErr_NoErr</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=433>Successful</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=157><TT>kMoaDrErr_DiskIO</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=433>IO error during file access</TD></TR></TABLE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD><p>Saves the movie to the path. Specify the complete path, including file name, tosave the cast to a new file.  Pass NULL as <tt><i>pNewPathName</i></tt>  tosave the cast in its previous file.  <p></DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "SendSpriteMessage">SendSpriteMessage()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>SendSpriteMessage(PIMoaDrMovie2 <I>This</I>, <BR><DD>MoaDrSpriteChanIndex <I>chanIndex</I>, <BR>MoaMmSymbol <I>handlerName</I>, <BR>MoaLong <I>nArgs</I>, <BR>PMoaMmValue <I>pArgs</I>, <BR>PMoaMmValue <I>pResult</I>, <BR>MoaBool FAR * <I>pHandled)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>chanIndex</I></CODE><DD>Channel number of sprite to send message to.<BR><BR><DT><CODE><I>handlerName</I></CODE><DD>Symbol for the handler (message) name<BR><BR><DT><CODE><I>nArgs</I></CODE><DD>Number of arguments you're passing<BR><BR><DT><CODE><I>pArgs</I></CODE><DD>Pointer to an array of <tt>MoaMmValues</tt> containing arguments<BR><BR><DT><CODE><I>pResult</I></CODE><DD>Pointer to a <tt>MoaMmValue</tt> to receive a result<BR><BR><DT><CODE><I>pHandled)</I></CODE><DD>arguments to a <tt>MoaBool</tt> to receive TRUE if the message was handled somewhere down the chain or FALSE if it was not.<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><CODE>MoaError</CODE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD>Sends a sprite message to be passed through the standard Director spritemessage hierarchy beginning with the sprite script of the sprite in thespecified channel. This method is similar to<tt>IMoaDrSpriteCallback::SendSpriteMessage()</tt>.You must pass in NULL to<tt><i>pResult</i></tt> if you do not expect a result; you must pass in a validpointer if you do expect a result.</DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "SetFrameLabel">SetFrameLabel()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>SetFrameLabel(PIMoaDrMovie2 <I>This</I>, <BR><DD>MoaDrFrameIndex <I>frameIndex</I>, <BR>PMoaChar <I>pLabelName)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>frameIndex</I></CODE><DD>A <tt>MoaDrFrameIndex</tt> holding the number of the frame<BR><BR><DT><CODE><I>pLabelName)</I></CODE><DD>Pointer to a <tt>MoaChar</tt> to receive the name of the marker associated with the given score frame<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><CODE>MoaError</CODE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD>Adds, modifies, or deletes a score label (marker) or a frame.  You pass in theframe number and a C string for the new label.  If a label doesn't exist forthat frame, one will be added.  If one does exist, it'll be replaced with thenew one you specify.  If you pass in NULL for <tt><i>pLabelName</i></tt>, anycurrent label for that frame is deleted.</DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "SetMedia">SetMedia()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>SetMedia(PIMoaDrMovie2 <I>This</I>, <BR><DD>PMoaDrMediaInfo <I>pMediaInfo)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>pMediaInfo)</I></CODE><DD>Pointer to a caller-owned media information structure<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><CODE>MoaError</CODE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD>Sets movie media data.  This is how one replaces the score data associated witha movie.  This method copies caller-supplied media data and associates it withthe movie. Before making this call, use <tt>IMoaDrUtils::NewMediaInfo() </tt>tofill out the structure, specifying NULL for the <tt>aux </tt>field and<tt>kMoaDrMediaOpts_None </tt>for the <tt>options </tt>field.  The callerpopulates a <tt>MoaDrMediaInfo </tt>structure with symbols indicating thesupplied chunk of media (<tt>labelSymbol</tt>) and the supplied format(<tt>formatSymbol</tt>), and the media data itself (<tt>mediaData</tt>).  Ifthe label and format are supported by the movie, a call to this method copiesthe caller's data and replaces any existing media data for the supplied labelfor the movie.  Since the data is copied, the caller retains ownership of themedia data passed in. Typically this data is either a <tt>MoaHandle</tt>, aMacintosh handle or pointer, or a Windows global handle.   See Directorproperty.rtf for a table of <tt>mediaLabels  </tt>and <tt>mediaFormats</tt>supported for movies.</DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "SetProp">SetProp()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>SetProp(PIMoaDrMovie2 <I>This</I>, <BR><DD>MoaMmSymbol <I>symbol</I>, <BR>ConstPMoaMmValue <I>pPropValue)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>symbol</I></CODE><DD>The <tt>MoaMmSymbol</tt> for the property of interest<BR><BR><DT><CODE><I>pPropValue)</I></CODE><DD>Pointer to a caller-owned <tt>ConstPMoaMmValue</tt> structure from which to copy the new value<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><TABLE BORDER="2"><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=253><TT>kMoaErr_NoErr</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=337>Property exists and value was set</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=253><TT>kMoaErr_BadParam</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=337>Invalid <TT><I><FONT SIZE=2 FACE="Courier New">pPropValue </FONT></I></TT>passed in</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=253><TT>kMoaMmErr_PropertyNotFound</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=337>Property isn't supported by this class</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=253><TT>kMoaMmErr_InternalError</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=337>Property exists, value ok, couldn't set--internal error</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=253><TT>kMoaMmErr_NoMemForString</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=337>Couldn't allocate memory for setting string value data</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=253><TT>kMoaErr_OutOfMem</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=337>Couldn't allocate memory for setting other value data</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=253><TT>kMoaMmErr_IntegerExpected</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=337>Type mismatch: integer value expected</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=253><TT>kMoaMmErr_SymbolExpected</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=337>Type mismatch: symbol value expected</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=253><TT>kMoaMmErr_FloatExpected</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=337>Type mismatch: float value expected</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=253><TT>kMoaMmErr_StringExpected</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=337>Type mismatch: string value expected</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=253><TT>kMoaMmErr_PointExpected</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=337>Type mismatch: point value expected</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=253><TT>kMoaMmErr_RectExpected</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=337>Type mismatch: rect value expected</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=253><TT>kMoaMmErr_ValueTypeMismatch</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=337>Type mismatch: other value expected (non-specific)</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=253><TT>kMoaDrErr_CastMemberExpected</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=337>Type mismatch: <TT>CMRef</TT> value expected</TD></TR></TABLE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD><p>Sets the value of the specified property. To get the symbol from a string, usethe <tt>IMoaMmUtils::StringToSymbol() </tt>method.  The caller continues tomaintain ownership of the value passed in, and should release it using<tt>IMoaMmUtils::ValueRelease() </tt>when it is no longer needed.<p></DL><BR><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A name = "UpdateStageRect">UpdateStageRect()</A></font></h3><DL><DT><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DD><CODE><DL><DT>UpdateStageRect(PIMoaDrMovie2 <I>This</I>, <BR><DD>MoaRect FAR * <I>pWindowRect</I>, <BR>MoaRect FAR * <I>pBufferRect)</I>)</CODE></DL><BR></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DD><DL><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrMovie2</CODE> interface<BR><BR><DT><CODE><I>pWindowRect</I></CODE><DD>Pointer to a <tt>MoaRect</tt> describing the area of the stage window to update<BR><BR><DT><CODE><I>pBufferRect)</I></CODE><DD>Pointer to a <tt>MoaRect</tt> describing the area of the offscreen buffer from where to update<BR><BR></DL></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DD><CODE>MoaError</CODE></DL><DL><DT><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DD>Updates a rectangular area of the stage window from a rectangular area of thestage's offscreen buffer.  Stretching or shrinking of parts of the image can beachieved by using a <tt>windowRect </tt>which differs in size from the<tt>bufferRect</tt>.  Note that this call does not cause all sprites on thestage to be reimaged; it simply refreshes the stage window from Director'soffscreen compositing buffer. </DL><BR><hr width=45% align=left><BR><A HREF = "../copyrite.htm"> Copyright &#169; 1995, 1996, 1997, 1998, 1999 Macromedia, Inc.</A> </P></body></html>
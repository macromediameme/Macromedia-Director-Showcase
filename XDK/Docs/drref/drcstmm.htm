<HTML><HEAD><TITLE>IMoaDrCastMem</TITLE></HEAD><body bgcolor="#FFFFFF" link="#ff3300" alink="#ff3300" vlink="#333399"><A HREF = "../drdg/index.htm">DR Developer's Guide</A><BR><A HREF = "index.htm"> DR Interfaces</A> | <A HREF = "drmthndx.htm">DR Methods</A> | <A HREF = "drtypndx.htm">DR Types and Misc API</A><hr width=45% align=left><h2><font face=arial,helvetica,sans-serif>IMoaDrCastMem</font></h2><hr width=45% align=left><P>Interface ID: <CODE>IID_IMoaDrCastMem<BR></CODE>Pointer type: <CODE>PIMoaDrCastMem<BR></CODE>Inheritance: <A HREF = "drmdownr.htm">IMoaDrMediaOwner</A><BR>Header file: <A HREF = "../../include/driservc.h">driservc.h</A><BR><h3><font face=arial,helvetica,sans-serif>Description</font></h3><DL><DT><DD><BR>The <TT>IMoaDrCastMem </TT>interface provides access to specific cast members within a cast.<BR></DL><h3><font face=arial,helvetica,sans-serif><A NAME="RTFToC2">Cast member properties</FONT></A></h3><DL><DT><DD><TT>IMoaDrCastMem</TT>inherits from the <TT>IMoaMmPropOwner</TT>interface, providing for access to data through the properties mechanism described in the &quot;Multimedia Services&quot; chapter in the <I>Development Guide </I>document. See the &quot;Properties&quot; section for information on the properties defined for objects providing the <TT>IMoaDrCastMem</TT>interface. <BR><BR></DL><h3><font face=arial,helvetica,sans-serif><A NAME="RTFToC3">Cast member media types</FONT></A></h3><DL><DT><DD>Because this interface inherits from <TT>IMoaDrMediaOwner</TT>, you can use it to access the properties and media data associated with a cast member. <BR>Methods of the <TT>IMoaDrMediaOwner</TT>interface include pointers to a <TT>MoaDrMediaInfo</TT>structure as parameters. Before a <TT>GetMedia()</TT>,<TT>SetMedia()</TT>, or <TT>AttachMedia()</TT>call, use <TT>IMoaDrUtils::NewMediaInfo()</TT>to fill out the structure, specifying NULL for the<TT>aux </TT>field and <TT>kMoaDrMediaOpts_None</TT>for the <TT>options </TT>field. Using this call forces you to fill out all the needed parameters. The <TT>aux </TT>information currently applies only when setting image media.<BR>The <TT>formatSymbol</TT>and<TT>labelSymbol</TT>members of this structure are <TT>MoaMmSymbols</TT>. These symbols are obtained from strings using the host app symbol dictionary, accessed through the <TT>StringToSymbol()</TT>method of the <TT>IMoaMmUtils</TT>interface For more on how this mechanism is implemented, see the<TT>IMoaDrMediaOwner</TT>.<BR>Here's a brief summary of the media labels supported for Director cast members:<BR><TABLE border="2"><TR><TH align="left" valign="middle" width="105"><B>Media</B></TH><TH align="left" valign="middle"><B>Label Description</B></TH></TR><TR><TD align="left" valign="top"><TT>Composite</TT></TD><TD align="left" valign="top">Cast member media data in a portable (byte-swapped) opaque handle.</TD></TR><TR><TD align="left" valign="top"><TT>Image</TT></TD><TD align="left" valign="top">Primary image data (for a bitmap, PICT, and so on). </TD></TR><TR><TD align="left" valign="top"><TT>Text</TT></TD><TD align="left" valign="top">Text character string</TD></TR><TR><TD align="left" valign="top"><TT>TextStyles</TT></TD><TD align="left" valign="top">Text style run data</TD></TR><TR><TD align="left" valign="top"><TT>Sound</TT></TD><TD align="left" valign="top">Sound samples</TD></TR><TR><TD align="left" valign="top"><TT>Palette</TT></TD><TD align="left" valign="top">Palette entries</TD></TR><TR><TD align="left" valign="top"><TT>Score</TT></TD><TD align="left" valign="top">Score data for a movie or film loop</TD></TR></TABLE><P>The following table provides a brief summary of the media formats supported for Director cast members.<P><TABLE border="2"><TR><TH align="left" valign="middle" width="125"><B>Media Format</B></TH><TH align="left" valign="middle"><B>Description</B></TH></TR><TR><TD align="left" valign="top"><TT>moaHandle</TT></TD><TD align="left" valign="top">Generic <TT>MoaHandle</TT>of data</TD></TR><TR><TD align="left" valign="top"><TT>moaTEStyles</TT></TD><TD align="left" valign="top"><TT>textStyles</TT>stored in a <TT>MoaHandle</TT></TD></TR><TR><TD align="left" valign="top"><TT>macTEStyles</TT></TD><TD align="left" valign="top"><TT>textStyles</TT>in TextEdit <TT>StScrpHandle</TT>format stored in a Macintosh handle</TD></TR><TR><TD align="left" valign="top"><TT>macPICT</TT></TD><TD align="left" valign="top">Macintosh <TT>PicHandle</TT></TD></TR><TR><TD align="left" valign="top"><TT>macSnd</TT></TD><TD align="left" valign="top">Macintosh <TT>sndHdl.</TT>Handle in Macintosh sound resource format. </TD></TR><TR><TD align="left" valign="top"><TT>macColorTable</TT></TD><TD align="left" valign="top">Macintosh <TT>CTabHandle</TT>. Handle to a <TT>ColorTable</TT>record</TD></TR><TR><TD align="left" valign="top"><TT>winDIB</TT></TD><TD align="left" valign="top">Windows packed DIB <TT>GlobalHandle</TT>with bitmap information, color table, and bits</TD></TR><TR><TD align="left" valign="top"><TT>winWAVE</TT></TD><TD align="left" valign="top">Windows RIFF WAVE <TT>GlobalHandle</TT>. RIFF sound format. </TD></TR><TR><TD align="left" valign="top"><TT>winPALETTE</TT></TD><TD align="left" valign="top">Windows HPALETTE <TT>GlobalHandle</TT>. RIFF palette format </TD></TR></TABLE><P><A NAME="RTFToC4">Composite media</A>label <P>All media types support the composite label; that is, you can get the media data for any cast member as a single, opaque portable<TT>MoaHandle</TT>. Because Director handles the byteswapping of these, they're safe to write out to disk and read back in on another platform. The format for composite media is always <TT>MoaHandle</TT>.<h6><font face=arial,helvetica,sans-serif><A NAME="RTFToC5"><FONT SIZE=1>Other media</FONT></A><FONT SIZE=1>labels </FONT></font></h6><P>In addition to composite, each built-in cast member type supports one or more other labels or formats. For example, bitmaps, PICTs, Rich Text, and OLE support the image label (RichText and OLE are Get-only for this); the bitmap format supported depends on the platform (macPICT on mac, winDIB on Windows). In the future, we may add additional formats, such as a portable pixel map format which is identical on both platforms.<P>Text supports multiple labels: <TT>text</TT>to get or set the ASCII text, <TT>textStyles</TT>(Macintosh-only) to get or set the style data independently from the ASCII.<P>Both movies and cast members support the <TT>score</TT>media label, with the format <TT>MoaHandle</TT>. This lets you get and set the score data itself. You can attach a <TT>ScoreAccess </TT>interface to one of these data handles using <TT>IMoaDrUtils::NewScoreAccess()</TT>. However, if you want to edit the score of an existing movie or cast member, it's easier just to obtain the <TT>ScoreAccess</TT>interface directly from the object itself using<TT>IMoaDrCastMem::GetScoreAccess()</TT>,<P>Here's a complete list of the media labels and formats supported by the Director cast member types:<P><TABLE BORDER="2"><TR><TH ALIGN="LEFT" WIDTH=129><B>Cast member type</B></TH><TH ALIGN="LEFT" WIDTH=187><B>Media label</B></TH><TH ALIGN="LEFT" WIDTH=187><B>Media format</B></TH></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=129><TT>BITMAP</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>Composite<BR>Image</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>moaHandle <BR>mac: macPICT<BR>win: winDIB</TT></TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=129><TT>FILMLOOP</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>Composite<BR>Score</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>moaHandle<BR>moaHandle</TT></TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=129><TT>TEXTFIELD</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>Composite<BR>Text<BR><BR>TextStyles</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>moaHandle <BR>moaHandle (null-terminated string)<BR>mac: macTEStyles<BR>mac &amp; win: moaTEStyles</TT></TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=129><TT>PALETTE</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>Composite<BR>Palette<BR>Palette</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>moaHandle <BR>mac: macColorTable<BR>win: winPALETTE</TT></TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=129><TT>PICT</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>Composite<BR>Image<BR>Image</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>moaHandle <BR>mac: macPICT<BR>win: winDIB</TT></TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=129><TT>SOUND</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>Composite<BR>Sound<BR>Sound</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>moaHandle <BR>mac: macSnd <BR>win: winWAVE</TT></TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=129><TT>BUTTON</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>Composite<BR>Text<BR><BR>TextStyles</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>moaHandle<BR>moaHandle (null-terminated string handle) <BR>mac: macTEStyles <BR>mac &amp; win: moaTEStyles</TT></TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=129><TT>SHAPE</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>Composite</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>moaHandle</TT></TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=129><TT>MOVIE</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>Composite</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>moaHandle</TT></TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=129><TT>DIGITAL VIDEO</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>Composite</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>moaHandle</TT></TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=129><TT>SCRIPT</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>Composite</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>moaHandle<BR>NOTE: Script text can be accessed using GetProp() and SetProp()</TT></TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=129><TT>RICH TEXT</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>Composite<BR>Text<BR><BR><BR><BR>Image (Get Only)</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>moaHandle<BR>moaHandle (null-terminated string handle). Set allowed only in authoring applications<BR>mac: macPICT <BR>win: winDIB</TT></TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=129><TT>OLE</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>Composite<BR>Image (Get Only)</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>moaHandle<BR>mac: macPICT <BR>win: winDIB</TT></TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=129><TT>XTRA</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>Composite</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>moaHandle</TT></TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=129><TT>TRANS</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>Composite</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=187><TT>moaHandle</TT></TD></TR></TABLE><P><A NAME="RTFToC6">Media access in sprite Xtras</A><P>Sprite Xtras, which provide cast members through extensions to Director, only support the <TT>composite</TT>media label, which is a combination of the Xtra's media, properties, and built-in properties combined in an opaque format. You can get or set the media data of any Xtra-based cast member type as a composite <TT>MoaHandle</TT>.<BR></DL><P><h3><font face=arial,helvetica,sans-serif>Methods</font></h3><DL><DT><DD></DL><h4><font face=arial,helvetica,sans-serif>Property owner methods </font></h4><DL><DT><DD><A HREF = "#GetProp">GetProp()</A><BR><A HREF = "#SetProp">SetProp()</A></DL><h4><font face=arial,helvetica,sans-serif>Media owner methods </font></h4><DL><DT><DD><A HREF = "#GetMedia">GetMedia()</A><BR><A HREF = "#SetMedia">SetMedia()</A><BR><A HREF = "#AttachMedia">AttachMedia()</A></DL><h4><font face=arial,helvetica,sans-serif>Scripting Support </font></h4><DL><DT><DD><A HREF = "#CallFunction">CallFunction()</A><BR><A HREF = "#CallHandler">CallHandler()</A></DL><h4><font face=arial,helvetica,sans-serif>Member information </font></h4><DL><DT><DD><A HREF = "#GetMemberIndex">GetMemberIndex()</A></DL><h4><font face=arial,helvetica,sans-serif>Acquiring <TT>IMoaMmScoreAccess</TT></font></h4><DL><DT><DD><A HREF = "#GetScoreAccess">GetScoreAccess()</A></DL><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="AttachMedia">AttachMedia()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><CODE><DT>AttachMedia(PIMoaDrCastMem<I>This</I>, <DD>PMoaDrMediaInfo<I>pMediaInfo</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCastMem</CODE>interface<BR><BR><DT><CODE><I>pMediaInfo</I></CODE><DD><CODE>PMoaDrMediaInfo</CODE>Pointer to a caller- owned media information structure <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Attaches media to a cast member, releasing it from the caller. This is the same as the <TT>SetMedia()</TT>method except instead of copying the data, it is moved to the cast member. (In effect this method is a <TT>SetMedia()</TT>call followed by a <TT>ReleaseMedia()</TT>call.) <BR><BR>Before making this call, use <TT>IMoaDrUtils::NewMediaInfo()</TT>to fill out the media information structure, specifying NULL for the <TT>aux </TT>field and <TT>kMoaDrMediaOpts_None </TT>for the <TT>options </TT>field.<BR><BR>On enter, the <TT>labelSymbol </TT>and<TT>formatSymbol</TT>fields should be populated with symbols indicating which chunk of media is to be attach (<TT>labelSymbol</TT>), and what format the media is supplied in (<TT>formatSymbol</TT>). The <TT>mediaData </TT>field should hold the data itself (typically a <TT>MoaHandle</TT>, Macintosh Handle, or Windows global handle) <BR><BR>Upon return, if there is no error, the media has changed ownership and belongs to the host application, and should no longer be referenced by the caller. This method is provided to allow the host application to optimize media-transfer if possible; it may prevent an extra copy of the media data, which may occur with separate <TT>SetMedia()</TT>and <TT>ReleaseMedia()</TT>calls).<BR><BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="CallFunction">CallFunction()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><CODE>CallFunction(PIMoaDrCastMem<I>This</I>, <DD>MoaMmSymbol<I>methodName</I>, <BR>MoaLong<I>nArgs</I>, <BR>ConstPMoaMmValue<I>pArgs</I>, <BR>PMoaMmValue<I>pResult</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCastMem</CODE>interface<BR><BR><DT><CODE><I>methodName</I></CODE><DD><CODE>MoaMmSymbol</CODE>Symbol of the method (function) to call <BR><BR><DT><CODE><I>nArgs</I></CODE><DD><CODE>MoaLong</CODE>Number of arguments, excluding the Xtra instance in <TT><I>pArgs</I>[0]</TT><BR><BR><DT><CODE><I>pArgs</I></CODE><DD><CODE>ConstPMoaMmValue</CODE>Array of arguments, with the first valid argument at <TT><I>pArgs</I>[1]</TT><BR><BR><DT><CODE><I>pResult</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to a <TT>MoaMmValue</TT>to receive a result value, if any. <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><TABLE BORDER="2"><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=252><TT>kMoaErr_NoErr</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=252>Successful</TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=252><TT>kMoaMmErr_FunctionNotFound</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=252><TT>F</TT>unction not supported </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=252><TT>kMoaMmErr_WrongNumberOfArgs</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=252><TT>A</TT>rgument count wrong, </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=252>Other Property/CallHandler errors </TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=252>Also acceptable here </TD></TR></TABLE></DL><P><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD><BR>Calls a cast member Lingo function. Pass the symbol of the function to call in the <TT><I>methodName </I></TT>parameter, along with the argument count (<TT><I>nArgs</I></TT>), the argument array (<TT><I>pArgs</I></TT>), and optionally, a pointer to a <TT>MoaMmValue</TT>to receive any result value. The argument array, <TT><I>pArgs</I></TT>, contains an array of <TT>MoaMmValues</TT>corresponding to the function arguments. <TT><I>pArgs</I>[0]</TT>is a reserved value and should not be referenced. The function parameters are supplied in <TT><I>pArgs</I>[1]</TT>through <TT><I>pArgs</I>[<I>nArgs</I>]</TT>. If the method has a return value, it should populate <TT><I>pResult</I></TT>with a new <TT>MoaMmValue</TT>containing the result. If the cast member does not support the function specified by <TT><I>methodName</I></TT>, it returns the error code <TT>kMoaMmErr_FunctionNotFound</TT>. If the number or types of arguments are incorrect, the function returns one of the appropriate <TT>MoaMmErrors</TT>(see mmtypes.h).<BR><BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="CallHandler">CallHandler()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><CODE>CallHandler(PIMoaDrCastMem<I>This</I>, <DD>MoaMmSymbol<I>handlerName</I>, <BR>MoaLong<I>nArgs</I>, <BR>PMoaMmValue<I>pArgs</I>, <BR>PMoaMmValue<I>pResult</I>, <BR>MoaBool FAR *<I>pHandled</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCastMem</CODE>interface<BR><BR><DT><CODE><I>handlerName</I></CODE><DD><CODE>MoaMmSymbol</CODE>Symbol for handler (message) name<BR><BR><DT><CODE><I>nArgs</I></CODE><DD><CODE>MoaLong</CODE>Number of arguments you're passing <BR><BR><DT><CODE><I>pArgs</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to an array of <TT>MoaMmValues</TT>containing arguments <BR><BR><DT><CODE><I>pResult</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to an array of <TT>MoaMmValues</TT>containing arguments <BR><BR><DT><CODE><I>pHandled</I></CODE><DD><CODE>MoaBool FAR *</CODE>Pointer to a <TT>MoaBool</TT>to receive TRUE if the handler exists in the script (message handled), or FALSE if it does not<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Calls a handler <TT><I>handlerName</I></TT>defined in the script associated with this cast member. The <TT><I>nArgs</I></TT>argument is the number of arguments to the handler, the <I>pArgs</I>argument is a <TT>MoaMmList</TT>of arguments as <TT>MoaMmValues</TT>. You must pass in NULL to <TT><I>pResult</I></TT>if you do not expect a result. You must pass in a valid pointer if you do expect a result. The handler call will be passed up the standard Lingo messaging hierarchy. The argument <I>pHandled</I>reports whether the handler was handled by any object in the hierarchy.<BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetMedia">GetMedia()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><CODE>GetMedia(PIMoaDrCastMem<I>This</I>, <DD><BR>PMoaDrMediaInfo<I>pMediaInfo</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCastMem</CODE>interface<BR><BR><DT><CODE><I>pMediaInfo</I></CODE><DD><CODE>PMoaDrMediaInfo</CODE>Pointer to a caller-owned media information structure <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Gets cast member media data. This method obtains a copy of the media associated with a cast member. Before making this call, use <TT>IMoaDrUtils::NewMediaInfo()</TT>to fill out the media information structure, specifying NULL for the <TT>aux </TT>field and <TT>kMoaDrMediaOpts_None </TT>for the <TT>options </TT>field. The caller partially populates a <TT>MoaDrMediaInfo</TT>struct with symbols indicating the requested chunk of media (<TT>labelSymbol</TT>) and the requested format (<TT>formatSymbol</TT>). After the call, the <TT>mediaData</TT>field is populated with the requested data; the type of this field depends on the format requested. The caller then owns the data and is responsible for disposing it, if applicable. Typically this data is either a <TT>MoaHandle</TT>, a Macintosh Handle or Pointer, or a Windows global handle. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetMemberIndex">GetMemberIndex()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><CODE>GetMemberIndex(PIMoaDrCastMem<I>This</I>, <DD>MoaDrMemberIndex FAR *<I>pMemberIndex</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCastMem</CODE>interface<BR><BR><DT><CODE><I>pMemberIndex</I></CODE><DD><CODE>MoaDrMemberIndex FAR *</CODE>Pointer to position of cast member in cast <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description </font></h4><DL><DT><DD><BR>Returns the position of the cast member <TT><I>This</I></TT>in its cast. <BR><BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetProp">GetProp()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><CODE>GetProp(PIMoaDrCastMem<I>This</I>, <DD>MoaMmSymbol<I>symbol</I>, <BR>PMoaMmValue<I>pPropValue</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCastMem</CODE>interface<BR><BR><DT><CODE><I>symbol</I></CODE><DD><CODE>MoaMmSymbol</CODE>The <TT>MoaMmSymbol</TT>for the property of interest <BR><BR><DT><CODE><I>pPropValue</I></CODE><DD><CODE>PMoaMmValue</CODE>Pointer to a caller-owned <TT>MoaMmValue</TT>structure to receive the value of the property <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><TABLE BORDER="2"><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=201><TT>kMoaErr_NoErr</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=303>Property exists and value was returned </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=201><TT>kMoaErr_BadParam</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=303>Invalid <TT><I>pPropValue </I></TT>passed in </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=201><TT>kMoaMmErr_PropertyNotFound</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=303>Property isn't supported by this class </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=201><TT>kMoaMmErr_InternalError</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=303>Property exists but couldn't get due to internal err </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=201><TT>kMoaMmErr_NoMemForString</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=303>Couldn't allocate memory for string value data </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=201><TT>kMoaErr_OutOfMem</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=303>Couldn't allocate memory for other value data </TD></TR></TABLE></DL><P><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Obtains the value of the specified cast member property. To get the symbol from a string, use the <TT>IMoaMmUtils::StringToSymbol()</TT>. The caller is responsible for releasing the value with <TT>IMoaMmUtils::ValueRelease()</TT>when it is no longer needed. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="GetScoreAccess">GetScoreAccess()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><CODE>GetScoreAccess(PIMoaDrCastMem<I>This</I>, <DD>struct IMoaDrScoreAccess FAR * FAR *<I>ppScore</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCastMem</CODE>interface<BR><BR><DT><CODE><I>ppScore</I></CODE><DD>struct IMoaDrScoreAccess FAR * FAR *<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Obtains a <TT>IMoaDrScoreAccess</TT>interface for accessing or editing the score associated with a film loop cast member. This method is only valid for film loop cast members <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="SetMedia">SetMedia()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><CODE>SetMedia(PIMoaDrCastMem<I>This</I>, <DD>PMoaDrMediaInfo<I>pMediaInfo</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCastMem</CODE>interface<BR><BR><DT><CODE><I>pMediaInfo</I></CODE><DD><CODE>PMoaDrMediaInfo</CODE>Pointer to a caller-owned media information structure <BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><CODE>MoaError</CODE></DL><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Sets cast member media data. This method copies caller-supplied media data and associates it with a cast member. Before making this call, use <TT>IMoaDrUtils::NewMediaInfo()</TT>to fill out the media information structure, specifying NULL for the <TT>aux </TT>field and <TT>kMoaDrMediaOpts_None </TT>for the <TT>options </TT>field. The caller populates a <TT>MoaDrMediaInfo</TT>structure with symbols indicating the supplied chunk of media (<TT>labelSymbol</TT>), the supplied format (<TT>formatSymbol</TT>), and the media data itself (<TT>mediaData</TT>). If the label and format are supported by the cast member, a call to this method copies the caller's data and replaces any existing media data for the supplied label for the cast member. Since the data is copied, the caller retains ownership of the media data passed in. Typically, this data is either a <TT>MoaHandle</TT>, a Macintosh Handle or pointer, or a Windows global handle. <BR></DL><P><hr width=45% align=left><h3><font face=arial,helvetica,sans-serif><A NAME="SetProp">SetProp()</A></font></h3><h4><font face=arial,helvetica,sans-serif>Syntax</font></h4><DL><DT><CODE>SetProp(PIMoaDrCastMem<I>This</I>, <DD>MoaMmSymbol<I>symbol</I>, <BR>ConstPMoaMmValue<I>pPropValue</I>)</CODE></DL><h4><font face=arial,helvetica,sans-serif>Parameters</font></h4><DL><DT><DD><DT><CODE><I>This</I></CODE><DD>Pointer to the <CODE>IMoaDrCastMem</CODE>interface<BR><BR><DT><CODE><I>symbol</I></CODE><DD><CODE>MoaMmSymbol</CODE>The <TT>MoaMmSymbol</TT>for the property of interest<BR><BR><DT><CODE><I>pPropValue</I></CODE><DD><CODE>ConstPMoaMmValue</CODE>Pointer to a caller-owned <TT>MoaMmValue</TT>structure to copy the new value for the property from<BR><BR></DL><h4><font face=arial,helvetica,sans-serif>Returns</font></h4><DL><DT><DD><TABLE BORDER="2"><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=214><TT>kMoaErr_NoErr</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=290>Property exists and value was set </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=214><TT>kMoaErr_BadParam</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=290>Invalid <TT><I>pPropValue </I></TT>passed in </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=214><TT>kMoaMmErr_PropertyNotFound</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=290>Property isn't supported by this class </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=214><TT>kMoaMmErr_InternalError</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=290>Property exists, value ok, couldn't set--internal error </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=214><TT>kMoaMmErr_NoMemForString</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=290>Couldn't allocate memory for setting string value data </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=214><TT>kMoaErr_OutOfMem</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=290>Couldn't allocate memory for setting other value data </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=214><TT>kMoaMmErr_IntegerExpected</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=290>Type mismatch: integer value expected </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=214><TT>kMoaMmErr_SymbolExpected</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=290>Type mismatch: symbol value expected </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=214><TT>kMoaMmErr_FloatExpected</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=290>Type mismatch: float value expected </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=214><TT>kMoaMmErr_StringExpected</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=290>Type mismatch: string value expected </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=214><TT>kMoaMmErr_PointExpected</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=290>Type mismatch: point value expected </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=214><TT>kMoaMmErr_RectExpected</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=290>Type mismatch: rect value expected </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=214><TT>kMoaMmErr_ValueTypeMismatch</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=290>Type mismatch: other value expected (non-specific) </TD></TR><TR><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=214><TT>kMoaDrErr_CastMemberExpected</TT></TD><TD ALIGN="LEFT" VALIGN="TOP" WIDTH=290>Type mismatch: <TT>CMRef</TT>value expected </TD></TR></TABLE></DL><P><h4><font face=arial,helvetica,sans-serif>Description</font></h4><DL><DT><DD>Sets a cast member property to a new value. To get the symbol from a string, use the <TT>IMoaMmUtils::StringToSymbol()</TT>., The caller continues to maintain ownership of the value passed in at <TT><I>pPropValue</I></TT>, and should release it using <TT>IMoaMmUtils::ValueRelease()</TT>when it is no longer needed. <BR></DL><P><hr width=45% align=left><P><A HREF="../copyrite.htm" >Copyright &#169; 1995, 1996, 1997, 1998, 1999 Macromedia, Inc.</A></BODY><!--#include virtual="/uber/html/footer.html" --></html>
<HTML><HEAD><TITLE>Scripting Xtras</TITLE><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1"><META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0"></HEAD><BODY bgcolor="#FFFFFF"  link="#ff3300" alink="#ff3300" vlink="#333399"><P><A HREF="index.htm">MM Developer's Guide</A><BR><A HREF="../mmref/index.htm">MM Interfaces</A> | <A HREF="../mmref/mmmthndx.htm">MM Methods</A>| <A HREF="../mmref/mmtypndx.htm">MM Types and Misc API</A> <BR><A HREF="../drref/index.htm">DR Interfaces</A> | <A HREF="../drref/drmthndx.htm">DR Methods</A>| <A HREF="../drref/drtypndx.htm">DR Types and Misc API</A><HR width=45% align=left><H3><FONT SIZE=4 face=arial,helvetica,sans-serif>Director 7 Xtra Development Kit: Multimedia Developer's Guide</FONT></H3><H2><FONT SIZE=5 face=arial,helvetica,sans-serif>Scripting Xtras</FONT></H2><HR width=45% align=left><H3><FONT SIZE=4 face=arial,helvetica,sans-serif>Introduction </FONT></H3><P>Scripting Xtras provide new functions to call through the scriptinginterface of an application. In Director, Scripting Xtras extendthe Lingo language.<H3><FONT SIZE=4 face=arial,helvetica,sans-serif>Scripting Xtra concepts </FONT></H3><H4><FONT face=arial,helvetica,sans-serif>Application scripting models</FONT></H4><P>In Director, the developer attaches scripts to various objectsin a movie: sprites, frames, cast members, and the movie itself.An object's scripts provide behavior specific to that object.The Lingo language abstracts some general behaviors useful throughoutthe playback of a movie. For example, a Lingo script can accessthe properties of objects such as sprites and cast members, anduse calculations in logical structures to control a movie basedon user input. <H4><FONT face=arial,helvetica,sans-serif>Global, parent, and child functions<BR></FONT></H4><P>Scripting Xtras can add three types of functions: global, parent,and child. <BR><BR>In Director, a global Xtra function is like other Lingo globalfunctions and commands. When a Scripting Xtra is available inDirector, any script can call its global functions. Parent andchild functions, like Director's parent scripts and child objects,let your Xtra define a type of object with specific propertiesand functions or handlers. A Lingo scripter can create instancesof those objects in any script, with each instance containingits own version of its properties. Parent functions are like globalsin that any script in a movie can call a Parent. To call a Childfunction, the scripter creates a new instance and assigns it toa variable. The script then invokes the child functions throughthe variable. The child is local to the script where it is created,and can be passed between scripts through handler calls. <BR><BR><H4><FONT face=arial,helvetica,sans-serif>Calling a Scripting Xtra<BR></FONT></H4><P>The way you call a scripting Xtra depend on the application you'rescripting from. The following table shows the ways to invoke aScripting Xtra.<BR><P><TABLE BORDER="2"><TR><TD WIDTH=108><B>Operation</B></TD><TD WIDTH=212><B>Director</B></TD></TR><TR><TD WIDTH=108>Call global function</TD><TD WIDTH=212>Call the function in any Lingo script, fill in arguments</TD></TR><TR><TD WIDTH=108>Call parent function</TD><TD WIDTH=212><FONT SIZE=2 FACE="Courier">functionName(xtra &quot;<CODE><I>xtraName</I>&quot; <BR><I>&lt;, args*&gt;</I>)</CODE></FONT></TD></TR><TR><TD WIDTH=108>Create child instance</TD><TD WIDTH=212><FONT SIZE=2 FACE="Courier">set myChild =<BR>New(xtra &quot;<CODE><I>xtraName</I>&quot; <BR><I>&lt;, args*&gt;</I>)</CODE></FONT></TD></TR><TR><TD WIDTH=108>Call child function</TD><TD WIDTH=212><FONT SIZE=2 FACE="Courier">functionName(myChild <BR><CODE><I>&lt;, args*&gt;</I>)</CODE></FONT></TD></TR><TR><TD WIDTH=108>Remove child</TD><TD WIDTH=212><FONT SIZE=2 FACE="Courier">set myChild = 0</FONT></TD></TR></TABLE><H3><FONT SIZE=4 face=arial,helvetica,sans-serif>Implementing a Scripting Xtra<BR></FONT></H3><P>A Scripting Xtra is defined by two classes: a registration classand a scripting class. <BR><BR>The registration class implements the <CODE>IMoaRegister</CODE>interface to inform an application of its capabilities. The <CODE>IMoaRegister::Register()</CODE>method describes an Xtra's capabilities through a <I>message table</I>,listing the name of the Xtra, and the names, types, and parametersof all the functions it provides. <BR><BR>The scripting class implements the <CODE>IMoaMmXScripting</CODE>interface to provide specific functions. This interface consistsof a single method, <CODE>Call()</CODE>. When called, this methodis passed a structure containing information from the functioncall, including the identity of the function called, the argumentsto the function, and a slot for any return value or values. Yourimplementation of <CODE>Call()</CODE> should evaluate this structureand provide a way to handle each function you specify in yourmessage table, along with a default return value for any callsyou don't handle. <BR><BR>In addition to implementing <CODE>IMoaMmXScripting</CODE>, theXtra class defines any instance variables required by global,parent, or child functions.<BR><BR>An application always creates an instance of the Scripting Xtrato support global and parent functions. This instance may notbe created until the user first invokes a function. It's safeto assume this instance won't be created when the applicationfist starts. (If you need to initialize libraries or perform otherstartup actions, implement the <CODE>IMoaInterrogator</CODE> interfacein your Xtra class.) Each time a script creates a new child instance,the application creates an additional instance of the Xtra class.In each case, your Xtra's <CODE>MoaCreate...</CODE> and <CODE>MoaDestroy...</CODE>functions are called, which means you may need to implement thesefunctions carefully to perform the proper initialization for theglobal instance or child instances of your Xtra.<BR><H4><FONT face=arial,helvetica,sans-serif>The registration class<BR></FONT></H4><P>To implement the registration class for a Scripting Xtra, youdefine a message table describing the Xtra and its functions.You also implement <CODE>IMoaRegister</CODE> to register the messagetable with the application.<BR><H5><A NAME="RTFToC12"><FONT SIZE=2 face=arial,helvetica,sans-serif>The messagetable </FONT></A><BR></H5><P>The Scripting Xtra message table is an array of strings that describethe Xtra and its functions. The following example illustratesall of the conventions used in defining the message table: <PRE><FONT SIZE=2>static char msgTable[] = { \        &quot;xtra nameOfXtra \n&quot; \ /* name of Scripting Xtra */        &quot;new object me <I>&lt;, args&gt;*</I> \n&quot; \ /* implements standard new() behavior */        &quot;forget object me <I>&lt;, args&gt;*</I> -- entirely optional-see text\n&quot; \        &quot;-- Lingo style comment \n&quot; \        &quot;* globalFunction <I>&lt;, args&gt;*</I> -- globalFunction description\n&quot; \        &quot;+ parentFunction object xt <I>&lt;, args&gt;*</I> -- parentFunction description \n&quot; \        &quot;childFunction object me <I>&lt;, args&gt;*</I> -- childFunction description\n&quot; \};</FONT></PRE><P>The first entry in the message table is the name of the ScriptingXtra. This name is used to invoke the Xtra's functions.<P>The remaining entries can be function definitions, comments (indicatedby a Lingo-style &quot;--&quot; prefix), or a definition followedby a comment. Function definitions include the name and scopeof the function, and the name and type of each argument. <P>Comments in the message table provide useful documentation, sincethe user can view the message list in the scripting interface-- through the <CODE>mMessageList()</CODE> command in Lingo.<BR><H5><A NAME="RTFToC13"><FONT SIZE=2 face=arial,helvetica,sans-serif>Functiondefinitions </FONT></A><BR></H5><P>A function definition follows a standard form:<BR><BR><CODE><I><FONT SIZE=2 FACE="Courier">&lt;scope prefix&gt; functionName&lt;object objectName&gt; &lt;, argType argName&gt;*<BR><BR></FONT></I></CODE>The <CODE><I><FONT SIZE=2 FACE="Courier">&lt;scopeprefix&gt; </FONT></I></CODE>indicates the scope of a function.Global functions are indicated by an asterisk (&quot;*&quot;)character, parent functions by a plus (&quot;+&quot;) character,and child functions by no prefix. The <CODE><I><FONT SIZE=2 FACE="Courier">functionName</FONT></I></CODE>entry represents the name used to invoke the function. <P>The function name can be followed by a list of argument descriptions.Each argument description includes the type of the argument followedby an optional name. The <CODE><I><FONT SIZE=2 FACE="Courier">&lt;objectobjectName&gt;</FONT></I></CODE> argument description is usedfor parent and child functions. For child functions, <CODE><I><FONT SIZE=2 FACE="Courier">objectName</FONT></I></CODE>is the child whose function is being invoked. For parent functions,<CODE><I><FONT SIZE=2 FACE="Courier">objectName</FONT></I></CODE>is a reference to the Xtra itself. The type of these argumentsis always <CODE>object</CODE>. The <CODE><I><FONT SIZE=2 FACE="Courier">argType</FONT></I></CODE>of other arguments can be of several types: <PRE><FONT SIZE=2>integerfloatstringsymbolobjectany*</FONT></PRE><P>For <CODE>integer</CODE>, <CODE>float</CODE>, <CODE>string</CODE>,<CODE>symbol</CODE>, and <CODE>object</CODE> arguments, the typeof the argument supplied must always match that specified in themessage table. The type any means the user can provide an argumentof any type in the specified position. The asterisk (*) meansthe user can provide any number and any type of arguments. <BR><H5><A NAME="RTFToC14"><FONT SIZE=2 face=arial,helvetica,sans-serif>Optional</FONT></A><CODE>new</CODE><FONT SIZE=2> and </FONT><CODE>forget</CODE><FONT SIZE=2>functions <BR></FONT></H5><P>Every Scripting Xtra may implement the optional child functions<CODE>new</CODE> and <CODE>forget</CODE>. These functions arepre-defined for specific purposes. <BR><BR>The <CODE>new</CODE> function is called when a child object iscreated. The first argument of the <CODE>new</CODE> function isthe child object. Your Xtra may define additional arguments toenable the author to customize the child from Lingo. Your implementationof <CODE>new</CODE> should perform custom initialization for thechild and respond to any arguments passed in by the author. <BR><BR>The <CODE>forget</CODE> function is called when a child objectis about to be removed from memory. You should release any memoryallocated in your <CODE>new</CODE> function. <BR><BR>Note that <CODE>forget</CODE> is a &quot;hidden&quot; function,never called directly from a script. Instead, Scripting Xtrasare disposed of by reassigning a child's variable to 0 in Lingo.The <CODE>forget</CODE> function is called automatically whenall references to the child are dropped <BR><H5><A NAME="RTFToC15"><FONT SIZE=2 face=arial,helvetica,sans-serif>ImplementingIMoaRegister</FONT></A><FONT SIZE=2 face=arial,helvetica,sans-serif> <BR></FONT></H5><P><A HREF="../MOREF/REGISTER.HTM">IMoaRegister</A> is the standardMOA interface provided for registering Xtras with an application.In the case of Scripting Xtras, you implement this interface topass your Xtra's message table to the application. Here's a typicalimplementation of <A HREF="../MOREF/REGISTER.HTM#Register"><FONT SIZE=2>IMoaRegister::Register()</FONT></A>:<PRE><FONT SIZE=2>STDMETHODIMP_(MoaError) XXPalette_IMoaRegister_Register(        XXPalette_IMoaRegister FAR * This,        PIMoaCache pCache, PIMoaDict pXtraDict){        X_ENTER        MoaError err = kMoaErr_NoErr;        PIMoaDict pRegDict;        /* Register that we are a Scripting Xtra */        err = pCache-&gt;lpVtbl-&gt;AddRegistryEntry(pCache,                pXtraDict,                &amp;CLSID_XXScripting,                &amp;IID_IMoaMmXScripting,                &amp;pRegDict);        if ( err == kMoaErr_NoErr)        {                /* Register the message table */                err = pRegDict-&gt;lpVtbl-&gt;\                Put(pRegDict, kMoaMmDictType_MessageTable,                        msgTable, 0, kMoaMmDictKey_MessageTable);        }        X_STD_RETURN(err);        X_EXIT}</FONT></PRE><H5><A NAME="RTFToC16"><FONT SIZE=2 face=arial,helvetica,sans-serif>Knowing whento register </FONT></A><BR></H5><P>Scripting Xtras are designed to work across Macromedia applications,but a given Scripting Xtra need not be application-independent.To prevent compatibility problems, it's important to be sure yourXtra works with the application that's attempting to registerit. <P>The <A HREF="../MOREF/APPINFO.HTM"><FONT SIZE=2>IMoaAppInfo</FONT></A>callback interface provides a way to check out the applicationregistering your Xtra. Within the <CODE>Register()</CODE> method,use this interface to determine various attributes of the applicationto be sure. <P>Your Xtra's <CODE>Register()</CODE> method should also check forany callback interfaces or supporting Xtras it needs.Director defines application-specific service interfaces toaccess objects in their presentation models. Call <CODE>QueryInterface()</CODE>on the application object within your Xtra's <CODE>Register()</CODE>method to be sure callback interfaces are available. <BR><H5><FONT SIZE=2 face=arial,helvetica,sans-serif>Note for Windows Scripting Xtradevelopers <BR></FONT></H5><P>Microsoft Visual C has a limit of 2048 characters for a staticstring. If you reach this limit, you must store your msgTablein a resource. Your registration code must then load the resource,put its content into the registry, then release the resource.(Remember to use <CODE>IMoaCallback::Begin/EndUsingResources()</CODE>when accessing resources from your Xtra.) <BR><H4><FONT face=arial,helvetica,sans-serif>The scripting class <BR></FONT></H4><P>The Scripting class provides the <CODE>IMoaMmXScripting</CODE>interface that implements the Xtra's functions. It provides instancevariables for the properties of child objects; it can also providespecific instance variables for access through global and parentfunctions. It may provide the <A HREF="../MMREF/MMINTRRG.HTM">IMoaMmInterrogator</A>and <A HREF="../MMREF/MMTRMNTR.HTM">IMoaMmTerminator</A> interfacesto perform initialization and cleanup for your Xtra.<BR><BR><H5><A NAME="RTFToC18"><FONT SIZE=2 face=arial,helvetica,sans-serif>Definingmethod symbols </FONT></A><BR></H5><P>Every implementaion of <CODE>IMoaMmXScripting</CODE> needs toinclude an enumeration consisting of symbols for each method thata Lingo Xtra implements. This enumeration is defined in the headerfile that declares the class and interface implementations. Themembers of this enumeration match the naming and ordering of thefunctions listed in the message table. For each function namein the message table, you create a corresponding enum with theprefix &quot;<CODE>m_</CODE>&quot;, as follows:<PRE><FONT SIZE=2>enum {         m_new = 0,         m_globalFunction,         m_parentFunction,         m_childFunction};</FONT></PRE><P>Values in this enumeration enable the script interpreter to convertfunction names listed in your message table to calls into yourimplementation. The order in this enumeration must match the orderof function entries in the message table. Otherwise, the scriptinterpreter will call the wrong function. <BR><H5><A NAME="RTFToC20"><FONT SIZE=2 face=arial,helvetica,sans-serif>Creator anddestructor functions </FONT></A><BR></H5><P>An earlier discussion mentions that one instance of the Scriptingclass is always created to respond to a Scripting Xtra's globaland parent functions. This instance is usually created the firsttime a script in a presentation calls a global or parent function.A new instance of the Xtra class is also created each time a newchild is created. This instance supports the child's unique propertiesthrough its instance variables. This means that the <CODE>MoaCreate...</CODE>and <CODE>MoaDestroy...</CODE> functions for the Xtra class shouldbe designed carefully. For general allocations and initializationsat startup, the Xtra class should probably implement the <A HREF="../MMREF/MMINTRRG.HTM">IMoaMmInterrogator</A>interface. To allocate and initialize resources for a child instance,implement the <CODE>new</CODE> function in the <CODE>IMoaMmXScripting::Call()</CODE>method. The <CODE>new</CODE> function is called for each childcreated from your Scripting Xtra. <BR><H5><A NAME="RTFToC21"><FONT SIZE=2 face=arial,helvetica,sans-serif>ImplementingIMoaMmXScripting </FONT></A><BR></H5><P>To implement its functions, the Scripting Xtra implements the<CODE>IMoaMmXScripting::Call()</CODE> method. The Xtra shouldperform a <CODE>switch</CODE> selection based on the value ofthe <CODE>methodSelector</CODE> passed in the <A HREF="#erehwon"><FONT SIZE=2>MoaMmCallInfo</FONT></A>structure. This field contains the enumeration constant correspondingto the function being called. The same structure also providesvalues for any arguments to the function and a field for a returnvalue. <BR><BR>Here's a complete sample implementation of the <CODE>Call()</CODE>method. <BR><PRE><FONT SIZE=2>STDMETHODIMP CScriptingTemplate_IMoaMmXScripting_Call(        XXScripting_IMoaMmXScripting FAR * This,        PMoaMmCallInfo callPtr){        X_ENTER        PIMoaMmUtils pMmUtils = NULL;         MoaError err = kMoaErr_NoErr;        err = This-&gt;pObj-&gt;pCallback-&gt;lpVtbl-&gt;QueryInterface(This-&gt;pObj-&gt;pCalback,        &amp;IID_IMoaMmUtils, &amp;pMmUtils);        if (err == kMoaErr_NoErr) {                switch ( callPtr-&gt;methodSelector )                 {                        case m_new:                                /* Called when creating a new child.                                  Setup instance vars for child.*/                                break;                        case m_globalFunction: /* a global function */                                err = pMmUtils-&gt;lpVtbl-&gt;PrintMessage(pMmUtils, \                                &quot;you've called the global function example\n&quot;);                                break;                        case m_parentFunction: /* a parent function */                                err = pMmUtils-&gt;lpVtbl-&gt;PrintMessage(pMmUtils, \                                               &quot;You've called the parent function example\n&quot;);                                break;                        case m_childFunction: /* a child function */                                err = pMmUtils-&gt;lpVtbl-&gt;PrintMessage(pMmUtils, \                                        &quot;you've called the child function example\n&quot;);                                break;                        default:                                err = kMoaDrErr_FunctionNotDefined;                                break;                }        }        X_RETURN(MoaError, err);        X_EXIT}</FONT></PRE><H4><A NAME="RTFToC22"><FONT face=arial,helvetica,sans-serif>Scripting Xtrasin Director</FONT></A></H4><H5><FONT SIZE=2 face=arial,helvetica,sans-serif>Loading Scripting Xtras<BR></FONT></H5><P>When the user puts a Scripting Xtra into one of the standard Xtradirectories, it is loaded automatically when Director starts.There are two standard Xtra directories, one system-wide and oneexclusive to Director. <BR><BR>To load a Scripting Xtra into Director from another directory,use the Lingo command <CODE>openXLib</CODE>. The <CODE>openXLib</CODE>takes a complete pathname for the Xtra. The pathname may be relativeto the folder containing the movie or complete, including thesource disk or volume. The pathname always includes the filenameof the Xtra (not the internal name identifying the Xtra). Forexample:<BR><BR><CODE>openXLib &quot;LocalDrive:MoreLingo:MyLingoXtra&quot; <BR><BR><FONT SIZE=2 FACE="Courier">openXLib</FONT></CODE> is documentedin the Lingo Dictionary.<BR><H5><A NAME="RTFToC23"><FONT SIZE=2 face=arial,helvetica,sans-serif>UnloadingScripting Xtras </FONT></A><BR></H5><P>To remove a Scripting Xtra from memory, call the <CODE>closeXLib</CODE>Lingo command. (You must also set all previously defined childvariable to zero.) For example:<BR><BR><CODE>set myXtraChild = 0<BR><BR><FONT SIZE=2 FACE="Courier">closeXLib &quot;MyLingoXtra&quot;<BR><BR>closeXLib</FONT></CODE> is documented in the Lingo Dictionary.<BR><HR width=45% align=left><P><A HREF="../copyrite.htm">Copyright &#169; 1995, 1996, 1997, 1998, 1999 Macromedia, Inc.</A></BODY></HTML>
<HTML><HEAD><TITLE>Tips, Guidelines, and Gotchas</TITLE><META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0z"></HEAD><body bgcolor="#FFFFFF"  link="#ff3300" alink="#ff3300" vlink="#333399"><P><A NAME="RTFToC2"></A><A HREF="index.htm">MM Developer's Guide</A><BR><A HREF="../mmref/index.htm">MM Interfaces</A> | <A HREF="../mmref/mmmthndx.htm">MM Methods</A>| <A HREF="../mmref/mmtypndx.htm">MM Types and Misc API</A> <BR><HR width=45% align=left><H3><FONT SIZE=4 face=arial,helvetica,sans-serif>Director 7 Xtra Development Kit: Multimedia Developer's Guide</FONT></H3><H2><FONT SIZE=5 face=arial,helvetica,sans-serif>Tips, Guidelines, and Gotchas</FONT></H2><HR width=45% align=left><P>This discussion contains some general guidelines for all typesof Xtra development, as well as specific suggestions for developingthe four types of Xtras supported by the Director XDK.It's somewhat of a grab bag, including both very general and veryspecific coverage of a number of topics.<BR><BR>You may want to read through this information before you startdeveloping Xtras. You should also review the information hereas you develop your Xtras, since much of the information appliesto specific areas of Xtra development.<BR><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC5">General</A> </font></h4><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC6"><FONT SIZE=2>Use the   skeleton and example projects </FONT></A><BR></font></h5><P> This XDK comes with skeleton projects in the Examples folder for Interrogator,   Transition, Sprite, Scripting, and Tool Xtras. These templates include projects   for Visual C++ and Metrowerks CodeWarrior, and skeleton code files containing   comments that briefly describe modifications to make to create your Xtra. <BR><BR>There are also a number of working example projects that demonstratevarious coding features described in this documentation. One wayto begin Xtra development is to start with a working example thatimplements many of the features you plan to provide, and modifyit to include your code. <BR><BR>Note that when modifying the template and example projects, youshould only need to change source file names--and possibly addnew source files--in the projects. If you are developing in C++,you can change the code model in the project. <BR><BR><B>IMPORTANT: </B><I>YOU MAY FREELY CHANGE SOURCE FILES IN THEEXAMPLE PROJECTS. HOWEVER, TAKE CARE IN MODIFYING ANY PROJECTSETTINGS. THESE PROJECTS PROVIDE A NUMBER OF STANDARD SETTINGSREQUIRED TO MAKE XTRAS WORK CORRECTLY. <BR><BR></I>See the Readme file in the Examples folder for more detailson using the example projects.<BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC7"><FONT SIZE=2>Use unique values </FONT></A><BR></font></h5><P>Be sure all class IDs you define are unique; these should be generatedwith the MSVC GUID program or Macromedia's GenUID app.<BR><BR>Windows DLLs: Make sure the library name in your .DEF files isunique<BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC8"><FONT SIZE=2>Use resource files </FONT></A><BR></font></h5><P>If possible, use resources to store any strings, including yourtype symbol, display name, etc. This will provide a way for someusers to resolve conflicts if there is a duplicate symbol name.Also it will make it easier to localize your Xtra.<BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC9"><FONT SIZE=2>Coding details </FONT></A><BR></font></h5><P>Unless otherwise noted, all string lengths specified include theterminating NULL (0x00) character (ie, standard C strings). Thus,where a string length is specified as 32, the maximum number ofuseable characters in the string is actually 31. <BR><BR>  Do not depend on globals being initialized in Xtras. The behavior of global   variables in code resources/code fragments/DLLs varies.<BR><BR>Remember that your code may be shared by multiple applicationsor projectors running simultaneously. Again, this makes it verydifficult to rely on global variables on platforms that only initializethem on a per-load basis (rather than per-instance).<BR><BR>Make your code re-entrant. Your Xtra may be called back as a resultof a call your xtra makes to the host application. For example,if you post a moveable modal dialog using <CODE>MacModalDialog</CODE>,your Xtra may be called back (from within the <CODE>MacModalDialog()</CODE>call) to redraw thumbnails, re-image a sprite on the stage, etc.,if the dialog is moved. This means that the data required to performthese operations must never be left in an inconsistent state whilea call back to the host application is being made.<BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC10"><FONT SIZE=2>Registration and Initialization</FONT></A><FONT SIZE=2><BR></FONT></font></h5><P>In general, all interfaces you acquire through QueryInterfaceshould be tested before you attempt any calls to them  This isparticularly crucial with regard to application-specific callsin your registration class (supporting <A HREF="../moref/REGISTER.HTM" ><FONT SIZE=2>IMoaRegister</FONT></A><CODE>)</CODE>.The <CODE>MoaCreate()</CODE>, <CODE>MoaDestroy()</CODE>, and <CODE>Register()</CODE>methods of this class may be called by <EM>any</EM> MOA application.One approach is for your <CODE>Register()</CODE> implementationto test for the interfaces your Xtra needs from an applicationby calling <CODE>QueryInterface()</CODE>, and not register itselfif they aren't present.<BR><BR>The IMoaMmInterrogate interface is provided for initializing librariesand allocating large blocks of memory at startup time.  This processslows application startup, so you should be certain you need itbefore adding it to your Xtra.  Whenever possible, use the <CODE>IMoaRegister</CODE>interface to cache initialization information, since it 's onlyinstantiated the first time an application encounters your Xtra.<BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC11"><FONT SIZE=2>Testing</FONT></A></font></h5><UL><LI>Test your Xtra in low memory.<LI>Test your Xtra in both authoring and playback applications.<LI>Test your Xtra with other Xtras installed. This will helpidentify possible conflicts ahead of time. <LI>Test your Xtra with other MOA-enabled applications. Even ifyour Xtra is not intended to work with another MOA app, such asSoundEdit or Authorware, try launching one of these apps withyour Xtra in its Xtras folder. Your Xtra must fail gracefullyand not register if it is not running in an application that supportsthe callback interfaces it needs.  Save-disabled versions of Macromediaapplications are available on the Macromedia Showcase CD.  <LI>Test your Xtra without Virtual Memory workarounds for PowerPC Macintoshes. (On Power PC Macintoshes, when VM is off, MOAuses the call <CODE>GetMemFragment()</CODE> to load Xtras. However,the Metrowerks debugger won't properly debug code fragments loadedwith this call. However, if you add a file in the Xtras foldernamed &quot;_XtraDebugMode_&quot;, the call <CODE>GetDiskFragment()</CODE>is always used to load PPC Xtras, regardless of the VM state.This trick is intended for debugging purposes ONLY; your Xtrasshould be tested without this workaround in place before shipping.)</UL><P><BR><h5><font face=arial,helvetica,sans-serif><FONT SIZE=2>Accessing QuickDraw Globals on the Macintosh<BR></FONT></font></h5><P>There are two methods to access QuickDraw globals. Here is thefirst method:<BR><BR><CODE>#include &lt;LowMem.h&gt;<BR><FONT SIZE=2 FACE="Courier">#include &lt;Quickdraw.h&gt;<BR>#define qd (*((QDGlobals *) (*((GrafPtr **) LMGetCurrentA5())+ 1) - 1))<BR><BR></FONT></CODE>If you're already accessing Director's stage window'sgraphics context, then the pointer to Director's QuickDraw globalsis available as part of the <CODE>nativeGCInfo </CODE>which youcan get using the <CODE>IMoaMmGC:GetNativeGCInfo </CODE>interface.<CODE>IMoaMmGC </CODE>interfaces are supplied to sprite and transitionXtras at drawing time; you can also get the graphics context fora movie's stage window by calling <CODE>IMoaDrMovie::GetStageWindowGC()</CODE>.Note that at start-up initialization time, a movie is not yetopen so you'll get an error if you try to obtain its graphicscontext at that time. However, it should be available in normalcircumstances. (Always check your error codes!) Here is an exampleof the second technique:<BR><BR><CODE>MoaMmNativeGCInfo nativeInfo;<BR><FONT SIZE=2 FACE="Courier">PIMoaDrMovie pMovie = NULL;<BR>PIMoaMmGC pGC = NULL;<BR>QDGlobals * pQDGlobals = NULL;<BR><BR>HANDLE_ERR( DrPlayer_GetActiveMovie(&amp;pMovie) );<BR>HANDLE_ERR( pMovie-&gt;lpVtbl-&gt;GetStageWindowGC(pMovie, &amp;pGC));<BR>HANDLE_ERR( pGC-&gt;lpVtbl-&gt;GetNativeGCInfo(pGC, &amp;nativeInfo) );<BR><BR>pQDGlobals = nativeInfo.mac_window.qdGlobalsPtr;<BR><BR>/* Do your stuff with the QuickDraw globals. It's okay to saveit too, since it won't change during the session.<BR>*/<BR><BR>done:<BR><BR>/* Release interfaces we obtained */<BR>if (pGC) pGC-&gt;lpVtbl-&gt;Release(pGC);<BR>if (pMovie) pMovie-&gt;lpVtbl-&gt;Release(pMovie);<BR><BR>  </FONT></CODE>You might have to be careful with the first technique since support   for A5 on PPC may go away in some future system software release (then again,   so might the QuickDraw globals!). The second technique is currently Director   API-specific, so it won't work if you're writing Xtras to be used in multiple   products (for example, transitions for Director 7/Authorware 4).<BR><BR><h5><font face=arial,helvetica,sans-serif><FONT SIZE=2>Cast Member Media Notes<BR></FONT></font></h5><P>You can only get the media in the formats listed for <CODE>IMoaDrCastMem</CODE>.The available formats depend on the cast member type and the platform(Macintosh or Windows). Only the <CODE>macPICT</CODE> and <CODE>winDIB</CODE>formats are currently supported for image media.<BR><BR>If you are specifying <CODE>macPICT</CODE> format media for animage, the <CODE>pMoaVoid mediaData</CODE> parameter to <CODE>IMoaDrUtils::NewMediaInfo()</CODE>must be of type <CODE>Handle</CODE>, or more precisely a <CODE>PicHandle</CODE>;in other words, it must be a pointer to a pointer to a <CODE>Picture</CODE>structure.<BR><BR><CODE>IMoaDrUtils::NewMediaInfo() </CODE>encourages you to providethe parameters to fill in the <CODE>MoaDrMediaInfo </CODE>structure.The <CODE>IMoaDrCastMem::SetMedia() </CODE>call will actuallytest. <BR><BR>Director tends to report an out-of-memory condition for errorsin setting bitmap media, assuming that the bitmap was too large.<BR><BR>Although the table of media formats gives <CODE>&quot;composite&quot;</CODE>and <CODE>&quot;moaHandle&quot;</CODE> as the media label andformat for Digital Video, digital video is not currently storedin a movie. Instead, Digital Video is always linked, regardlessof whether you check the Linked box or not when you import it.As a result, you can't get the media of digital video cast members.You have to read the linked file (accessible with the <CODE>fileName</CODE>property).<BR><BR><h5><font face=arial,helvetica,sans-serif><FONT SIZE=2>How do I get the Cast selection?<BR></FONT></font></h5><P>The selection of a <CODE>castLib </CODE>is a Lingo list of lists.Each sublist represents a continuous range of selected cast membersin that cast. Try selecting a bunch of cast members (using shiftand command/control to do continuous and non-contiguous selections),then view the list in Lingo: <BR><BR><CODE>put the selection of castlib 1<BR><FONT SIZE=2 FACE="Courier">[[3,5], [6,6] [10, 14]]<BR><BR></FONT></CODE>This means that cast members 3, 4, 5, 6, 10, 11,12, 13, and 14 are selected. <BR><BR>To traverse a list-type <CODE>MoaMmValue</CODE>, use the callbackclass' <CODE>IMoaMmList </CODE>interface. See MMISERVC.H for theinterface declaration. Use this interface to create new listsand to traverse existing lists. You can find out how many itemsare in a list <CODE>MoaMmValue </CODE>(<CODE>CountElements()</CODE>),get the nth item (<CODE>GetValueByIndex()</CODE>), and so on.This interface lets you manipulate both linear and property lists.<BR><BR>The cast selection is a linear list where each element is itselfa linear list containing two elements. You are guaranteed thateach sublist which describes a range always contains exactly twoelements-- the start and end of the range-- and that these elementsare integers. <BR><BR>How do you know which cast to get the selection from in a multiple-castmovie? You should first obtain the <CODE>&quot;activeCastLib&quot;</CODE>property from the movie interface using <CODE>IMoaDrMovie::GetProp()</CODE>.This tells you the index of the castLib in the currently activecast window (or the most recently active cast window if one isnot currently active). Then using <CODE>IMoaDrMovie::GetNthCast()</CODE>to get the corresponding cast interface. <BR><h5><font face=arial,helvetica,sans-serif><FONT SIZE=2>Bitmap Media<BR></FONT></font></h5><P> <CODE>macPICT</CODE> is only supported on the Macintosh; <CODE>winDIB</CODE>   is only supported on Windows. Director 7 doesn't have the notion of a single,   cross-platform image format in the MOA APIs.<BR><BR><h5><font face=arial,helvetica,sans-serif><FONT SIZE=2>DIB's<BR></FONT></font></h5><P>When supplying a DIB to <CODE>SetMedia() </CODE>or <CODE>AttachMedia()</CODE>,it must be a global handle. If you get errors, make sure you canlock the handle with <CODE>GlobalLock()</CODE>.<BR><BR>  Manipulating DIB's is tricky. Microsoft provides samples with routines that   manipulate DIB's in MSVC 5.0 and higher (see Samples\Win32\Wincap32).<BR><BR>  <BR><h5><font face=arial,helvetica,sans-serif><FONT SIZE=2>What is a winDIB, the media format for a WindowsPICT castmember type?<BR></FONT></font></h5><P>Also known as a &quot;packed DIB,&quot; winDIB is a Windows globalHANDLE containing the BITMAPINFO followed by the pixel data. Thisturns out to be the same format as a Windows BITMAP resource.Remember that the color table, whose length depends on the pixeldepth, is part of the BITMAPINFO structure, so you need to accountfor the pixel depth when calculating the offset to the lpBits.To see an example of calculating the offset to the bits and usingthe <CODE>IMoaMmGC::Blit()</CODE> callback to do blitting withDIBs, see the file IMAGEWIN.C in the Windows &quot;INKTEST&quot;sprite xtra sample.<BR><BR>Also, remember to check out the <CODE>SetMedia() </CODE>optionsfor image media. These are defined in DRTYPES.H. The options letyou specify new pixel depth and/or palette to use when applyingthe image media to a bitmap cast member.<BR><h5><font face=arial,helvetica,sans-serif><FONT SIZE=2>PICT's<BR></FONT></font></h5><P>Typically, to manipulate a <CODE>PICT</CODE>, you render it intoa GWorld. Create a GWorld which is the bounds, pixel depth, andpalette of the <CODE>PICT. Y</CODE>ou can get this informationusing the <CODE>PICT</CODE> utilities Macintosh toolbox calls,then call <CODE>DrawPicture() </CODE>to draw it into the GWorld.There, you've got direct access to the pixels, just like a DIBon Windows. Also, since it's a GWorld, you can use the normalMacintosh QuickDraw calls to draw into it and manipulate it likea GrafPort. To create a <CODE>PICT </CODE>again, you open a picture,<CODE>CopyBits()</CODE> the GWorld onto itself, and close thepicture. This is somewhat cumbersome and relatively slow, but<CODE>PICT </CODE>is pretty universal on the Macintosh and assuch is the most convenient choice as an interchange format.<BR><h5><font face=arial,helvetica,sans-serif><FONT SIZE=2>Bitmaps provided by Director<BR></FONT></font></h5><P>Everything should be uncompressed, flat pixels by the time youget it (in your GWorld on the Macintosh or DIB on Windows). Thepixel depth can be 1, 2, 4, 8, 16, or 32. The palette can be anypalette if the pixel depth is less than or equal to 8. <P>When setting bitmap media, there are several useful options forspecifying the pixel depth and palette to use. You can:<UL><LI>Have Director remap the image for you to fit the current pixeldepth/palette of the cast member to which you're setting <LI>Have Director use the pixel depth/palette in the image datafrom which you're setting <LI>Specify the pixel depth/palette explicitly using an <CODE>auxInfo</CODE>structure, optionally having Director dither it if necessary<LI>Have Director put up a dialog to let the end-user specifythe pixel depth/palette<BR></UL><h5><font face=arial,helvetica,sans-serif><FONT SIZE=2>The Xtras Menu in Director<BR></FONT></font></h5><P>Director has an Xtras menu in authoring mode. Director placesvarious items in this from the Xtras folders.<BR><BR>Tool Xtras appear in the Xtras menu automatically, displayingusing the user interface name and category (organized as a submenuof Xtras) that you register. You can supply an About box for anykind of Xtra this way.<BR><BR>  Director will display movies and casts that it finds in its Xtras folder in   the Xtras menu. Director recognizes their type and puts them in its Xtras menu.   You can supply a sample movie or user interface that manipulates your Lingo   or sprite Xtra this way.<BR><BR>You can combine the two approaches to provide a sample movie ina submenu. Movies and casts don't ordinarily appear in a submenu,but you can create a simple Tool Xtra that loads a related movieby sending Lingo commands with <CODE>IMoaDrPlayer::CallHandler()</CODE>.This way your movie will be grouped in your submenu of the Xtrasmenu. You can still keep the movie in a subdirectory within theXtras folder by giving it a name starting with a dash (-). Itappears that Director will not display movie names start witha dash (-) in its Xtras menu.<BR><BR>Be aware that not all products implement all kinds of Xtras, sodon't depend on all Xtras being loaded. <BR><h5><font face=arial,helvetica,sans-serif><FONT SIZE=2>If I register two menu items for a Tool Xtra(so that I have a submenu under &quot;Xtras&quot;, with two itemson it), how can I tell which menu item was selected in my Invokemethod?<BR></FONT></font></h5><P>There are two ways to do this; the first method is to registera different class for each item. You'll know which item is selectedbecause Director will create an instance of the correspondingclass. The drawbacks are that there is more code for you to writeand you need to generate multiple class IDs, and so on.<BR><BR>The second technique is to register the same class multiple times,once for each item. To distinguish each entry, you must put aprivate piece of data into the registry for each entry, then,when your <CODE>IMoaInitFromDict </CODE>is called and you getaccess to the registry entry, you can look at your private datato figure out which entry was chosen.<BR><BR>This is why there's a for loop in the sample code for <CODE>IMoaRegister_Register</CODE>.Simply increase <CODE>&quot;kToolCount&quot;</CODE> to the numberof items you want to register. Add the name, category, and <CODE>&quot;alwaysEnabled&quot;</CODE>setting to the registry array initializers declared in <CODE>CToolRegister_IMoaRegister_Register</CODE>.The <CODE>&quot;myData&quot; </CODE>array in this function isthere to show you that you can put any arbitrary info into theregistry and then retrieve it later at initialization time. <BR><BR>A simple way to distinguish your entries is just to put an indexhere, if you have four items to register:<BR><BR><CODE>myData[kMyToolCount] = {0, 1, 2, 3};<BR><BR></CODE>Inside the for loop, add a statement to put the correctelement of the <CODE>myData</CODE> array into the registry:<BR><BR><BR><CODE>for (count = 0; count &lt; kMyToolCount; count ++) {<BR><BR><BR><FONT SIZE=2 FACE="Courier">...AddRegistryEntry()...<BR>/* Register standard tool entries */<BR>...<BR><BR>/* Register private entry - we make up key called &quot;myData&quot;to use to reference the data */<BR><BR>/* Add a line like this that puts the myData value into the registry*/ <BR>if ((err = pRegDict-&gt;lpVtbl-&gt;Put(pRegDict, kMoaDictType_Bytes,<BR>&amp;&amp;myData[count], sizeof(MyData), &quot;myData&quot;))<BR>!= kMoaErr_NoErr) break;<BR>}<BR><BR></FONT></CODE>Now, the time to access this data is in your <CODE>IMoaInitFromDict</CODE>call. Here you are passed in a pointer to the corresponding registryfor the entry that was used to create the instance (ie, correspondsto the item selected). For example:<BR><BR><CODE>STDMETHODIMP CMyTool_IMoaInitFromDict_InitFromDict(... This,<BR><FONT SIZE=2 FACE="Courier">PIMoaRegistryEntryDict pRegistryDict)<BR>{<BR>X_ENTER<BR><BR>MyData myData;<BR><BR>if (pRegistryDict)<BR>{<BR><BR>if (pRegistryDict-&gt;lpVtbl-&gt;Get(pRegistryDict, kMoaDictType_Bytes,<BR>&amp;&amp;myData, sizeof(MyData), &quot;myData&quot;) == kMoaErr_NoErr)<BR>{<BR><BR>/* Found the &quot;myData&quot; entry in the dictionary and stuffedit into tthe local variable myData. This is one of the { 0, 1,2, 3 } values we stuffed in earlier. Use this value to initializeyour instance data so you know which item was selected when yourInvoke() method is called. */<BR><BR>/* Example - assumes we have an instance variable called itemSelected*/<BR><BR>This-&gt;pObj-&gt;itemSelected = (MoaLong) myData; /* Just saveoff the index */<BR>}<BR>else<BR>This-&gt;pObj-&gt;itemSelected = -1L; /* Use to indicate an initializationerror */<BR>}<BR><BR>X_RETURN(MoaError, kMoaErr_NoErr)<BR>X_EXIT<BR>}<BR></FONT></CODE><P>Later in your <CODE>Invoke()</CODE> method, switch off of <CODE>This-&gt;pObj-&gt;itemSelected</CODE>to determine which item was chosen. If using the case above,if itemSelected is (-1) there was some kind of error, otherwise,it's 0, 1, 2, or 3-- the index into the item selected. This indexdoes not necessarily correspond to the order in which the itemsappear in the menu; it corresponds to the order in which the itemswere registered.<BR><h5><font face=arial,helvetica,sans-serif><FONT SIZE=2>What happens to Director's event loop when amenu is active?<BR></FONT></font></h5><P>In general, the Director event loop is suspended while a menuis active. This is also the case if you're in a tight Lingo repeatloop or the host application is busy doing some other processing;it is a general issue with cooperative multitasking.<BR><BR>  If you want to ensure you get time slices on a more regular basis, you should   use threads or VBL tasks on the Macintosh. Use periodic multimedia timers on   Windows. You have to be careful when executing code at interrupt time, however,   since there are memory restrictions, reentrancy issues, and context-switching   to deal with.<BR><h5><font face=arial,helvetica,sans-serif><FONT SIZE=2>Xtras and resources<BR></FONT></font></h5><P>On the Macintosh, put any custom resources for your Xtra in theresource file associated with your CodeWarrior project. To useyour resources, you must surround calls which access your resourceswith calls to <CODE>MoaBeginUsingResources() </CODE>and <CODE>MoaEndUsingResources()</CODE>.This is necessary to allow the host application to set up theresource chain to point to your Xtra's resources (otherwise, usingMacintosh resource manager calls will look for the resources inthe host application, not your Xtra). You should do this on Macintoshand Windows although it currently is not operational on Windows.For example:<BR><BR><CODE>{<BR><FONT SIZE=2 FACE="Courier">XtraResourceCookie myCookie, saveCookie;<BR><BR>/* Set up resource chain */<BR>myCookie =<BR>This-&gt;pObj-&gt;pCallback-&gt;lpVtbl-&gt;MoaBeginUsingResources(This-&gt;pObj-&gt;pCallback,<BR>gXtraFileRef, &amp;saveCookie);<BR><BR>/* Access your resources here */<BR>GetIndString(myString, kMyStringListID, kMyStringID); <BR><BR>/* Restore resource chain */<BR><BR>This-&gt;pObj-&gt;pCallback-&gt;lpVtbl-&gt;MoaEndUsingResources(This-&gt;pObj-&gt;pCallback,<BR>gXtraFileRef, saveCookie);<BR>}<BR><BR></FONT></CODE>IMPORTANT: You must call <CODE>MoaEndUsingResources()</CODE>before returning from your Xtra method implementation function,otherwise, when control returns to the application, the resourcechain will still be set to point to your Xtra; the applicationmay not be able to access its own resources. So, your <CODE>MoaBeginUsingResources()</CODE>and <CODE>MoaEndUsingResources() </CODE>calls must bothoccur in the context of a single call to one of your Xtra's methods.<BR><h5><font face=arial,helvetica,sans-serif><FONT SIZE=2>Xtras and Shockwave<BR></FONT></font></h5><P> Xtras needed to run a movie in Shockwave or in projectors can be downloaded   automatically (Xtra downloading). For an explanation of this feature, see the   related TechNotes on the Director support section of www.macromedia.com. (Search   for &quot;Xtra Downloading&quot;.)<BR><BR>In all cases, the host MOA application (Shockwave for Directorin this case) traverses subdirectories of the support folder,up to four levels deep, so you can place Xtras in folders. Itis a particularly good idea to put Xtras for Microsoft InternetExplorer in a \Windows\System\Xtras\.... folder.<BR><h5><font face=arial,helvetica,sans-serif><FONT SIZE=2>Xtras must be unique<BR></FONT></font></h5><P>Remember that in general, Xtras have more than one GUID. There'sa GUID for each class, so if you have a separate registrationclass, you need a unique GUID for that in addition to your assetand actor, Lingo, or tool classes. To ensure this, try runningyour Xtra with every sample Xtra in the Xtras folder; you shouldnot get any conflict notices.<BR><BR>When you create an Xtra in addition to making sure that all ofyour GUID's are unique, you want to ensure that other items foryour Xtra are unique.<BR><BR>If you create an asset Xtra (sprite or transition), your asset'stype symbol (<CODE>kMoaMmDictKey_SymbolString</CODE>) must beunique. This is a single string, maximum 32 characters (includinga trailing null) that's typically defined in your implementationfile and registered in your <CODE>IMoaRegister::Register() </CODE>implementation.Note that this is separate from your Xtra's display name (<CODE>kMoaMmDictType_DisplayNameString</CODE>)and display category (<CODE>kMoaMmDictType_DisplayCategoryString</CODE>),which are what the user sees in the host application's user interface.The type symbol is used internally to differentiate your Xtrafrom others, and is used when referring to your asset from Lingo.<BR><BR>If you create a Lingo Xtra, your Lingo Xtra's name (the name afterXtra in the <CODE>msgTable</CODE>) must not conflict with otherLingo reserved words and other Xtras. Also, any global handlers(names that appear with an asterisk (*) before them in the <CODE>msgTable</CODE>)must not conflict with other Lingo words.<BR><BR>It's a good idea to use a unique short prefix for your organization,which can be the same for all the Xtras you implement. Macromediawill register these symbols and keywords. Macromedia will notregister GUID's.<BR><h5><font face=arial,helvetica,sans-serif><FONT SIZE=2>Handling Errors<BR></FONT></font></h5><P>Here is one way to handle errors in a Director-only Xtra: <BR><BR>Trap the error internally and use <CODE>CallHandler() </CODE>toexecute the Lingo <CODE>Alert()</CODE> function to display yourown error dialog.<BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC12"><FONT SIZE=2>Managing interfaces and values</FONT></A><BR></font></h5><P>Throughout this API, you'll find cases where you create or useinstances of MOA interfaces, sets of methods for manipulatingobjects, and <CODE>MoaMmValues</CODE>, object-like entities thatrepresent specific types of values. Both MOA interfaces and <CODE>MoaMmValues</CODE>use reference counting to determine when they can be removed frommemory.<BR><BR>There are various ways to acquire a value or interface, and theway you acquire it determines whether or not you are responsiblefor releasing it. Call the <CODE>IMoaUnknown::Release()</CODE>method to remove a reference to an interface; call the <CODE>IMoaMmUtils::ValueRelease()</CODE>method to remove a reference to a <CODE>MoaMmValue</CODE>. <BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC13"><FONT SIZE=2>The &quot;caller owns&quot;rule </FONT></A><BR></font></h5><P>Objects acquire interfaces and values by calling methods or byhaving their methods called. The &quot;caller owns&quot; ruledefine who is responsible for releasing an interface or value.<BR><BR>The rule is this: <I>The owner of an interface or value is theobject that calls the method requesting or providing it.</I> Theowner is always responsible for releasing an interface or valuewhen through with it. <BR><BR>Here are the four cases to help clarify this rule:<BR><BR>* When your Xtra calls a method to request a value or interfacefrom another object, you own the interface or value returned.<BR><BR>Examples of methods that your Xtra might call are <CODE>IMoaUnknown::QueryInterface()</CODE>and <CODE>IMoaMmPropOwner::GetProp()</CODE>. You must call <CODE>IMoaUnknown::Release()</CODE>on interfaces or <CODE>IMoaMmPropOwner::ValueRelease()</CODE>on values acquired by calling these methods when you are throughwith them. <BR><BR>* When another object calls a method in your Xtra to request avalue or interface, the other object owns the interface or valueyou pass back. <BR><BR>Examples of such methods are <CODE>NewXActor()</CODE> and <CODE>GetProp()</CODE>in the <CODE>IMoaMmXAsset</CODE> Xtra interface. Note that thistransfers ownership to the caller. That is, if you create theinterface of value within the function being called, your ownershipends once you have passed it along. However, if you pass an interfaceor value that you are holding in an instance variable, you mustcall <CODE>IMoaUnknown::AddRef()</CODE> or <CODE>IMoaMmUtils::ValueAddRef()</CODE>to increment the reference count before passing it to the caller.<BR><BR>* When your Xtra calls a method in another object, providing avalue or interface as one of the arguments, you own the interfaceor value. <BR><BR>An example of such a method is <CODE>IMoaMmUtils::MacRegisterWindow()</CODE>.When you call this method to register a window, one of the argumentsyou pass is an <CODE>IMoaMmMacEventHandler</CODE> interface. Afteryou call <CODE>MacUnregisterWindow</CODE>, you are responsiblefor disposing of the event handler interface. <BR><BR>* When another object calls a method in your Xtra, providing aninterface or value as one of the arguments it passes to you, thatobject retains ownership.<BR><BR>An example of this type of method is <CODE>IMoaMmXAsset::SetCallback()</CODE>,used to pass a callback interface to media asset Xtras. If yourasset wants to hold onto this interface, it must call <CODE>IMoaUnknown::AddRef()</CODE>on it to assert ownership, then call <CODE>IMoaUnknown::Release()</CODE>on it when finished. <BR><BR>As you develop your Xtras, make sure the instances and valuesyou create and released when you expect. Similarly, make surememory you allocate (via <CODE>IMoaCalloc</CODE> or <CODE>IMoaHandle</CODE>)is being released properly as your Xtra performs. <BR><h5><font face=arial,helvetica,sans-serif><FONT SIZE=2>Notes on using CallHandler()<BR></FONT></font></h5><P>There are some commands that you can execute in Lingo that don'tcomply with the syntax which <CODE>CallHandler() </CODE>is builtfor: <BR><BR>command value1, value2, value3, ...<BR><BR>or<BR><BR>result = function(value1, value2, value3, ...) <BR><BR>Luckily, you can use Lingo to get around this. You basically haveto execute or evaluate a command or function as a string. Youdo this with the &quot;do&quot; command and &quot;value()&quot;functions, respectively.<BR><BR>To execute the COMMAND <CODE>&quot;open window foo&quot; </CODE>use<CODE>CallHandler() </CODE>with <BR><CODE>mmethod: &quot;do&quot;<BR><FONT SIZE=2 FACE="Courier">nArgs: 1<BR>arg[1]: string MoaMmValue containing &quot;open window foo&quot;or &quot;set the loc of sprite 3 to point(5,10)&quot;<BR>pResult: NULL<BR><BR></FONT></CODE>To evaluate an EXPRESSION like <CODE>&quot;the locof sprite 3&quot;</CODE> use <CODE>CallHandler() </CODE>with <BR><CODE>mmethod &quot;value&quot;<BR><FONT SIZE=2 FACE="Courier">nArgs: 1<BR>arg1: string MoaMmValue containing &quot;the loc of sprite 3&quot;<BR>pResult: pointer to MoaMmValue to get value of expression <BR><BR></FONT></CODE><h5><font face=arial,helvetica,sans-serif><FONT SIZE=2>Windows Xtras<BR>  </FONT></font><BR>  <BR>  Xtras must match the platform of Director, a projector, the Shockwave for Director   plugin because Director doesn't go through a thunking layer for Xtras. This   is good, it helps performance and a .x32 Xtra can work under Windows NT. <BR>  <BR>  If you use <CODE>openxlib </CODE>to force opening a Lingo Xtra, don't include   the extension -- use <CODE>openxlib(&quot;D:\Special\MyXtra&quot;)</CODE>, not   <CODE>openxlib(&quot;D:\MyXtra.x32&quot;)</CODE>.<BR>  <BR>  If you include the extension and you're on the wrong platform, Director will   open the file and it will show up in the list from 'showxlib' (but not in 'put   the number of xtras' or 'put the name of xtra 3'). But it doesn't do anything   with the code.<BR></h5><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC14">Asset Xtras</A><BR></font></h4><P>Use a unique symbol string for your Xtra. We recommend a symbolin the format &quot;vendorName_assetType&quot;. There is a 32character maximum length. <BR><BR>Don't forget to pick a category and display name (both have a64 character maximum) for your asset type. These should be localized,human-readable strings.<BR><BR>Do not invoke UI in your <CODE>IMoaMmXAsset::PrepareNewContent()</CODE>method unless the <CODE>newFlags</CODE> <CODE>kMoaMmNewFlags_UiPermitted</CODE>flag is set. If this bit is not set, you should silently initializedefault props/media for your asset. This will be the case if yourasset is being created programatically or at a time where UI shouldbe deferred until explicitly requested by the user (ie, a callto your InvokePropsEditor() or InvokeMediaEditor()).<BR><BR>  If supporting animated thumbnails, remember that you are responsible for &quot;pacing&quot;   the animation. The host app will call your ServiceImageAnimThumb() method as   quickly as possible; you should be prepared to run on very fast machines, which   may cause this to get called hundreds of times per second. Use a system OS timer   to &quot;throttle&quot; your animation speed; simply return immediately from   ServiceImageAnimThumb() if it is not yet time for you to draw a new frame.<BR><BR>Test your Xtra in Movies in a Window and in projectors in additionto the main movie. <BR><h5><font face=arial,helvetica,sans-serif><A NAME="RTFToC15"><FONT SIZE=2>Byte swapping</FONT></A><BR></font></h5><P>If streaming media and/or data into/out of the host applicationdocument file, don't forget to consider byte-swapping issues.If you intend to read the data back in on a different platform,are responsible for byte swapping it. In general, there are twosolutions for byte-swapping:<BR><BR>* When writing to a stream, always use a fixed byte-ordering,regardless of the executing platform. This way, you know thatyour file always contains data in a certain byte order, and youonly need to do swapping if reading/writing on the &quot;other&quot;platform. The drawback is that this always penalizes one platformsince you must always swap when both reading and writing fileson that platform.<BR><BR>* When writing to a stream, begin the sequence with a &quot;tag&quot;byte which indicates the byte ordering for the sequence. Whenreading the data, check the tag byte value; if it's the same byte-orderingas the executing platform, no need to do any swapping; if it isn't,swap the bytes. This technique never causes penalties if you'reonly working on a single platform. It can, however, cause penaltieson either platform if the data read is in the wrong byte order--this means that both the Motorola and Intel versions of your codemust do byte-swapping checks.<BR><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC16">Sprite Xtras</A><BR></font></h4><P>Make sure you're getting events when you expect. Use the messagewindow to print debug information when receiving events. If youwish these events to be passed on to Director, be sure to setthe *pHandled flag to kMoaMmSprEvent_Pass.<BR><BR>SPAN events: understand that when a movie is stopped, you willnot get an SpanEnd event if your sprite is still on the stage(you will, however, get a PlayEnd event). Span and Play eventsmust be used together when determining when to &quot;start&quot;and &quot;stop&quot; your sprite from playing.<BR><BR>Your Xtra is responsible for handling the appearance of your spritein different ink modes, colors, etc. which may be applied to it.It is not required that your xtra support these parameters, however(although many users may expect it). Try to support the commonink modes, Copy and Background Transparent, if possible. The IMoaMmGC::Blit()method is provided to aid you in supporting ink modes and colorization.<BR><BR>Test your sprite along side other built-in sprites and xtra-basedsprites. Make sure compositing is happening correctly if you areimaging &quot;off screen&quot;.<BR><BR>Your asset and sprite SetProp(), CallFunction(), InvokeMediaEditor,and InvokePropsEditor() methods are responsible for invalidatingany of your sprites that may appear on the stage if your appearanceis affected by one of these calls. Use the IMoaMmSpriteCallback::InvalSpriteRect()sprite callback for this purpose. <BR><BR>Your asset is responsible for &quot;dirtying&quot; itself if anychanges are made to its props or media that are to be saved ondisk. Otherwise, your StreamOutProps() and/or StreamOutMedia()methods may not get called. This is handled easily by returningthe correct &quot;modifyFlags&quot; from your InvokeMediaEditor()and InvokePropsEditor() methods. However, if a SetProp() or CallFunction()call modifies your data, you must explicitly call back the hostapp to notify it. Use the IMoaMmAssetCallback::SetModified() assetcallback for this purpose. Thisallows you to &quot;dirty&quot;your asset at any time.<BR><BR>Test your Xtra in filmloops, linked movies and projectors<BR><h5><font face=arial,helvetica,sans-serif><FONT SIZE=2>What's the best way for a sprite actor to intercepta mouse event and generate an event of its own? How do you writewidget-type sprite Xtras?<BR></FONT></font></h5><P>A sprite actor can send an arbitrary Lingo event that will progressthrough the normal Lingo message chain (sprite --&gt; cast member--&gt; frame --&gt; movie) using the <CODE>SendSpriteMessage()</CODE>sprite callback in the <CODE>IMoaDrSpriteCallback</CODE> interface.The sprite callback object, which supports two interfaces (<CODE>IMoaMmSpriteCallback</CODE>and <CODE>IMoaDrSpriteCallback</CODE>), is supplied toyour sprite actor through its <CODE>SetCallback() </CODE>methodjust after instantiation. You are supplied with the IMoaMmSpriteCallbackinterface. If you want to use the <CODE>IMoaMmSpriteCallback </CODE>callbacks,you should call <CODE>AddRef() </CODE>on the interface and storeit off; if you want to use the <CODE>IMoaDrSpriteCallback </CODE>interface,<CODE>QueryInterface() </CODE>for it and store it off.<BR><BR>This mechanism lets you emit an arbitrary message from your spriteobject. It was intended for allowing widget-type sprite Xtrasto be written. You'll get a return value indicating whether itwas handled or not. So, for example, in your code that handlesyour <CODE>mouseDown </CODE>or <CODE>mouseUp </CODE>event, youcould pipe off a <CODE>&quot;customEvent&quot;</CODE> message.If you have a <CODE>&quot;customEvent&quot; </CODE>handler atfor that sprite, that gets called, otherwise the cast member,frame, movie is tried. You can use the standard Lingo scheme forpassing events down the chain too.<BR><BR>If you want the original mouse event sent to your Xtra passedoff to lingo as well, simply set the <CODE>&quot;pHandled&quot;</CODE>return value for the <CODE>Event() </CODE>call to <CODE>FALSE</CODE>.This results in the <CODE>mouseDown </CODE>or <CODE>mouseUp L</CODE>ingohandler for the sprite being called. The corresponding Lingo handlerthen gets called after control is returned from your <CODE>Event()</CODE>method. This also works for keyboard events.<BR><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC17">Transition Xtras</A> <BR></font></h4><P>Test in Movies in a Window and in projectors<BR><BR>Test with Export to QuickTime, AVI, BMP.<BR><BR>Test with the playback window obscured by other authoring windows,especially if doing direct screen memory access.<BR><BR>You are responsible for &quot;throttling&quot; your transition;the host app will call your Continue() method as often as possible.Use the supplied elapsedTime or an OS timer to guage the rateof your transition and pace it accordingly. Do not depend on afixed CPU performance.<BR><BR><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC18">Scripting Xtras</A> <BR></font></h4><P>Use a unique string for your Xtra name (the first line of yourmessage table)<BR><BR>Use unique names for any global handlers you define. <BR><BR>Make sure your global handler names don't conflict with any built-inscripting language commands, handlers, or keywords.<BR><BR>In Director, test your Scripting Xtra with both &quot;manual&quot;and &quot;automatic&quot; loading. Placing it in your Xtras folder(s)will cause it to be automatically loaded at start-up. Placingit elsewhere requires the Lingo programmer to open the file using&quot;openxlib&quot; and close it using &quot;closexlib&quot;<BR><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC19">Tool Xtras</A><BR></font></h4><P>Use the &quot;alwaysEnabled&quot; setting if possible; this allowsthe host app to defer loading your xtra until it is actually selected.Otherwise, it must be loaded early for its GetEnabledState() methodto be called to determine if it should be enabled or not. <BR><BR>Remember that Tool Xtras only function in the Director authoringapplication, not in projectors<BR><h4><font face=arial,helvetica,sans-serif><A NAME="RTFToC20">Protecting your Xtras</A><BR></font></h4><P>If you want to ensure that your Xtras are used only by authorizedcustomers should follow some simple guidelines. <BR><BR>Create two versions of your Xtras, one for authoring and one forplayback. You can use the <CODE>IMoaAppInfo</CODE> interface (documentedin the <I>Moa Reference</I> document) to determine whether theXtra is being presented in the authoring or playback environment.To work correctly, each version of your Xtra should have the sameCLSID for the various classes it implements. (Note that Tool Xtraswork only in the authoring application.) <BR><BR>One way to implement protection is to simply choose not to registeryour Xtra if the context provided by <CODE>IMoaAppInfo</CODE>is wrong. Another way to provide protection for the authoringXtra is to cache and test the serial number provided by <CODE>IMoaAppInfo</CODE>.You could implement a registration scheme for your Xtra usingthis technique:<BR><BR>* Implement <CODE>IMoaRegister::Register()</CODE> to request aregistration number for your Xtra from the user. (You providethe algorithm for testing your registration numbers.) <BR><BR>* If the user inputs the registration correctly, get the hostapplication registration number from <CODE>IMoaAppInfo</CODE>,and put it in the dictionary provided by <CODE>AddRegistryEntry()</CODE>.<BR><BR>* Implement <CODE>IMoaInitFromDict</CODE> to compare the serialnumber in the registry with that provided by <CODE>IMoaAppInfo</CODE>,and to initialize the Xtra only if there's a match. <BR><BR>Note that this mechanism requires the user to re-register theXtra for each authoring application that supports MOA Xtras. Notealso that the serial number isn't provided in Director projectors,so it works only for authoring mode Xtras. <BR><BR>To protect media asset Xtras, you can tailor the functionalityto the version. The authoring Xtra could be implemented to supportfeatures such as media and property editing and streaming datato disk. The playback version could support only features requiredfor presentation, such as streaming data from disk and drawing.<BR><BR>You could also alter the drawing mode or some other user interfacefeature of your Xtra so that if it's run in the wrong context,it's immediately obvious to the user. <BR><BR>Be sure to advise authors in your Xtra documentation that theyneed to test their presentations using the playback version ofthe Xtra. You should also include a restriction in your licensingagreement that authors can only ship the playback version of theXtra with presentations they create. <BR><BR><hr width=45% align=left><P><A HREF="../copyrite.htm" >Copyright &#169; 1995, 1996, 1997, 1998, 1999 Macromedia, Inc.</A></BODY></HTML>
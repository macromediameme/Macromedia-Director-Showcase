<HTML><HEAD><TITLE>D7 XDK for Windows Readme</TITLE><META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0"></HEAD><BODY bgcolor="#FFFFFF"  link="#ff3300" alink="#ff3300" vlink="#333399"><HR width=45% align=left><H2><FONT SIZE=5 face=arial,helvetica,sans-serif>Director 8 Xtra Development Kit   </FONT></H2><HR width=45% align=left><H3><FONT SIZE=4 face=arial,helvetica,sans-serif>D8 XDK for Windows Readme</FONT></H3><P> This folder contains the Director 8.0 Xtra Developer's Kit (XDK). This XDK   provides resources for developing extensions to Director, including Sprite Xtras,   Transition Xtras, Scripting Xtras (formerly Lingo Xtras), and Tool Xtras. <P>This XDK requires Director version 8.0. <P>The D8 XDK supports the Microsoft Visual C/C++ 6.0 development environment,   and this was the environment used to create the Windows versions of the example   projects.<p>It is likely that the XDK will also support later versions of these environments. It depends on the environment's ability to convert projects from older versions. <H3><FONT SIZE=4 face=arial,helvetica,sans-serif>In these folders </FONT></H3><P>The development resources provided by this XDK are organized inthe following folders:<BR><p><TABLE  BORDER="2">  <TR>    <TD WIDTH=65>Readme </TD>    <TD WIDTH=439>A summary of the additions and changes made to the Director       8 XDK and information on the Windows and Macintosh development environments.</TD>  </TR>  <TR>    <TD WIDTH=65>Docs </TD>    <TD WIDTH=439> Director XDK documentation in HTML format. Additions and changes       to the Director 8 XDK are in a separate file. </TD>  </TR>  <TR>    <TD WIDTH=65 height="27">Examples </TD>    <TD WIDTH=439 height="27">Project and source files for several Xtra examples</TD>  </TR>  <TR>    <TD WIDTH=65 height="27">Include</TD>    <TD WIDTH=439 height="27">Header files for Xtra development </TD>  </TR>  <TR>    <TD WIDTH=65>Lib</TD>    <TD WIDTH=439>Additional Code Libraries</TD>  </TR></TABLE><H4><FONT face=arial,helvetica,sans-serif>Readme folder contents</FONT></H4><p>The Readme folder contains additional material not included in the main documentation. <p>&nbsp;<li>An overview of<a href="new.html"> what's new in the Director 8 XDK </a> <li>An overview of<a href="win_dev_environment.htm"> Developing on the Win platform.   </a><H4><FONT face=arial,helvetica,sans-serif>Docs folder contents</FONT></H4>  <p>The Docs folder contains<a href="../Docs/d8xdk_addendum.html"> the additions     and changes made to the Director 8 XDK. </a>  <P> The Docs folder also contains the Director XDK<a href="../Docs/index.htm">     documentation</a><A HREF="../Docs/index.htm"> </A>in html format. The documentation     includes a complete discussion of the types of Xtras you can develop and techniques     for creating them using this XDK.   <P> Note* <BR>    Much of the documentation still uses C calling conventions, such as: <BR>    This-&gt;pObj-&gt;pInterface-&gt;lpVtbl-&gt;FunctionOnInterface(This-&gt;pObj-&gt;pInterface,     variable1, &amp;returnVariable2);   <P> The complete Xtra example projects provided in this XDK are all written     in C++ and use the following for the same function call: <BR>    pObj-&gt;pInterface-&gt;FunctionOnInterface(variable1, &amp;returnVariable2);     <BR>  <H4><FONT face=arial,helvetica,sans-serif>Examples folder contents</FONT></H4>  <P> Examples contains folders that implement examples using the Director XDK.<BR>  <P>   <TABLE BORDER="2">    <TR>       <TD WIDTH=72>Interrogate</TD>      <TD WIDTH=432>examples of Interrogator/Terminator interface implementation       </TD>    </TR>    <TR>       <TD WIDTH=72>Script</TD>      <TD WIDTH=432>examples of Script Xtras </TD>    </TR>    <TR>       <TD WIDTH=72>Sprite</TD>      <TD WIDTH=432>examples of Sprite Xtras </TD>    </TR>    <TR>       <TD WIDTH=72>Tool</TD>      <TD WIDTH=432>examples of Tool Xtras </TD>    </TR>    <TR>       <TD WIDTH=72>Transition</TD>      <TD WIDTH=432>examples of Transition Xtras </TD>    </TR>  </TABLE>  <P> See below for a description of the examples. Some examples also include     a readme file or movie describing their behavior and any details you need     to know about compiling or using them.   <h4><FONT face=arial,helvetica,sans-serif>Lib folder contents</FONT><br>  </h4>  <p> This folder contains the XSupport Lib. The Wacky Dialog example shows how     it can be used. </p>  <h3><FONT SIZE=4 face=arial,helvetica,sans-serif>Director Xtra Development Overview</FONT></h3>  <P> There are four categories of Xtras you can create with this XDK: Sprites,     Transitions, Lingo Xtras, and Tools. Sprites provide a way to add new media     data types. Transitions provide a way to extend the list of available transitions.     Script (Lingo) Xtras provide a way to add new commands to the Scripting language.<BR>    <BR>    You make Xtras available to the application by placing them in the appropriate     folder or directory: Xtras can be placed in the folder named &quot;Xtras&quot;     inside the same folder where the Director application resides. Director comes     with an Xtras folder directory already in the application directory -- do     not remove it but instead add your Xtras into it.   <P>If you intend your Xtra to be used with Shockwave, then you need to make     sure that it follows the <font color="#FF0000">Safe for Shockwave</font> guidelines,     registers itself as <font color="#FF0000">Safe for Shockwave</font>, and is     packaged as a downloadable Xtra. Sample code for registering an Xtra as Safe     for Shockwave is included in this XDK. Instructions (in the form of a tech     note) on how to package Xtras can be found by searching for <A HREF="http://www.macromedia.com/help">     Xtra Packaging</A> on the Macromedia web site.   <h4><font face="Arial, Helvetica, sans-serif">Xtra Development Environments</font></h4>  <p>The projects included in this XDK are for use with Microsoft Visual C 6.0     for Windows. For more information developing Xtras under these environments     (including how to convert projects from older versions) see the<a href="win_dev_environment.htm">     Developing Xtras on Windows. </a>   <h4><FONT face=arial,helvetica,sans-serif>Developing for Shockwave</FONT></h4>  <P>Shockwave 7 and later will only load and run Xtras that register themselves     as "Safe for Shockwave."   <p>The constant kMoaMmErr_UnsafeforShockwave has been added to mmtypes.h.   <p>kMoaMmErr_UnsafeforShockwave may be returned by an xtra called when running     in 'safe' mode (Shockwave or a projector with safe mode turned on). This indicates     that the operation requested may not be done in safe mode. An Asset Xtra or     Lingo Xtra may be marked 'safe for shockwave' and use this error code when     unsafe operations are invoked from a movie running in safe mode.   <p><i>You must be especially careful that all operations which can be done in     safe mode are indeed safe.</i>   <p>Creators of single platform xtras will no longer need to make empty packages.     (This obsoletes the requirement of two platforms.) Package header checking     is now controlled by the #nameppc and #namew32 properties in the xtrainfo.txt     file. If only one platform is specified, only the package for that platform     will be checked for files to add to the xtra list for possible downloading.   <H4><FONT face=arial,helvetica,sans-serif>Creating GUIDs</FONT></H4>  <P> To create globally unique identifiers (GUIDs) for the classes you define     in a Windows Xtra, you need to use the application GenUID.EXE, which is provided     with the Microsoft Visual C++ development environment. Copy the GUID created     by the utility into the class header file. You need to create a new GUID for     each class in a project. (After copying, be sure to correctly redefine the     class that existed in the same line the GUID line is on.) <BR>    <BR>  <h3><FONT face=arial,helvetica,sans-serif>Notes on Example Xtras<br>    </FONT><FONT face=arial,helvetica,sans-serif> </FONT></h3>  <ul>    <li><b>Greeting:</b> Shows how to implement the Interrogate/Terminate interfaces.       The Interrogator class provides Interrogator and Terminator interfaces which       allow you to implement functionality at Director startup and shutdown times.</li>    <li><b>DrAccess: </b>Implements global and instance level Lingo commands.       Uses several callbacks and interfaces, including Director Player, Movie,       Cast and Score access.</li>    <li><b>EventTest: </b>Spews Sprite events to the message window. Handy to       familiarize yourself with the order of events in a Sprite Xtra.</li>    <li><b>InkTest:</b> Uses the new Blit2 interface to blit to its own offscreen       GC. This enables the sprite to support new D7 features such as rotation       and skewing, as well as the old Blit functionality (for this example in       particular the ability to set the inkmode of the sprite).</li>    <li><b>Oval:</b> Basic Sprite / Asset Xtra example. Also shows how to stream       props and media to/from the Director movie, and shows how to use ForceMediaLoad       and ForceMediaUnload to load and unload asset media on demand. The media       and props in this example are not real, they have been inserted for demonstration       purposes. This example file uses the IMoaNotification interface discussed       in the<a href="../Docs/d8xdk_addendum.html"> d8xdk_addendum.html </a>file.</li>    <li><b>PlaySound: </b>Shows how to use the IMoaDrSound interface to implement       a simple sound player (supports AIFF, Wav, and SWA sounds). The type of       sound is determined by the file extension (a more robust implementation       is recommended). Properties are not persistent. The Xtra does not store       the path and file name of the sound file in the cast member. The example       movie keeps this information in a script.</li>    <li><b>Wacky Dialog: </b>Shows off some of the advanced features of the XDK.       <ol>        <li>Implements a complex MUI Dialog.         <li>Separates runtime and UI Xtras for smaller Shockwave download (i.e.           just the runtime component is needed to run in Shockwave).         <li>Uses the XSupport lib for many helper functions.       </ol>    </li>    <li><b>Beep:</b> demonstrates a basic Tool Xtra</li>    <li><b>TallWide:</b> Transition Xtra demo that also shows streaming of props       into/out of Director movie, a throttled animated thumbnail, a native property       dialog and About box.</li>  </ul>  <h4><font face="Arial, Helvetica, sans-serif"> Xtra Syntax</font></h4>  <p>The examples include a variety of different coding styles to implement Xtras:</p>  <ul>    <li>X_ENTER, X_EXIT, X_RETURN macros: are used to bracket methods in most       of the examples (Greeting, EventTest, InkTest, Beep, and TallWide). This       method has been used in previous versions of the XDK. It was required when       the XDK supported 68K and Win31, as well as C development.</li>    <li>Normal C++ Style syntax: Now that just PPC and Win32 environments are       supported, a more familiar C++ style method syntax can be used. The &quot;DrAccess&quot;,       &quot;Oval&quot; and all Skeleton examples are written this way. We also       recommend using something like our &quot;exit_gracefully&quot; strategy,       which provides one exit point for each method, and thereby ensures releasing       all interfaces/resources that were acquired during that routine.</li>    <li>MoaTry/MoaCatch exception handling: The &quot;PlaySound&quot; example       demonstrates this new method for exception handling.Using moa_try and moa_catch       blocks greatly simplifies syntax by automagically checking the return values       on your Moa calls. Any error gets thrown to a predefined moa_catch block.       See the &quot;moa_try.h&quot; include file for more info.</li>    <li>XSupport exception handling: An even more powerful exception handling       scheme, used by the &quot;Wacky Dialog&quot; example. See the example for       details.</li>  </ul>  <h3><FONT SIZE=4 face=arial,helvetica,sans-serif>Xtra Developers Support</FONT></h3>  <P> This XDK is provided as is, without support. Macromedia has an Xtras Developer     Program that gives you access to a private mailing list monitored by Macromedia     engineers, along with co-marketing opportunities for commercial Xtras. This     mailing list has received rave reviews for its technical merit. <BR>    <BR>    For more information, see the <A HREF="http://www.macromedia.com/support/xtras" >Xtras     Developer Center</A> at Macromedia's support web site.   <H3><FONT SIZE=4 face=arial,helvetica,sans-serif>Additional Sources of Information     </FONT></H3>  <P> - General MOA information is in &quot;MOA Development Issues&quot; the<a href="../Docs/moadg/index.htm">     MOA Developer's Guide.</a> <BR>    <BR>    - Useful tips are in<a href="../Docs/moadg/moadgtg.htm"> &quot;Tips, Guidelines,     and Gotchas&quot;</a> in the Multimedia Developer's Guide. <BR>    <BR>    - For the latest news, online docs, and FAQs about Xtras, surf to the Xtra     Developers Center at <A HREF="http://www.macromedia.com/support/xtras" >http://www.macromedia.com/support/xtras</A>.     <BR>  <HR width=45% align=left>  <P> <A HREF="../Docs/copyrite.htm">Copyright &#169; 1999, Macromedia,     Inc.</A> </BODY></HTML>